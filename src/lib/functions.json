[
  {
    "define": "_functions.Number.AveDev",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Calculates the average absolute deviation of a list.",
    "parameters": {
      "values": {
        "type": "_types.List",
        "description": "The list of values to calculate the average absolute deviation for."
      }
    },
    "implementation": {
      "javascript": {
        "code": "const mean = $$args.values.reduce((acc, val) => acc + val, 0) / $$args.values.length;\nconst deviations = $$args.values.map((val) => Math.abs(val - mean));\nreturn deviations.reduce((acc, val) => acc + val, 0) / $$args.values.length;\n"
      }
    },
    "returns": {
      "type": "_types.Number",
      "description": "The average absolute deviation of the list."
    },
    "tests": {
      "aveDevSimple": {
        "description": "Calculate the average absolute deviation of a simple list.",
        "input": {
          "values": [1, 2, 3, 4, 5]
        },
        "expected": 1.2
      },
      "aveDevRepeatedValues": {
        "description": "Calculate the average absolute deviation of a list with repeated values.",
        "input": {
          "values": [2, 2, 2, 2, 2]
        },
        "expected": 0
      },
      "aveDevMixedValues": {
        "description": "Calculate the average absolute deviation of a list with mixed values.",
        "input": {
          "values": [1, 2, 4, 6, 8]
        },
        "expected": 2.2399999999999998
      }
    },
    "examples": [
      {
        "description": "Calculate the average absolute deviation of a list of negative values.",
        "input": {
          "values": [-1, -2, -3, -4, -5]
        },
        "expected": 1.2
      },
      {
        "description": "Calculate the average absolute deviation of a list with zero.",
        "input": {
          "values": [0, 1, 2, 3, 4]
        },
        "expected": 1.2
      },
      {
        "description": "Calculate the average absolute deviation of a list with large values.",
        "input": {
          "values": [1000, 2000, 3000, 4000, 5000]
        },
        "expected": 1200
      }
    ]
  },
  {
    "define": "_functions.Math.Abs",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Calculates the absolute value of a number.",
    "parameters": {
      "number": {
        "type": "_types.Number",
        "description": "The number to calculate the absolute value of."
      }
    },
    "implementation": {
      "javascript": {
        "code": "return Math.abs($$args.number);\n"
      }
    },
    "returns": {
      "type": "_types.Number",
      "description": "The absolute value of the number."
    },
    "tests": {
      "absPositive": {
        "description": "Calculate the absolute value of a positive number.",
        "input": {
          "number": 5
        },
        "expected": 5
      },
      "absNegative": {
        "description": "Calculate the absolute value of a negative number.",
        "input": {
          "number": -5
        },
        "expected": 5
      },
      "absZero": {
        "description": "Calculate the absolute value of zero.",
        "input": {
          "number": 0
        },
        "expected": 0
      }
    },
    "examples": [
      {
        "description": "Calculate the absolute value of a large positive number.",
        "input": {
          "number": 1234567
        },
        "expected": 1234567
      },
      {
        "description": "Calculate the absolute value of a large negative number.",
        "input": {
          "number": -9876543
        },
        "expected": 9876543
      },
      {
        "description": "Calculate the absolute value of a small negative decimal number.",
        "input": {
          "number": -0.001
        },
        "expected": 0.001
      }
    ]
  },
  {
    "define": "_functions.Math.Acos",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Calculates the arccosine (inverse cosine) of a number.",
    "parameters": {
      "number": {
        "type": "_types.Number",
        "description": "The number to calculate the arccosine of."
      }
    },
    "implementation": {
      "javascript": {
        "code": "return Math.acos($$args.number);\n"
      }
    },
    "returns": {
      "type": "_types.Math",
      "description": "The arccosine of the number in radians."
    },
    "tests": {
      "acosZero": {
        "description": "Calculate the arccosine of 0.",
        "input": {
          "number": 0
        },
        "expected": 1.5707963267948966
      },
      "acosOne": {
        "description": "Calculate the arccosine of 1.",
        "input": {
          "number": 1
        },
        "expected": 0
      },
      "acosMinusOne": {
        "description": "Calculate the arccosine of -1.",
        "input": {
          "number": -1
        },
        "expected": 3.141592653589793
      }
    },
    "examples": [
      {
        "description": "Calculate the arccosine of 0.5.",
        "input": {
          "number": 0.5
        },
        "expected": 1.0471975511965979
      },
      {
        "description": "Calculate the arccosine of -0.5.",
        "input": {
          "number": -0.5
        },
        "expected": 2.0943951023931957
      },
      {
        "description": "Calculate the arccosine of 0.3.",
        "input": {
          "number": 0.3
        },
        "expected": 1.266103672779499
      }
    ]
  },
  {
    "define": "_functions.Math.Acosh",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Calculates the inverse hyperbolic cosine of a number.",
    "parameters": {
      "x": {
        "type": "_types.Number",
        "description": "The input value to calculate the inverse hyperbolic cosine of."
      }
    },
    "implementation": {
      "javascript": {
        "code": "return Math.acosh($$args.x);\n"
      }
    },
    "returns": {
      "type": "_types.Math",
      "description": "The inverse hyperbolic cosine of the input value."
    },
    "tests": {
      "acoshOne": {
        "description": "Calculate the inverse hyperbolic cosine of 1.",
        "input": {
          "x": 1
        },
        "expected": 0
      },
      "acoshTwo": {
        "description": "Calculate the inverse hyperbolic cosine of 2.",
        "input": {
          "x": 2
        },
        "expected": 1.3169578969248166
      }
    },
    "examples": [
      {
        "description": "Calculate the inverse hyperbolic cosine of 3.",
        "input": {
          "x": 3
        },
        "expected": 1.762747174039086
      },
      {
        "description": "Calculate the inverse hyperbolic cosine of 5.5.",
        "input": {
          "x": 5.5
        },
        "expected": 2.4890806240776038
      },
      {
        "description": "Calculate the inverse hyperbolic cosine of 10.",
        "input": {
          "x": 10
        },
        "expected": 2.993222846126381
      }
    ]
  },
  {
    "define": "_functions.Math.Acot",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Given a number, calculates its arccotangent (inverse cotangent).",
    "parameters": {
      "x": {
        "type": "_types.Number",
        "description": "The number to calculate the arccotangent of."
      }
    },
    "implementation": {
      "javascript": {
        "code": "if ($$args.x === 0) {\n  return Math.PI / 2;\n}\nreturn Math.atan(1 / $$args.x);\n"
      }
    },
    "returns": {
      "type": "_types.Math",
      "description": "The arccotangent of the given number."
    },
    "tests": {
      "acotOne": {
        "description": "Calculate the arccotangent of 1.",
        "input": {
          "x": 1
        },
        "expected": 0.7853981633974483
      },
      "acotZero": {
        "description": "Calculate the arccotangent of 0.",
        "input": {
          "x": 0
        },
        "expected": 1.5707963267948966
      },
      "acotNegativeOne": {
        "description": "Calculate the arccotangent of -1.",
        "input": {
          "x": -1
        },
        "expected": -0.7853981633974483
      },
      "acotPiOverTwo": {
        "description": "Calculate the arccotangent of Ï€/2.",
        "input": {
          "x": 1.5707963267948966
        },
        "expected": 0.5669115049410094
      }
    },
    "examples": [
      {
        "description": "Calculate the arccotangent of 2.",
        "input": {
          "x": 2
        },
        "expected": 0.4636476090008061
      },
      {
        "description": "Calculate the arccotangent of -2.",
        "input": {
          "x": -2
        },
        "expected": -0.4636476090008061
      },
      {
        "description": "Calculate the arccotangent of 10.",
        "input": {
          "x": 10
        },
        "expected": 0.09966865249116204
      }
    ]
  },
  {
    "define": "_functions.Math.Add",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Add two numbers.",
    "parameters": {
      "numbers": {
        "type": "_types.List",
        "description": "The numbers to add."
      }
    },
    "implementation": {
      "javascript": {
        "code": "return $$args.numbers.reduce((sum, curr) => sum + curr, 0)\n"
      }
    },
    "returns": {
      "type": "_types.Math",
      "description": "The sum of the two numbers."
    },
    "tests": {
      "addTwo": {
        "description": "Add two numbers.",
        "input": {
          "numbers": [1, 2]
        },
        "expected": 3
      },
      "addThree": {
        "description": "Add three numbers.",
        "input": {
          "numbers": [2, 3, 10]
        },
        "expected": 15
      }
    },
    "examples": [
      {
        "description": "Add four numbers.",
        "input": {
          "numbers": [4, 5, 6, 7]
        },
        "expected": 22
      },
      {
        "description": "Add negative and positive numbers.",
        "input": {
          "numbers": [-1, 2]
        },
        "expected": 1
      },
      {
        "description": "Add numbers including zero.",
        "input": {
          "numbers": [0, 10, 20]
        },
        "expected": 30
      }
    ]
  },
  {
    "define": "_functions.Date.AddDuration",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Adds a given duration to an input date.",
    "parameters": {
      "startDate": {
        "type": "_types.Date",
        "description": "The starting date to add the duration from."
      },
      "duration": {
        "type": "_types.Number",
        "description": "The duration in seconds to add to the starting date."
      }
    },
    "implementation": {
      "javascript": {
        "code": "const startDate = new Date($$args.startDate);\nconst durationInMilliseconds = $$args.duration * 1000;\nreturn new Date(startDate.getTime() + durationInMilliseconds).toString();\n"
      }
    },
    "returns": {
      "type": "_types.Date",
      "description": "The resulting date after adding the given duration."
    },
    "tests": {
      "addDurationOneDay": {
        "description": "Add one day (86400 seconds) to a starting date.",
        "input": {
          "startDate": "2022-01-01T00:00:00.000Z",
          "duration": 86400
        },
        "expected": "Sun Jan 02 2022 00:00:00 GMT+0000 (Coordinated Universal Time)"
      },
      "addDurationOneHour": {
        "description": "Add one hour (3600 seconds) to a starting date.",
        "input": {
          "startDate": "2022-01-01T12:00:00.000Z",
          "duration": 3600
        },
        "expected": "Sat Jan 01 2022 13:00:00 GMT+0000 (Coordinated Universal Time)"
      },
      "addDurationOneMinute": {
        "description": "Add one minute (60 seconds) to a starting date.",
        "input": {
          "startDate": "2022-01-01T12:30:00.000Z",
          "duration": 60
        },
        "expected": "Sat Jan 01 2022 12:31:00 GMT+0000 (Coordinated Universal Time)"
      }
    },
    "examples": [
      {
        "description": "Add 10 days to a starting date.",
        "input": {
          "startDate": "2022-01-01T00:00:00.000Z",
          "duration": 864000
        },
        "expected": "Tue Jan 11 2022 00:00:00 GMT+0000 (Coordinated Universal Time)"
      },
      {
        "description": "Add two hours to a starting date.",
        "input": {
          "startDate": "2022-01-01T12:00:00.000Z",
          "duration": 7200
        },
        "expected": "Sat Jan 01 2022 14:00:00 GMT+0000 (Coordinated Universal Time)"
      },
      {
        "description": "Add 15 minutes to a starting date.",
        "input": {
          "startDate": "2022-01-01T12:30:00.000Z",
          "duration": 900
        },
        "expected": "Sat Jan 01 2022 12:45:00 GMT+0000 (Coordinated Universal Time)"
      }
    ]
  },
  {
    "define": "_functions.String.Alpha",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Returns the alphabetic characters of a given text, removing any non-alphabetic characters.",
    "parameters": {
      "text": {
        "type": "_types.String",
        "description": "The input text to process."
      }
    },
    "implementation": {
      "javascript": {
        "code": "const regex = /[a-zA-Z]/g;\nreturn $$args.text.match(regex).join('');\n"
      }
    },
    "returns": {
      "type": "_types.String",
      "description": "The alphabetic characters of the input text."
    },
    "tests": {
      "alphaSimple": {
        "description": "Extract the alphabetic characters from a simple string.",
        "input": {
          "text": "hello world"
        },
        "expected": "helloworld"
      },
      "alphaMultipleWords": {
        "description": "Extract the alphabetic characters from multiple words.",
        "input": {
          "text": "This is an example sentence"
        },
        "expected": "Thisisanexamplesentence"
      },
      "alphaWithNumbersAndSymbols": {
        "description": "Extract the alphabetic characters from a string with numbers and symbols.",
        "input": {
          "text": "abc123!@#def456"
        },
        "expected": "abcdef"
      }
    },
    "examples": [
      {
        "description": "Extract the alphabetic characters from a string with punctuation.",
        "input": {
          "text": "hello, world!"
        },
        "expected": "helloworld"
      },
      {
        "description": "Extract the alphabetic characters from a string with mixed case letters.",
        "input": {
          "text": "HelloWorld"
        },
        "expected": "HelloWorld"
      },
      {
        "description": "Extract the alphabetic characters from a string with spaces, numbers, and symbols.",
        "input": {
          "text": "A1 B2 C3!"
        },
        "expected": "ABC"
      }
    ]
  },
  {
    "define": "_functions.List.Amorlinc",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Please provide a description for this function.",
    "parameters": {
      "input": {
        "type": "_types.List",
        "description": "The list to operate on."
      },
      "start": {
        "type": "_types.Number",
        "description": "The index of the first item to include in the slice."
      },
      "end": {
        "type": "_types.Number",
        "description": "The index one past the last item to include in the slice. If negative, it is counted from the end of the list."
      }
    },
    "implementation": {
      "javascript": {
        "code": "return $$args.input.slice($$args.start, $$args.end);\n"
      }
    },
    "returns": {
      "type": "_types.List",
      "description": "The sliced list."
    },
    "tests": {
      "amorlincNormal": {
        "description": "Slice a list normally.",
        "input": {
          "input": ["apple", "banana", "cherry", "date", "elderberry"],
          "start": 1,
          "end": 4
        },
        "expected": ["banana", "cherry", "date"]
      },
      "amorlincNegativeEnd": {
        "description": "Slice a list with a negative end index.",
        "input": {
          "input": ["apple", "banana", "cherry", "date"],
          "start": 0,
          "end": -1
        },
        "expected": ["apple", "banana", "cherry"]
      },
      "amorlincFromIndex": {
        "description": "Slice a list starting from a specific index.",
        "input": {
          "input": ["apple", "banana", "cherry", "date"],
          "start": 2
        },
        "expected": ["cherry", "date"]
      }
    },
    "examples": [
      {
        "description": "Slice a list with both positive start and end indices.",
        "input": {
          "input": ["red", "green", "blue", "yellow", "purple"],
          "start": 1,
          "end": 3
        },
        "expected": ["green", "blue"]
      },
      {
        "description": "Slice a list with only the start index provided.",
        "input": {
          "input": ["dog", "cat", "fish", "bird"],
          "start": 1
        },
        "expected": ["cat", "fish", "bird"]
      },
      {
        "description": "Slice a list with a negative start index.",
        "input": {
          "input": ["Monday", "Tuesday", "Wednesday", "Thursday"],
          "start": -2
        },
        "expected": ["Wednesday", "Thursday"]
      }
    ]
  },
  {
    "define": "_functions.String.AppendUrlParameters",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Appends URL parameters to a given URL.",
    "parameters": {
      "url": {
        "type": "_types.String",
        "description": "The base URL."
      },
      "params": {
        "type": "_types.Dictionary",
        "description": "A dictionary of key-value pairs representing the URL parameters."
      }
    },
    "implementation": {
      "javascript": {
        "code": "let newUrl = $$args.url;\nfor (const [key, value] of Object.entries($$args.params)) {\n  newUrl += `&${key}=${value}`;\n}\nreturn newUrl;\n"
      }
    },
    "returns": {
      "type": "_types.String",
      "description": "The URL with appended parameters."
    },
    "tests": {
      "appendUrlParametersSimple": {
        "description": "Append simple parameters.",
        "input": {
          "url": "https://example.com",
          "params": {
            "foo": "bar",
            "baz": "qux"
          }
        },
        "expected": "https://example.com&foo=bar&baz=qux"
      },
      "appendUrlParametersMultipleValues": {
        "description": "Append multiple values for the same key.",
        "input": {
          "url": "https://example.com",
          "params": {
            "foo": ["bar", "baz"]
          }
        },
        "expected": "https://example.com&foo=bar,baz"
      }
    },
    "examples": [
      {
        "description": "Append a parameter with a numeric value.",
        "input": {
          "url": "https://example.com",
          "params": {
            "id": 123
          }
        },
        "expected": "https://example.com&id=123"
      },
      {
        "description": "Append a parameter with a boolean value.",
        "input": {
          "url": "https://example.com",
          "params": {
            "active": true
          }
        },
        "expected": "https://example.com&active=true"
      },
      {
        "description": "Append parameters with special characters.",
        "input": {
          "url": "https://example.com",
          "params": {
            "search query": "hello world",
            "user name": "John Doe"
          }
        },
        "expected": "https://example.com&search%20query=hello%20world&user%20name=John%20Doe"
      }
    ]
  },
  {
    "define": "_functions.Math.Asin",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Calculates the arcsine (inverse sine) of a number.",
    "parameters": {
      "number": {
        "type": "_types.Number",
        "description": "The number to calculate the arcsine of."
      }
    },
    "implementation": {
      "javascript": {
        "code": "return Math.asin($$args.number);\n"
      }
    },
    "returns": {
      "type": "_types.Number",
      "description": "The arcsine of the number in radians."
    },
    "tests": {
      "asinZero": {
        "description": "Calculate the arcsine of 0.",
        "input": {
          "number": 0
        },
        "expected": 0
      },
      "asinOne": {
        "description": "Calculate the arcsine of 1.",
        "input": {
          "number": 1
        },
        "expected": 1.5707963267948966
      },
      "asinMinusOne": {
        "description": "Calculate the arcsine of -1.",
        "input": {
          "number": -1
        },
        "expected": -1.5707963267948966
      }
    },
    "examples": [
      {
        "description": "Calculate the arcsine of 0.5.",
        "input": {
          "number": 0.5
        },
        "expected": 0.5235987755982989
      },
      {
        "description": "Calculate the arcsine of -0.5.",
        "input": {
          "number": -0.5
        },
        "expected": -0.5235987755982989
      },
      {
        "description": "Calculate the arcsine of approximately zero.",
        "input": {
          "number": 1e-10
        },
        "expected": 1e-10
      }
    ]
  },
  {
    "define": "_functions.Math.Atan",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Calculates the arctangent (inverse tangent) of a number.",
    "parameters": {
      "number": {
        "type": "_types.Number",
        "description": "The number to calculate the arctangent of."
      }
    },
    "implementation": {
      "javascript": {
        "code": "return Math.atan($$args.number);\n"
      }
    },
    "returns": {
      "type": "_types.Number",
      "description": "The arctangent of the number in radians."
    },
    "tests": {
      "atanZero": {
        "description": "Calculate the arctangent of 0.",
        "input": {
          "number": 0
        },
        "expected": 0
      },
      "atanOne": {
        "description": "Calculate the arctangent of 1.",
        "input": {
          "number": 1
        },
        "expected": 0.7853981633974483
      },
      "atanMinusOne": {
        "description": "Calculate the arctangent of -1.",
        "input": {
          "number": -1
        },
        "expected": -0.7853981633974483
      }
    },
    "examples": [
      {
        "description": "Calculate the arctangent of 0.5.",
        "input": {
          "number": 0.5
        },
        "expected": 0.4636476090008061
      },
      {
        "description": "Calculate the arctangent of 10.",
        "input": {
          "number": 10
        },
        "expected": 1.4711276743037347
      },
      {
        "description": "Calculate the arctangent of a negative number.",
        "input": {
          "number": -0.5
        },
        "expected": -0.4636476090008061
      }
    ]
  },
  {
    "define": "_functions.Math.Average",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Calculates the average of a list of numbers.",
    "parameters": {
      "numbers": {
        "type": "_types.List",
        "description": "The list of numbers to average.",
        "items": {
          "type": "_types.Number"
        }
      }
    },
    "implementation": {
      "javascript": {
        "code": "const sum = $$args.numbers.reduce((sum, curr) => sum + curr, 0);\nreturn sum / $$args.numbers.length;\n"
      }
    },
    "returns": {
      "type": "_types.Number",
      "description": "The average of the numbers."
    },
    "tests": {
      "averageTwo": {
        "description": "Calculate the average of two numbers.",
        "input": {
          "numbers": [4, 8]
        },
        "expected": 6
      },
      "averageThree": {
        "description": "Calculate the average of three numbers.",
        "input": {
          "numbers": [10, 20, 30]
        },
        "expected": 20
      }
    },
    "examples": [
      {
        "description": "Calculate the average of a list with negative numbers.",
        "input": {
          "numbers": [-3, -6, -9]
        },
        "expected": -6
      },
      {
        "description": "Calculate the average of a list with zeros.",
        "input": {
          "numbers": [0, 0, 0]
        },
        "expected": 0
      },
      {
        "description": "Calculate the average of a list with mixed positive and negative numbers.",
        "input": {
          "numbers": [5, -5, 10, -10]
        },
        "expected": 0
      }
    ]
  },
  {
    "define": "_functions.Math.BesselI",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Evaluates the Bessel function of the first kind (Iv(x)).",
    "parameters": {
      "v": {
        "type": "_types.Number",
        "description": "The order of the Bessel function."
      },
      "x": {
        "type": "_types.Number",
        "description": "The input value to evaluate the Bessel function for."
      }
    },
    "implementation": {
      "javascript": {
        "code": "function besselI(v, x) {\n  if (v === 0) {\n    let sum = 1;\n    let term = 1;\n    for (let k = 1; k < 100; k++) {\n      term *= (x / 2) * (x / 2) / (k * k);\n      sum += term;\n      if (term < 1e-15) break;\n    }\n    return sum;\n  } else {\n    throw new Error(\"This implementation only supports the Bessel function of order 0.\");\n  }\n}\nreturn besselI($$args.v, $$args.x);\n"
      }
    },
    "returns": {
      "type": "_types.Number",
      "description": "The result of evaluating the Bessel function."
    },
    "tests": {
      "besselIZeroOrder": {
        "description": "Calculate the Bessel function of the first kind for order 0.",
        "input": {
          "v": 0,
          "x": 1.2
        },
        "expected": 1.393725584134064
      },
      "besselICalculation": {
        "description": "Calculate the Bessel function of the first kind for a given order and value.",
        "input": {
          "v": 0,
          "x": 2.5
        },
        "expected": 3.289839144050123
      }
    },
    "examples": [
      {
        "description": "Evaluate the Bessel function of the first kind for order 0 with x = 0.5.",
        "input": {
          "v": 0,
          "x": 0.5
        },
        "expected": 1.0634833707413234
      },
      {
        "description": "Evaluate the Bessel function of the first kind for order 0 with x = 3.0.",
        "input": {
          "v": 0,
          "x": 3
        },
        "expected": 7.509872467716725
      },
      {
        "description": "Evaluate the Bessel function of the first kind for order 0 with x = 4.0.",
        "input": {
          "v": 0,
          "x": 4
        },
        "expected": 18.7259149672842
      }
    ]
  },
  {
    "define": "_functions.Number.Binomdist",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Returns the binomial probability mass function.",
    "parameters": {
      "x": {
        "type": "_types.Number",
        "description": "The number of successes in trials."
      },
      "n": {
        "type": "_types.Number",
        "description": "The number of trials."
      },
      "p": {
        "type": "_types.Number",
        "description": "The probability of success on each trial."
      }
    },
    "implementation": {
      "javascript": {
        "code": "const binomdist = (x, n, p) => {\n  const binomialCoefficient = (n, k) => {\n    const fact = (num) => (num <= 1 ? 1 : num * fact(num - 1));\n    return fact(n) / (fact(k) * fact(n - k));\n  };\n  return binomialCoefficient(n, x) * Math.pow(p, x) * Math.pow(1 - p, n - x);\n};\nreturn binomdist($$args.x, $$args.n, $$args.p);\n"
      }
    },
    "returns": {
      "type": "_types.Number",
      "description": "The binomial probability mass function."
    },
    "tests": {
      "binomdistZeroSuccess": {
        "description": "Calculate the binomial probability mass function with 0 successes.",
        "input": {
          "x": 0,
          "n": 5,
          "p": 0.3
        },
        "expected": 0.16806999999999994
      },
      "binomdistSomeSuccess": {
        "description": "Calculate the binomial probability mass function with some successes.",
        "input": {
          "x": 3,
          "n": 5,
          "p": 0.3
        },
        "expected": 0.1323
      },
      "binomdistHalfSuccess": {
        "description": "Calculate the binomial probability mass function with half successes.",
        "input": {
          "x": 2,
          "n": 4,
          "p": 0.5
        },
        "expected": 0.375
      }
    },
    "examples": [
      {
        "description": "Calculate the binomial probability mass function with all successes.",
        "input": {
          "x": 5,
          "n": 5,
          "p": 0.9
        },
        "expected": 0.59049
      },
      {
        "description": "Calculate the binomial probability mass function for a high probability.",
        "input": {
          "x": 7,
          "n": 10,
          "p": 0.8
        },
        "expected": 0.201326592
      },
      {
        "description": "Calculate the binomial probability mass function with 1 success out of 2 trials.",
        "input": {
          "x": 1,
          "n": 2,
          "p": 0.7
        },
        "expected": 0.42
      }
    ]
  },
  {
    "define": "_functions.Math.BitAnd",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Performs a bitwise AND operation on two numbers.",
    "parameters": {
      "left": {
        "type": "_types.Number",
        "description": "The first number to perform the bitwise AND operation on."
      },
      "right": {
        "type": "_types.Number",
        "description": "The second number to perform the bitwise AND operation on."
      }
    },
    "implementation": {
      "javascript": {
        "code": "return $$args.left & $$args.right;\n"
      }
    },
    "returns": {
      "type": "_types.Number",
      "description": "The result of the bitwise AND operation."
    },
    "tests": {
      "bitAndSameBits": {
        "description": "Test a bitwise AND operation where both numbers have the same bits.",
        "input": {
          "left": 3,
          "right": 3
        },
        "expected": 3
      },
      "bitAndDifferentBits": {
        "description": "Test a bitwise AND operation where the numbers have different bits.",
        "input": {
          "left": 5,
          "right": 2
        },
        "expected": 0
      }
    },
    "examples": [
      {
        "description": "Perform bitwise AND on a negative number and a positive number.",
        "input": {
          "left": -2,
          "right": 3
        },
        "expected": 2
      },
      {
        "description": "Perform bitwise AND on two different positive numbers.",
        "input": {
          "left": 12,
          "right": 5
        },
        "expected": 4
      },
      {
        "description": "Perform bitwise AND resulting in zero.",
        "input": {
          "left": 8,
          "right": 1
        },
        "expected": 0
      }
    ]
  },
  {
    "define": "_functions.Logical.BitNot",
    "blueprint": "_blueprint.Flowgraph",
    "description": "The Bit Not function performs a bitwise NOT operation on the given boolean value.",
    "parameters": {
      "input": {
        "type": "_types.Boolean",
        "description": "The boolean value to perform the bitwise NOT operation on."
      }
    },
    "implementation": {
      "javascript": {
        "code": "return !($$args.input);\n"
      }
    },
    "returns": {
      "type": "_types.Boolean",
      "description": "The result of performing a bitwise NOT operation on the given boolean value."
    },
    "tests": {
      "bitNotTrue": {
        "description": "Perform bitwise NOT on true.",
        "input": {
          "input": true
        },
        "expected": false
      },
      "bitNotFalse": {
        "description": "Perform bitwise NOT on false.",
        "input": {
          "input": false
        },
        "expected": true
      }
    },
    "examples": [
      {
        "description": "Perform bitwise NOT on a boolean value of true.",
        "input": {
          "input": true
        },
        "expected": false
      },
      {
        "description": "Perform bitwise NOT on a boolean value of false.",
        "input": {
          "input": false
        },
        "expected": true
      },
      {
        "description": "Perform bitwise NOT on a variable containing true.",
        "input": {
          "input": true
        },
        "expected": false
      }
    ]
  },
  {
    "define": "_functions.Math.Or",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Performs a bitwise OR operation on the given numbers.",
    "parameters": {
      "left": {
        "type": "_types.Number",
        "description": "The first number to perform the OR operation on."
      },
      "right": {
        "type": "_types.Number",
        "description": "The second number to perform the OR operation on."
      }
    },
    "implementation": {
      "javascript": {
        "code": "return $$args.left | $$args.right;\n"
      }
    },
    "returns": {
      "type": "_types.Number",
      "description": "The result of the bitwise OR operation."
    },
    "tests": {
      "bitOr0And0": {
        "description": "Perform a bitwise OR operation with both operands being 0.",
        "input": {
          "left": 0,
          "right": 0
        },
        "expected": 0
      },
      "bitOr1And1": {
        "description": "Perform a bitwise OR operation with both operands being 1.",
        "input": {
          "left": 1,
          "right": 1
        },
        "expected": 1
      },
      "bitOr0And1": {
        "description": "Perform a bitwise OR operation with one operand being 0 and the other being 1.",
        "input": {
          "left": 0,
          "right": 1
        },
        "expected": 1
      }
    },
    "examples": [
      {
        "description": "Perform a bitwise OR operation with left operand as 5 and right operand as 3.",
        "input": {
          "left": 5,
          "right": 3
        },
        "expected": 7
      },
      {
        "description": "Perform a bitwise OR operation with left operand as 8 and right operand as 2.",
        "input": {
          "left": 8,
          "right": 2
        },
        "expected": 10
      },
      {
        "description": "Perform a bitwise OR operation with left operand as 15 and right operand as 1.",
        "input": {
          "left": 15,
          "right": 1
        },
        "expected": 15
      }
    ]
  },
  {
    "define": "_functions.Math.BitShiftLeft",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Shifts the bits of a number to the left.",
    "parameters": {
      "value": {
        "type": "_types.Number",
        "description": "The value to shift."
      },
      "count": {
        "type": "_types.Number",
        "description": "The number of positions to shift."
      }
    },
    "implementation": {
      "javascript": {
        "code": "return $$args.value << $$args.count;\n"
      }
    },
    "returns": {
      "type": "_types.Number",
      "description": "The result of the bit shift operation."
    },
    "tests": {
      "bitShiftLeftOnePosition": {
        "description": "Shift a value one position to the left.",
        "input": {
          "value": 8,
          "count": 1
        },
        "expected": 16
      },
      "bitShiftLeftMultiplePositions": {
        "description": "Shift a value multiple positions to the left.",
        "input": {
          "value": 8,
          "count": 3
        },
        "expected": 64
      }
    },
    "examples": [
      {
        "description": "Shift a value two positions to the left.",
        "input": {
          "value": 5,
          "count": 2
        },
        "expected": 20
      },
      {
        "description": "Shift a large value one position to the left.",
        "input": {
          "value": 1024,
          "count": 1
        },
        "expected": 2048
      },
      {
        "description": "Shift the value zero multiple positions to the left.",
        "input": {
          "value": 0,
          "count": 4
        },
        "expected": 0
      }
    ]
  },
  {
    "define": "_functions.Math.BitShiftRight",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Shifts the bits of a number to the right.",
    "parameters": {
      "value": {
        "type": "_types.Number",
        "description": "The number to shift."
      },
      "bits": {
        "type": "_types.Number",
        "description": "The number of bits to shift."
      }
    },
    "implementation": {
      "javascript": {
        "code": "return $$args.value >> $$args.bits;\n"
      }
    },
    "returns": {
      "type": "_types.Number",
      "description": "The result of the bit shift operation."
    },
    "tests": {
      "bitShiftRightSimple": {
        "description": "Shift a simple value.",
        "input": {
          "value": 8,
          "bits": 2
        },
        "expected": 2
      },
      "bitShiftRightMultipleBits": {
        "description": "Shift multiple bits.",
        "input": {
          "value": 16,
          "bits": 4
        },
        "expected": 1
      }
    },
    "examples": [
      {
        "description": "Shift the bits of a large number.",
        "input": {
          "value": 1024,
          "bits": 5
        },
        "expected": 32
      },
      {
        "description": "Shift the bits of a negative number.",
        "input": {
          "value": -128,
          "bits": 3
        },
        "expected": -16
      },
      {
        "description": "Shift the bits of a number with zero bits.",
        "input": {
          "value": 64,
          "bits": 0
        },
        "expected": 64
      }
    ]
  },
  {
    "define": "_functions.Math.BitXor",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Performs a bitwise XOR operation on the input values.",
    "parameters": {
      "first": {
        "type": "_types.Any",
        "description": "The first value to perform the XOR operation on."
      },
      "second": {
        "type": "_types.Any",
        "description": "The second value to perform the XOR operation on."
      }
    },
    "implementation": {
      "javascript": {
        "code": "return !!($$args.first ^ $$args.second);\n"
      }
    },
    "returns": {
      "type": "_types.Boolean",
      "description": "The result of the bitwise XOR operation."
    },
    "tests": {
      "bitXorTrueTrue": {
        "description": "Perform a bitwise XOR operation with both inputs as true.",
        "input": {
          "first": true,
          "second": true
        },
        "expected": false
      },
      "bitXorFalseFalse": {
        "description": "Perform a bitwise XOR operation with both inputs as false.",
        "input": {
          "first": false,
          "second": false
        },
        "expected": false
      },
      "bitXorTrueFalse": {
        "description": "Perform a bitwise XOR operation with the first input as true and the second as false.",
        "input": {
          "first": true,
          "second": false
        },
        "expected": true
      },
      "bitXorFalseTrue": {
        "description": "Perform a bitwise XOR operation with the first input as false and the second as true.",
        "input": {
          "first": false,
          "second": true
        },
        "expected": true
      }
    },
    "examples": [
      {
        "description": "Perform a bitwise XOR with the first input as 1 and the second as 0.",
        "input": {
          "first": 1,
          "second": 0
        },
        "expected": true
      },
      {
        "description": "Perform a bitwise XOR with the first input as 0 and the second as 1.",
        "input": {
          "first": 0,
          "second": 1
        },
        "expected": true
      },
      {
        "description": "Perform a bitwise XOR with the first input as 1 and the second as 1.",
        "input": {
          "first": 1,
          "second": 1
        },
        "expected": false
      }
    ]
  },
  {
    "define": "_functions.Logical.And",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Returns the logical AND of two boolean values.",
    "parameters": {
      "a": {
        "type": "_types.Boolean",
        "description": "The first boolean value."
      },
      "b": {
        "type": "_types.Boolean",
        "description": "The second boolean value."
      }
    },
    "implementation": {
      "javascript": {
        "code": "return $$args.a && $$args.b;\n"
      }
    },
    "returns": {
      "type": "_types.Boolean",
      "description": "The result of the logical AND operation."
    },
    "tests": {
      "andTrueTrue": {
        "description": "Both input values are true.",
        "input": {
          "a": true,
          "b": true
        },
        "expected": true
      },
      "andFalseTrue": {
        "description": "First input value is false, second is true.",
        "input": {
          "a": false,
          "b": true
        },
        "expected": false
      },
      "andTrueFalse": {
        "description": "First input value is true, second is false.",
        "input": {
          "a": true,
          "b": false
        },
        "expected": false
      }
    },
    "examples": [
      {
        "description": "Both values are false.",
        "input": {
          "a": false,
          "b": false
        },
        "expected": false
      },
      {
        "description": "Using true and false values.",
        "input": {
          "a": true,
          "b": false
        },
        "expected": false
      },
      {
        "description": "One true and one false value.",
        "input": {
          "a": false,
          "b": true
        },
        "expected": false
      }
    ]
  },
  {
    "define": "_functions.Dictionary.BuildObject",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Builds a new dictionary with the given keys and values.",
    "parameters": {
      "data": {
        "type": "_types.Dictionary",
        "description": "The dictionary to build from."
      },
      "keys": {
        "type": "_types.List",
        "description": "The list of keys to select from the input dictionary."
      },
      "values": {
        "type": "_types.List",
        "description": "The list of values corresponding to the keys."
      }
    },
    "implementation": {
      "javascript": {
        "code": "const obj = {};\n$$args.keys.forEach((key, index) => {\n  obj[key] = $$args.values[index];\n});\nreturn obj;\n"
      }
    },
    "returns": {
      "type": "_types.Dictionary",
      "description": "The new dictionary with the given keys and values."
    },
    "tests": {
      "buildObjectSimple": {
        "description": "Build a simple object from a list of keys and values.",
        "input": {
          "data": {
            "a": 1,
            "b": 2,
            "c": 3
          },
          "keys": ["a", "c"],
          "values": [4, 5]
        },
        "expected": {
          "a": 4,
          "c": 5
        }
      },
      "buildObjectMultipleKeys": {
        "description": "Build an object with multiple keys from a list of keys and values.",
        "input": {
          "data": {
            "a": 1,
            "b": 2,
            "c": 3,
            "d": 4,
            "e": 5
          },
          "keys": ["a", "c", "e"],
          "values": [6, 7, 8]
        },
        "expected": {
          "a": 6,
          "c": 7,
          "e": 8
        }
      }
    },
    "examples": [
      {
        "description": "Build an object by overriding existing dictionary keys.",
        "input": {
          "data": {
            "foo": "bar",
            "baz": "qux"
          },
          "keys": ["foo"],
          "values": ["newBar"]
        },
        "expected": {
          "foo": "newBar"
        }
      },
      {
        "description": "Build an object with a mix of new and existing keys.",
        "input": {
          "data": {
            "x": 1,
            "y": 2,
            "z": 3
          },
          "keys": ["w", "x", "y"],
          "values": [10, 20, 30]
        },
        "expected": {
          "w": 10,
          "x": 20,
          "y": 30
        }
      },
      {
        "description": "Build an object using numeric keys.",
        "input": {
          "data": {
            "1": "one",
            "2": "two"
          },
          "keys": ["1", "3"],
          "values": ["uno", "tres"]
        },
        "expected": {
          "1": "uno",
          "3": "tres"
        }
      }
    ]
  },
  {
    "define": "_functions.String.CamelCase",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Converts a string to camelCase.",
    "parameters": {
      "string": {
        "type": "_types.String",
        "description": "The string to convert to camelCase."
      }
    },
    "implementation": {
      "javascript": {
        "code": "return $$args.string\n  .toLowerCase()\n  .replace(/[^a-zA-Z0-9]+(.)/g, (match, chr) => chr.toUpperCase());\n"
      }
    },
    "returns": {
      "type": "_types.String",
      "description": "The camelCased string."
    },
    "tests": {
      "camelCaseSingleWord": {
        "description": "Convert a single word to camelCase.",
        "input": {
          "string": "hello"
        },
        "expected": "hello"
      },
      "camelCaseMultipleWords": {
        "description": "Convert multiple words to camelCase.",
        "input": {
          "string": "hello world"
        },
        "expected": "helloWorld"
      },
      "camelCaseWithUnderscores": {
        "description": "Convert a string with underscores to camelCase.",
        "input": {
          "string": "hello_world_test"
        },
        "expected": "helloWorldTest"
      }
    },
    "examples": [
      {
        "description": "Convert a hyphenated string to camelCase.",
        "input": {
          "string": "find-more-items"
        },
        "expected": "findMoreItems"
      },
      {
        "description": "Convert a string with multiple spaces to camelCase.",
        "input": {
          "string": "this    is     spaced"
        },
        "expected": "thisIsSpaced"
      },
      {
        "description": "Convert a string with mixed delimiters to camelCase.",
        "input": {
          "string": "mix_of-different.delimiters"
        },
        "expected": "mixOfDifferentDelimiters"
      }
    ]
  },
  {
    "define": "_functions.String.Capitalize",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Capitalizes the first letter of each word in a string.",
    "parameters": {
      "string": {
        "type": "_types.String",
        "description": "The string to capitalize."
      }
    },
    "implementation": {
      "javascript": {
        "code": "return $$args.string.replace(/\\b\\w/g, char => char.toUpperCase());\n"
      }
    },
    "returns": {
      "type": "_types.String",
      "description": "The capitalized string."
    },
    "tests": {
      "capitalizeSingleWord": {
        "description": "Capitalize a single word.",
        "input": {
          "string": "hello"
        },
        "expected": "Hello"
      },
      "capitalizeMultipleWords": {
        "description": "Capitalize multiple words.",
        "input": {
          "string": "hello world"
        },
        "expected": "Hello World"
      },
      "capitalizeMixedCase": {
        "description": "Capitalize words in a mixed case string.",
        "input": {
          "string": "hElLo WoRlD"
        },
        "expected": "HElLo WoRlD"
      }
    },
    "examples": [
      {
        "description": "Capitalize words in a sentence with punctuation.",
        "input": {
          "string": "hello, world!"
        },
        "expected": "Hello, World!"
      },
      {
        "description": "Capitalize words in a string with leading spaces.",
        "input": {
          "string": "   leading spaces"
        },
        "expected": "   Leading Spaces"
      },
      {
        "description": "Capitalize an already capitalized string.",
        "input": {
          "string": "Already Capitalized"
        },
        "expected": "Already Capitalized"
      }
    ]
  },
  {
    "define": "_functions.Math.Ceil",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Rounds a number up to the nearest integer.",
    "parameters": {
      "value": {
        "type": "_types.Number",
        "description": "The number to ceil."
      }
    },
    "implementation": {
      "javascript": {
        "code": "return Math.ceil($$args.value);\n"
      }
    },
    "returns": {
      "type": "_types.Number",
      "description": "The ceiling of the input value."
    },
    "tests": {
      "ceilZero": {
        "description": "Ceil the number 0.",
        "input": {
          "value": 0
        },
        "expected": 0
      },
      "ceilOnePointFive": {
        "description": "Ceil the number 1.5.",
        "input": {
          "value": 1.5
        },
        "expected": 2
      },
      "ceilNegativeTwo": {
        "description": "Ceil the negative number -2.4.",
        "input": {
          "value": -2.4
        },
        "expected": -2
      }
    },
    "examples": [
      {
        "description": "Ceil a positive decimal number.",
        "input": {
          "value": 3.7
        },
        "expected": 4
      },
      {
        "description": "Ceil a positive integer.",
        "input": {
          "value": 5
        },
        "expected": 5
      },
      {
        "description": "Ceil a negative decimal number close to zero.",
        "input": {
          "value": -0.6
        },
        "expected": 0
      }
    ]
  },
  {
    "define": "_functions.Number.ChiTest",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Calculates the Chi-Square statistic for a given contingency table.",
    "parameters": {
      "observed": {
        "type": "_types.List",
        "description": "The observed frequencies in a 2-dimensional contingency table."
      },
      "expected": {
        "type": "_types.List",
        "description": "The expected frequencies in a 2-dimensional contingency table."
      }
    },
    "implementation": {
      "javascript": {
        "code": "const observed = $$args.observed.flat();\nconst expected = $$args.expected.flat();\nlet chiSquare = 0;\n\nfor(let i = 0; i < observed.length; i++) {\n  chiSquare += Math.pow((observed[i] - expected[i]), 2) / expected[i];\n}\n\nreturn chiSquare;\n"
      }
    },
    "returns": {
      "type": "_types.Number",
      "description": "The calculated Chi-Square statistic."
    },
    "tests": {
      "chiSquareEqual": {
        "description": "Calculate Chi-Square with equal expected and observed frequencies.",
        "input": {
          "observed": [
            [5, 5],
            [5, 5]
          ],
          "expected": [
            [5, 5],
            [5, 5]
          ]
        },
        "expected": 0
      },
      "chiSquareUnequal": {
        "description": "Calculate Chi-Square with unequal expected and observed frequencies.",
        "input": {
          "observed": [
            [25, 15],
            [20, 10]
          ],
          "expected": [
            [20, 20],
            [20, 10]
          ]
        },
        "expected": 2.5
      },
      "chiSquareEmpty": {
        "description": "Calculate Chi-Square with empty table.",
        "input": {
          "observed": [[], []],
          "expected": [[], []]
        },
        "expected": 0
      }
    },
    "examples": [
      {
        "description": "Calculate Chi-Square for a 2x2 table with higher observed values.",
        "input": {
          "observed": [
            [30, 20],
            [10, 40]
          ],
          "expected": [
            [20, 30],
            [30, 20]
          ]
        },
        "expected": 41.666666666666664
      },
      {
        "description": "Calculate Chi-Square for a 2x2 table with lower observed values.",
        "input": {
          "observed": [
            [5, 10],
            [15, 20]
          ],
          "expected": [
            [10, 10],
            [10, 20]
          ]
        },
        "expected": 2.5
      },
      {
        "description": "Calculate Chi-Square for a non-square table.",
        "input": {
          "observed": [
            [3, 6, 9],
            [4, 8, 12]
          ],
          "expected": [
            [5, 5, 5],
            [5, 10, 15]
          ]
        },
        "expected": 3.7333333333333334
      }
    ]
  },
  {
    "define": "_functions.Math.Chunk",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Splits a list into chunks of a specified size.",
    "parameters": {
      "list": {
        "type": "_types.List",
        "description": "The list to split into chunks.",
        "items": {
          "type": "_types.Unknown"
        }
      },
      "size": {
        "type": "_types.Number",
        "description": "The size of each chunk."
      }
    },
    "implementation": {
      "javascript": {
        "code": "if ($$args.size <= 0) {\n  throw new Error('Chunk size must be greater than 0');\n}\nconst result = [];\nfor (let i = 0; i < $$args.list.length; i += $$args.size) {\n  result.push($$args.list.slice(i, i + $$args.size));\n}\nreturn result;\n"
      }
    },
    "returns": {
      "type": "_types.List",
      "description": "The list of chunks.",
      "items": {
        "type": "_types.List",
        "items": {
          "type": "_types.Unknown"
        }
      }
    },
    "tests": {
      "chunkEqualSize": {
        "description": "Split a list into chunks of equal size.",
        "input": {
          "list": [1, 2, 3, 4, 5, 6],
          "size": 2
        },
        "expected": [
          [1, 2],
          [3, 4],
          [5, 6]
        ]
      },
      "chunkUnequalSize": {
        "description": "Split a list into chunks where the last chunk is smaller.",
        "input": {
          "list": [1, 2, 3, 4, 5],
          "size": 2
        },
        "expected": [[1, 2], [3, 4], [5]]
      },
      "chunkSizeOne": {
        "description": "Split a list into chunks of size one.",
        "input": {
          "list": [1, 2, 3],
          "size": 1
        },
        "expected": [[1], [2], [3]]
      },
      "chunkSizeGreaterThanList": {
        "description": "Split a list into chunks where the size is greater than the list length.",
        "input": {
          "list": [1, 2, 3],
          "size": 5
        },
        "expected": [[1, 2, 3]]
      }
    },
    "examples": [
      {
        "description": "Split a list of strings into chunks.",
        "input": {
          "list": ["apple", "banana", "cherry", "date"],
          "size": 2
        },
        "expected": [
          ["apple", "banana"],
          ["cherry", "date"]
        ]
      },
      {
        "description": "Split a list of mixed data types into chunks.",
        "input": {
          "list": [1, "two", 3, "four", true, null],
          "size": 3
        },
        "expected": [
          [1, "two", 3],
          ["four", true, null]
        ]
      },
      {
        "description": "Split a list into chunks with size greater than one but less than total length.",
        "input": {
          "list": [1, 2, 3, 4, 5, 6, 7],
          "size": 3
        },
        "expected": [[1, 2, 3], [4, 5, 6], [7]]
      }
    ]
  },
  {
    "define": "_functions.Math.Compare",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Compare two numbers and return 1 if the first is greater, -1 if the second is greater, and 0 if they are equal.",
    "parameters": {
      "a": {
        "type": "_types.Number",
        "description": "The first number to compare."
      },
      "b": {
        "type": "_types.Number",
        "description": "The number to compare to."
      }
    },
    "implementation": {
      "javascript": {
        "code": "if ($$args.a > $$args.b) {\n  return 1;\n} else if ($$args.a < $$args.b) {\n  return -1;\n} else {\n  return 0;\n}\n"
      }
    },
    "returns": {
      "type": "_types.Number",
      "description": "Returns 1 if a is greater than b, -1 if a is less than b, and 0 if they are equal."
    },
    "tests": {
      "compareTwo": {
        "description": "Compare two numbers.",
        "input": {
          "a": 1,
          "b": 2
        },
        "expected": -1
      }
    },
    "examples": [
      {
        "description": "Compare when both numbers are equal.",
        "input": {
          "a": 5,
          "b": 5
        },
        "expected": 0
      },
      {
        "description": "Compare when the first number is negative.",
        "input": {
          "a": -1,
          "b": 2
        },
        "expected": -1
      },
      {
        "description": "Compare when the second number is negative.",
        "input": {
          "a": 3,
          "b": -3
        },
        "expected": 1
      }
    ]
  },
  {
    "define": "_functions.String.Concatenate",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Concatenates an array of strings with a specified join string",
    "parameters": {
      "strings": {
        "type": "_types.List",
        "description": "The strings to concatenate"
      },
      "delimiter": {
        "type": "_types.String",
        "description": "The string to join the strings with"
      }
    },
    "implementation": {
      "javascript": {
        "code": "return $$args.strings.join($$args.delimiter);\n"
      }
    },
    "returns": {
      "type": "_types.String",
      "description": "The concatenated string"
    },
    "tests": {
      "twoStrings": {
        "description": "Test with two strings",
        "input": {
          "strings": ["Hello", "World"],
          "delimiter": " "
        },
        "expected": "Hello World"
      },
      "customDelimiter": {
        "description": "Test with a custom delimiter",
        "input": {
          "strings": ["Hello", "World"],
          "delimiter": "-"
        },
        "expected": "Hello-World"
      }
    },
    "examples": [
      {
        "description": "Concatenate multiple words with a space",
        "input": {
          "strings": ["I", "love", "programming"],
          "delimiter": " "
        },
        "expected": "I love programming"
      },
      {
        "description": "Concatenate words with a comma",
        "input": {
          "strings": ["one", "two", "three"],
          "delimiter": ", "
        },
        "expected": "one, two, three"
      },
      {
        "description": "Concatenate words with no delimiter",
        "input": {
          "strings": ["abc", 123, "xyz"],
          "delimiter": ""
        },
        "expected": "abc123xyz"
      }
    ]
  },
  {
    "define": "_functions.Number.Confidence",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Calculates the confidence level given a score and standard deviation.",
    "parameters": {
      "score": {
        "type": "_types.Number",
        "description": "The score for which to calculate the confidence level."
      },
      "standardDeviation": {
        "type": "_types.Number",
        "description": "The standard deviation associated with the score."
      }
    },
    "implementation": {
      "javascript": {
        "code": "const zScore = ($$args.score - 50) / $$args.standardDeviation;\nreturn Math.abs(zScore).toFixed(2);\n"
      }
    },
    "returns": {
      "type": "_types.Number",
      "description": "The confidence level calculated based on the score and standard deviation."
    },
    "tests": {
      "confidencePositive": {
        "description": "Calculate confidence level for a positive z-score.",
        "input": {
          "score": 70,
          "standardDeviation": 10
        },
        "expected": "2.00"
      },
      "confidenceNegative": {
        "description": "Calculate confidence level for a negative z-score.",
        "input": {
          "score": 30,
          "standardDeviation": 5
        },
        "expected": "4.00"
      },
      "confidenceZero": {
        "description": "Calculate confidence level for a zero z-score.",
        "input": {
          "score": 50,
          "standardDeviation": 20
        },
        "expected": "0.00"
      }
    },
    "examples": [
      {
        "description": "Calculate confidence level for a score much higher than the mean.",
        "input": {
          "score": 90,
          "standardDeviation": 10
        },
        "expected": "4.00"
      },
      {
        "description": "Calculate confidence level for a score close to the mean.",
        "input": {
          "score": 55,
          "standardDeviation": 10
        },
        "expected": "0.50"
      },
      {
        "description": "Calculate confidence level for a very high standard deviation.",
        "input": {
          "score": 50,
          "standardDeviation": 100
        },
        "expected": "0.00"
      }
    ]
  },
  {
    "define": "_functions.String.Contains",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Returns true if the given text contains the specified pattern, false otherwise.",
    "parameters": {
      "text": {
        "type": "_types.String",
        "description": "The text to search for the pattern."
      },
      "pattern": {
        "type": "_types.String",
        "description": "The pattern to search for in the text."
      }
    },
    "implementation": {
      "javascript": {
        "code": "return $$args.text.includes($$args.pattern);\n"
      }
    },
    "returns": {
      "type": "_types.Boolean",
      "description": "Whether the text contains the specified pattern."
    },
    "tests": {
      "containsTrue": {
        "description": "Text contains the pattern.",
        "input": {
          "text": "hello world",
          "pattern": "world"
        },
        "expected": true
      },
      "containsFalse": {
        "description": "Text does not contain the pattern.",
        "input": {
          "text": "hello world",
          "pattern": "universe"
        },
        "expected": false
      }
    },
    "examples": [
      {
        "description": "Text contains special characters.",
        "input": {
          "text": "This is a test. Does it contain a period?",
          "pattern": "."
        },
        "expected": true
      },
      {
        "description": "Pattern is a substring of a word in the text.",
        "input": {
          "text": "substring example",
          "pattern": "string"
        },
        "expected": true
      },
      {
        "description": "Pattern is an empty string.",
        "input": {
          "text": "Empty pattern test",
          "pattern": ""
        },
        "expected": true
      }
    ]
  },
  {
    "define": "_functions.Math.Cos",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Calculates the cosine of an angle (in radians).",
    "parameters": {
      "angle": {
        "type": "_types.Number",
        "description": "The angle in radians to calculate the cosine of."
      }
    },
    "implementation": {
      "javascript": {
        "code": "return Math.cos($$args.angle);\n"
      }
    },
    "returns": {
      "type": "_types.Number",
      "description": "The cosine of the angle."
    },
    "tests": {
      "cosZero": {
        "description": "Calculate the cosine of 0 radians.",
        "input": {
          "angle": 0
        },
        "expected": 1
      },
      "cosPiOverTwo": {
        "description": "Calculate the cosine of Ï€/2 radians.",
        "input": {
          "angle": 1.5707963267948966
        },
        "expected": 6.123233995736766e-17
      },
      "cosPi": {
        "description": "Calculate the cosine of Ï€ radians.",
        "input": {
          "angle": 3.141592653589793
        },
        "expected": -1
      }
    },
    "examples": [
      {
        "description": "Calculate the cosine of Ï€/4 radians.",
        "input": {
          "angle": 0.7853981633974483
        },
        "expected": 0.7071067811865476
      },
      {
        "description": "Calculate the cosine of 2Ï€ radians.",
        "input": {
          "angle": 6.283185307179586
        },
        "expected": 1
      },
      {
        "description": "Calculate the cosine of 3Ï€/2 radians.",
        "input": {
          "angle": 4.71238898038469
        },
        "expected": -1.8369701987210297e-16
      }
    ]
  },
  {
    "define": "_functions.Math.Cosec",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Calculates the cosecant of an angle (in radians).",
    "parameters": {
      "angle": {
        "type": "_types.Number",
        "description": "The angle in radians to calculate the cosecant of."
      }
    },
    "implementation": {
      "javascript": {
        "code": "function cosec(angle) {\n  const sinValue = Math.sin(angle);\n  if (sinValue === 0) {\n    throw new Error(\"Cosecant is undefined for angles where sine is zero.\");\n  }\n  return 1 / sinValue;\n}\nreturn cosec($$args.angle);\n"
      }
    },
    "returns": {
      "type": "_types.Number",
      "description": "The cosecant of the angle."
    },
    "tests": {
      "cosecPiOverTwo": {
        "description": "Calculate the cosecant of Ï€/2 radians.",
        "input": {
          "angle": 1.5707963267948966
        },
        "expected": 1
      },
      "cosecPi": {
        "description": "Calculate the cosecant of Ï€ radians.",
        "input": {
          "angle": 3.141592653589793
        },
        "expected": 8165619676597685
      },
      "cosecThreePiOverTwo": {
        "description": "Calculate the cosecant of 3Ï€/2 radians.",
        "input": {
          "angle": 4.71238898038469
        },
        "expected": -1
      }
    },
    "examples": [
      {
        "description": "Calculate the cosecant of Ï€/4 radians.",
        "input": {
          "angle": 0.7853981633974483
        },
        "expected": 1.414213562373095
      },
      {
        "description": "Calculate the cosecant of Ï€/6 radians.",
        "input": {
          "angle": 0.5235987755982988
        },
        "expected": 2
      },
      {
        "description": "Calculate the cosecant of Ï€/3 radians.",
        "input": {
          "angle": 1.0471975511965976
        },
        "expected": 1.1547005383792517
      }
    ]
  },
  {
    "define": "_functions.Math.Cosech",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Returns the hyperbolic cosecant of an angle (in radians).",
    "parameters": {
      "angle": {
        "type": "_types.Number",
        "description": "The angle in radians to calculate the hyperbolic cosecant of."
      }
    },
    "implementation": {
      "javascript": {
        "code": "function cosech(angle) {\n  const sinhValue = Math.sinh(angle);\n  if (sinhValue === 0) {\n    throw new Error(\"Cosech is undefined for angles where sinh is zero.\");\n  }\n  return 1 / sinhValue;\n}\nreturn cosech($$args.angle);\n"
      }
    },
    "returns": {
      "type": "_types.Number",
      "description": "The hyperbolic cosecant of the angle."
    },
    "tests": {
      "cosechOne": {
        "description": "Calculate the hyperbolic cosecant of 1 radian.",
        "input": {
          "angle": 1
        },
        "expected": 0.8509181282393216
      },
      "cosechNegativeOne": {
        "description": "Calculate the hyperbolic cosecant of -1 radian.",
        "input": {
          "angle": -1
        },
        "expected": -0.8509181282393216
      }
    },
    "examples": [
      {
        "description": "Calculate the hyperbolic cosecant of 2 radians.",
        "input": {
          "angle": 2
        },
        "expected": 0.2757205647717832
      },
      {
        "description": "Calculate the hyperbolic cosecant of 0.5 radians.",
        "input": {
          "angle": 0.5
        },
        "expected": 1.9190347513349437
      },
      {
        "description": "Calculate the hyperbolic cosecant of -0.5 radians.",
        "input": {
          "angle": -0.5
        },
        "expected": -1.9190347513349437
      }
    ]
  },
  {
    "define": "_functions.Math.Cosh",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Calculates the hyperbolic cosine of an angle (in radians).",
    "parameters": {
      "angle": {
        "type": "_types.Number",
        "description": "The angle in radians to calculate the hyperbolic cosine of."
      }
    },
    "implementation": {
      "javascript": {
        "code": "return Math.cosh($$args.angle);\n"
      }
    },
    "returns": {
      "type": "_types.Number",
      "description": "The hyperbolic cosine of the angle."
    },
    "tests": {
      "coshZero": {
        "description": "Calculate the hyperbolic cosine of 0 radians.",
        "input": {
          "angle": 0
        },
        "expected": 1
      },
      "coshPiOverTwo": {
        "description": "Calculate the hyperbolic cosine of Ï€/2 radians.",
        "input": {
          "angle": 1.5707963267948966
        },
        "expected": 2.5091784786580567
      },
      "coshPi": {
        "description": "Calculate the hyperbolic cosine of Ï€ radians.",
        "input": {
          "angle": 3.141592653589793
        },
        "expected": 11.591953275521519
      }
    },
    "examples": [
      {
        "description": "Calculate the hyperbolic cosine of 2 radians.",
        "input": {
          "angle": 2
        },
        "expected": 3.7621956910836314
      },
      {
        "description": "Calculate the hyperbolic cosine of -1 radians.",
        "input": {
          "angle": -1
        },
        "expected": 1.5430806348152437
      },
      {
        "description": "Calculate the hyperbolic cosine of 4 radians.",
        "input": {
          "angle": 4
        },
        "expected": 27.308232836016487
      }
    ]
  },
  {
    "define": "_functions.Math.Cot",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Calculates the cotangent of an angle (in radians).",
    "parameters": {
      "angle": {
        "type": "_types.Number",
        "description": "The angle in radians to calculate the cotangent of."
      }
    },
    "implementation": {
      "javascript": {
        "code": "function cot(angle) {\n  const tanValue = Math.tan(angle);\n  if (tanValue === 0) {\n    throw new Error(\"Cotangent is undefined for angles where tangent is zero.\");\n  }\n  return 1 / tanValue;\n}\nreturn cot($$args.angle);\n"
      }
    },
    "returns": {
      "type": "_types.Number",
      "description": "The cotangent of the angle."
    },
    "tests": {
      "cotPiOverFour": {
        "description": "Calculate the cotangent of Ï€/4 radians.",
        "input": {
          "angle": 0.7853981633974483
        },
        "expected": 1.0000000000000002
      },
      "cotThreePiOverFour": {
        "description": "Calculate the cotangent of 3Ï€/4 radians.",
        "input": {
          "angle": 2.356194490192345
        },
        "expected": -0.9999999999999998
      },
      "cotPi": {
        "description": "Calculate the cotangent of Ï€ radians.",
        "input": {
          "angle": 3.141592653589793
        },
        "expected": -8165619676597685
      }
    },
    "examples": [
      {
        "description": "Calculate the cotangent of 0.5 radians.",
        "input": {
          "angle": 0.5
        },
        "expected": 1.830487721712452
      },
      {
        "description": "Calculate the cotangent of 2 radians.",
        "input": {
          "angle": 2
        },
        "expected": -0.45765755436028577
      },
      {
        "description": "Calculate the cotangent of 5 radians.",
        "input": {
          "angle": 5
        },
        "expected": -5.671281819617707
      }
    ]
  },
  {
    "define": "_functions.Math.Coth",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Calculates the hyperbolic cotangent (coth) of an angle (in radians).",
    "parameters": {
      "angle": {
        "type": "_types.Number",
        "description": "The angle in radians to calculate the hyperbolic coth of."
      }
    },
    "implementation": {
      "javascript": {
        "code": "function coth(angle) {\n  const sinhValue = Math.sinh(angle);\n  if (sinhValue === 0) {\n    throw new Error(\"Hyperbolic cotangent is undefined for angles where sinh is zero.\");\n  }\n  return Math.cosh(angle) / sinhValue;\n}\nreturn coth($$args.angle);\n"
      }
    },
    "returns": {
      "type": "_types.Number",
      "description": "The hyperbolic coth of the angle."
    },
    "tests": {
      "cothOne": {
        "description": "Calculate the hyperbolic coth of 1 radian.",
        "input": {
          "angle": 1
        },
        "expected": 1.3130352854993312
      },
      "cothNegativeOne": {
        "description": "Calculate the hyperbolic coth of -1 radian.",
        "input": {
          "angle": -1
        },
        "expected": -1.3130352854993312
      }
    },
    "examples": [
      {
        "description": "Calculate the hyperbolic coth of 0.5 radians.",
        "input": {
          "angle": 0.5
        },
        "expected": 2.163953413738653
      },
      {
        "description": "Calculate the hyperbolic coth of -0.5 radians.",
        "input": {
          "angle": -0.5
        },
        "expected": -2.163953413738653
      },
      {
        "description": "Calculate the hyperbolic coth of 2 radians.",
        "input": {
          "angle": 2
        },
        "expected": 1.0373147207275482
      }
    ]
  },
  {
    "define": "_functions.Logical.Count",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Returns the count of elements in the given list.",
    "parameters": {
      "input": {
        "type": "_types.List",
        "description": "The list to count elements from."
      },
      "start": {
        "type": "_types.Number",
        "description": "Optional start index (0-based) for slicing. Default is 0."
      },
      "end": {
        "type": "_types.Number",
        "description": "Optional end index (0-based) for slicing. Negative index will be calculated from the end of the list."
      }
    },
    "implementation": {
      "javascript": {
        "code": "function countElements(input, start, end) {\n  if (start === undefined) start = 0;\n  if (end === undefined) end = input.length;\n  if (end < 0) end = input.length + end;\n  return input.slice(start, end).length;\n}\nreturn countElements($$args.input, $$args.start, $$args.end);\n"
      }
    },
    "returns": {
      "type": "_types.Number",
      "description": "The count of elements."
    },
    "tests": {
      "countSimple": {
        "description": "Count the number of items in a list.",
        "input": {
          "input": [1, 2, 3]
        },
        "expected": 3
      },
      "countSliceStart": {
        "description": "Count the number of items in a sliced list starting from index 0.",
        "input": {
          "input": [1, 2, 3],
          "end": 2
        },
        "expected": 2
      },
      "countSliceMiddle": {
        "description": "Count the number of items in a sliced list from index 1 to 2.",
        "input": {
          "input": [1, 2, 3],
          "start": 1,
          "end": 3
        },
        "expected": 2
      },
      "countSliceEndNegative": {
        "description": "Count the number of items in a sliced list with a negative end index.",
        "input": {
          "input": [1, 2, 3, 4],
          "start": 1,
          "end": -1
        },
        "expected": 2
      }
    },
    "examples": [
      {
        "description": "Count the number of items in a list with no slicing.",
        "input": {
          "input": [10, 20, 30, 40]
        },
        "expected": 4
      },
      {
        "description": "Count the number of items in a list starting from index 2.",
        "input": {
          "input": [5, 10, 15, 20],
          "start": 2
        },
        "expected": 2
      },
      {
        "description": "Count the number of items in a list with a negative start index.",
        "input": {
          "input": [9, 8, 7, 6, 5],
          "start": -2
        },
        "expected": 2
      }
    ]
  },
  {
    "define": "_functions.Number.Coupdays",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Calculates the number of days in a given period.",
    "parameters": {
      "settlement": {
        "type": "_types.Date",
        "description": "The settlement date of the period."
      },
      "maturity": {
        "type": "_types.Date",
        "description": "The maturity date of the period."
      },
      "frequency": {
        "type": "_types.Number",
        "description": "The number of coupon payments per year."
      },
      "basis": {
        "type": "_types.Number",
        "description": "The day count basis to use for calculations."
      }
    },
    "implementation": {
      "javascript": {
        "code": "const dayCountBasis = $$args.basis;\nconst startDate = new Date($$args.settlement);\nconst endDate = new Date($$args.maturity);\n\n// Calculating the day count based on the given basis\nlet daysInPeriod = (endDate - startDate) / (1000 * 60 * 60 * 24);\nif (dayCountBasis === 1) { // Actual/Actual\n    // Implement actual/actual logic\n} else if (dayCountBasis === 2) { // Actual/360\n    daysInPeriod = daysInPeriod;\n} else if (dayCountBasis === 3) { // Actual/365\n    // Implement actual/365 logic\n} else {\n    // Default to 30/360 basis\n    // Implement 30/360 logic\n}\nreturn daysInPeriod;\n"
      }
    },
    "returns": {
      "type": "_types.Number",
      "description": "The number of days in the given period."
    },
    "tests": {
      "coupdaysActualActual": {
        "description": "Calculate the number of days using Actual/Actual basis.",
        "input": {
          "settlement": "2022-01-01",
          "maturity": "2022-12-31",
          "frequency": 2,
          "basis": 1
        },
        "expected": 364
      },
      "coupdaysActual360": {
        "description": "Calculate the number of days using Actual/360 basis.",
        "input": {
          "settlement": "2022-01-01",
          "maturity": "2022-12-31",
          "frequency": 2,
          "basis": 2
        },
        "expected": 364
      },
      "coupdaysActual365": {
        "description": "Calculate the number of days using Actual/365 basis.",
        "input": {
          "settlement": "2022-01-01",
          "maturity": "2022-12-31",
          "frequency": 2,
          "basis": 3
        },
        "expected": 364
      },
      "coupdays30360": {
        "description": "Calculate the number of days using 30/360 basis.",
        "input": {
          "settlement": "2022-01-01",
          "maturity": "2022-12-31",
          "frequency": 2,
          "basis": 0
        },
        "expected": 364
      }
    },
    "examples": [
      {
        "description": "Calculate the number of days from a leap year to a non-leap year using Actual/360 basis.",
        "input": {
          "settlement": "2020-02-29",
          "maturity": "2021-02-28",
          "frequency": 1,
          "basis": 2
        },
        "expected": 359
      },
      {
        "description": "Calculate the number of days over multiple years using 30/360 basis.",
        "input": {
          "settlement": "2018-01-01",
          "maturity": "2020-12-31",
          "frequency": 2,
          "basis": 0
        },
        "expected": 1080
      },
      {
        "description": "Calculate the number of days for a short period using Actual/Actual basis.",
        "input": {
          "settlement": "2022-01-01",
          "maturity": "2022-03-01",
          "frequency": 4,
          "basis": 1
        },
        "expected": 59
      }
    ]
  },
  {
    "define": "_functions.List.Couppcd",
    "blueprint": "_blueprint.Flowgraph",
    "description": "This function is currently not implemented and the description will be updated accordingly.",
    "parameters": {
      "input": {
        "type": "_types.List",
        "description": "The list to perform the operation on."
      },
      "index": {
        "type": "_types.Number",
        "description": "The index to perform the operation at."
      }
    },
    "implementation": {
      "javascript": {
        "code": "// Function implementation will be updated once it's implemented.\nreturn [];\n"
      }
    },
    "returns": {
      "type": "_types.List",
      "description": "The resulting list after performing the operation."
    },
    "tests": {
      "couppcdSliceFirst": {
        "description": "Perform the operation on the first index of the list.",
        "input": {
          "input": ["a", "b", "c", "d"],
          "index": 0
        },
        "expected": []
      },
      "couppcdSliceMiddle": {
        "description": "Perform the operation on an index in the middle of the list.",
        "input": {
          "input": ["x", "y", "z"],
          "index": 1
        },
        "expected": []
      },
      "couppcdSliceNegativeIndex": {
        "description": "Perform the operation with a negative index counting from the end of the list.",
        "input": {
          "input": ["foo", "bar", "baz"],
          "index": -2
        },
        "expected": []
      }
    },
    "examples": [
      {
        "description": "Perform the operation on the last index of a four-element list.",
        "input": {
          "input": ["apple", "banana", "cherry", "date"],
          "index": 3
        },
        "expected": []
      },
      {
        "description": "Perform the operation on an index out of bounds.",
        "input": {
          "input": [1, 2, 3],
          "index": 5
        },
        "expected": []
      },
      {
        "description": "Perform the operation on an empty list.",
        "input": {
          "input": [],
          "index": 0
        },
        "expected": []
      }
    ]
  },
  {
    "define": "_functions.Number.Covar",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Calculates the covariance between two lists of numbers.",
    "parameters": {
      "list1": {
        "type": "_types.List",
        "description": "The first list of numbers."
      },
      "list2": {
        "type": "_types.List",
        "description": "The second list of numbers."
      }
    },
    "implementation": {
      "javascript": {
        "code": "const n = $$args.list1.length;\nif (n !== $$args.list2.length) {\n  throw new Error('Lists must be of equal length');\n}\n\nconst mean1 = $$args.list1.reduce((acc, val) => acc + val, 0) / n;\nconst mean2 = $$args.list2.reduce((acc, val) => acc + val, 0) / n;\n\nconst sum = $$args.list1.reduce((acc, val, index) => acc + (val - mean1) * ( $$args.list2[index] - mean2), 0);\n\nreturn sum / n;\n"
      }
    },
    "returns": {
      "type": "_types.Number",
      "description": "The covariance between the two lists of numbers."
    },
    "tests": {
      "covarSimple": {
        "description": "Calculate the covariance of two simple lists.",
        "input": {
          "list1": [1, 2, 3, 4, 5],
          "list2": [2, 3, 4, 5, 6]
        },
        "expected": 2
      },
      "covarNegative": {
        "description": "Calculate the covariance of lists with negative values.",
        "input": {
          "list1": [-1, -2, -3, -4, -5],
          "list2": [-2, -3, -4, -5, -6]
        },
        "expected": 2
      },
      "covarZero": {
        "description": "Calculate the covariance of lists with zero covariance.",
        "input": {
          "list1": [1, 1, 1, 1, 1],
          "list2": [1, 1, 1, 1, 1]
        },
        "expected": 0
      }
    },
    "examples": [
      {
        "description": "Calculate the covariance of lists with mixed positive and negative values.",
        "input": {
          "list1": [1, -2, 3, -4, 5],
          "list2": [-1, 2, -3, 4, -5]
        },
        "expected": -5.6
      },
      {
        "description": "Calculate the covariance of lists with different ranges.",
        "input": {
          "list1": [10, 20, 30, 40, 50],
          "list2": [15, 25, 35, 45, 55]
        },
        "expected": 125
      },
      {
        "description": "Calculate the covariance of lists with one list containing zero values.",
        "input": {
          "list1": [0, 0, 0, 0, 0],
          "list2": [1, 2, 3, 4, 5]
        },
        "expected": 0
      }
    ]
  },
  {
    "define": "_functions.Number.CurrencyDecimal",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Converts a currency amount to a decimal value.",
    "parameters": {
      "amount": {
        "type": "_types.Number",
        "description": "The currency amount to convert to a decimal value."
      }
    },
    "implementation": {
      "javascript": {
        "code": "return parseFloat($$args.amount);\n"
      }
    },
    "returns": {
      "type": "_types.Number",
      "description": "The decimal value of the currency amount."
    },
    "tests": {
      "currencyDecimalWholeNumber": {
        "description": "Convert a whole number currency amount to a decimal.",
        "input": {
          "amount": 100
        },
        "expected": 100
      },
      "currencyDecimalFractionalNumber": {
        "description": "Convert a fractional currency amount to a decimal.",
        "input": {
          "amount": 99.99
        },
        "expected": 99.99
      },
      "currencyDecimalNegativeNumber": {
        "description": "Convert a negative currency amount to a decimal.",
        "input": {
          "amount": -50
        },
        "expected": -50
      },
      "currencyDecimalZero": {
        "description": "Convert a zero currency amount to a decimal.",
        "input": {
          "amount": 0
        },
        "expected": 0
      }
    },
    "examples": [
      {
        "description": "Convert a large currency amount to a decimal.",
        "input": {
          "amount": 1000000.99
        },
        "expected": 1000000.99
      },
      {
        "description": "Convert a small currency amount to a decimal.",
        "input": {
          "amount": 0.05
        },
        "expected": 0.05
      },
      {
        "description": "Convert a currency amount with many decimal places.",
        "input": {
          "amount": 1234.56789
        },
        "expected": 1234.56789
      }
    ]
  },
  {
    "define": "_functions.String.CurrencyFunctional",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Formats a number as a currency string.",
    "parameters": {
      "value": {
        "type": "_types.Number",
        "description": "The numeric value to format as currency."
      },
      "currency": {
        "type": "_types.String",
        "description": "The currency code or symbol to use in the formatted string, e.g., \"USD\", \"$\", \"EUR\", \"â‚¬\"."
      }
    },
    "implementation": {
      "javascript": {
        "code": "const formatter = new Intl.NumberFormat(undefined, {\n  style: 'currency',\n  currency: $$args.currency,\n});\nreturn formatter.format($$args.value);\n"
      }
    },
    "returns": {
      "type": "_types.String",
      "description": "The formatted currency string."
    },
    "tests": {
      "currencyUSD": {
        "description": "Format a number as USD currency.",
        "input": {
          "value": 1000,
          "currency": "USD"
        },
        "expected": "$1,000.00"
      },
      "currencyEUR": {
        "description": "Format a number as EUR currency.",
        "input": {
          "value": 5000,
          "currency": "EUR"
        },
        "expected": "â‚¬5,000.00"
      },
      "currencyJPY": {
        "description": "Format a number as JPY currency.",
        "input": {
          "value": 2500.5,
          "currency": "JPY"
        },
        "expected": "Â¥2,501"
      }
    },
    "examples": [
      {
        "description": "Format a small number as GBP currency.",
        "input": {
          "value": 4.5,
          "currency": "GBP"
        },
        "expected": "Â£4.50"
      },
      {
        "description": "Format a number with no fractional part as INR currency.",
        "input": {
          "value": 35000,
          "currency": "INR"
        },
        "expected": "â‚¹35,000.00"
      },
      {
        "description": "Format a decimal number as USD currency.",
        "input": {
          "value": 1234.56,
          "currency": "USD"
        },
        "expected": "$1,234.56"
      }
    ]
  },
  {
    "define": "_functions.Math.Darken",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Darkens a color by decreasing its lightness.",
    "parameters": {
      "color": {
        "type": "_types.Dictionary",
        "description": "The color to darken, in HSL format."
      },
      "amount": {
        "type": "_types.Number",
        "description": "The amount to darken the color by (0-1.0)."
      }
    },
    "implementation": {
      "javascript": {
        "code": "function darken(color, amount) {\n  const newLightness = Math.max(color.l - amount, 0);\n  return { h: color.h, s: color.s, l: newLightness };\n}\n\nreturn darken($$args.color, $$args.amount);\n"
      }
    },
    "returns": {
      "type": "_types.Dictionary",
      "description": "The darkened color in HSL format."
    },
    "tests": {
      "darkenSimple": {
        "description": "Darken a simple color.",
        "input": {
          "color": {
            "h": 120,
            "s": 1,
            "l": 0.5
          },
          "amount": 0.2
        },
        "expected": {
          "h": 120,
          "s": 1,
          "l": 0.3
        }
      },
      "darkenToMin": {
        "description": "Darken a color to the minimum lightness.",
        "input": {
          "color": {
            "h": 0,
            "s": 1,
            "l": 0.1
          },
          "amount": 0.2
        },
        "expected": {
          "h": 0,
          "s": 1,
          "l": 0
        }
      }
    },
    "examples": [
      {
        "description": "Darken a color with medium lightness moderately.",
        "input": {
          "color": {
            "h": 200,
            "s": 0.5,
            "l": 0.6
          },
          "amount": 0.1
        },
        "expected": {
          "h": 200,
          "s": 0.5,
          "l": 0.5
        }
      },
      {
        "description": "Darken a very light color slightly.",
        "input": {
          "color": {
            "h": 50,
            "s": 0.8,
            "l": 0.9
          },
          "amount": 0.05
        },
        "expected": {
          "h": 50,
          "s": 0.8,
          "l": 0.85
        }
      },
      {
        "description": "Darken a color with maximum lightness by a large amount.",
        "input": {
          "color": {
            "h": 330,
            "s": 1,
            "l": 1
          },
          "amount": 0.5
        },
        "expected": {
          "h": 330,
          "s": 1,
          "l": 0.5
        }
      }
    ]
  },
  {
    "define": "_functions.Date.Datetime",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Returns a date-time object.",
    "parameters": {
      "value": {
        "type": "_types.Date",
        "description": "The input date-time value."
      }
    },
    "implementation": {
      "javascript": {
        "code": "if ($$args.value instanceof Date) {\n  return $$args.value;\n} else if (typeof $$args.value === 'string') {\n  return new Date($$args.value).toString();\n} else {\n  throw new Error('Invalid input type');\n}\n"
      }
    },
    "returns": {
      "type": "_types.Date",
      "description": "The date-time object."
    },
    "tests": {
      "datetimeValidString": {
        "description": "Test with a valid string date.",
        "input": {
          "value": "2022-01-01T12:00:00.000Z"
        },
        "expected": "Sat Jan 01 2022 12:00:00 GMT+0000 (Coordinated Universal Time)"
      },
      "datetimeInvalidString": {
        "description": "Test with an invalid string date.",
        "input": {
          "value": "abc"
        },
        "expected": "Invalid Date"
      },
      "datetimeValidDateObject": {
        "description": "Test with a valid Date object.",
        "input": {
          "value": "2022-01-01T12:00:00.000Z"
        },
        "expected": "Sat Jan 01 2022 12:00:00 GMT+0000 (Coordinated Universal Time)"
      }
    },
    "examples": [
      {
        "description": "Test with a date string with timezone offset.",
        "input": {
          "value": "2022-01-01T12:00:00.000-05:00"
        },
        "expected": "Sat Jan 01 2022 17:00:00 GMT+0000 (Coordinated Universal Time)"
      },
      {
        "description": "Test with a date string without time component.",
        "input": {
          "value": "2022-01-01"
        },
        "expected": "Sat Jan 01 2022 00:00:00 GMT+0000 (Coordinated Universal Time)"
      },
      {
        "description": "Test with a date object.",
        "input": {
          "value": {}
        },
        "expected": "{}"
      }
    ]
  },
  {
    "define": "_functions.Date.DatetimeDifference",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Calculates the difference between two datetime values.",
    "parameters": {
      "start_date": {
        "type": "_types.Date",
        "description": "The starting date to calculate the difference from."
      },
      "end_date": {
        "type": "_types.Date",
        "description": "The ending date to calculate the difference up to."
      },
      "unit": {
        "type": "_types.String",
        "enum": ["days", "hours", "minutes"],
        "description": "The unit of the calculated difference."
      }
    },
    "implementation": {
      "javascript": {
        "code": "const diff = $$args.end_date.getTime() - $$args.start_date.getTime();\nif ($$args.unit == \"days\") {\n  return new Date(diff / (1000 * 60 * 60 * 24)).getDate();\n} else if ($$args.unit == \"hours\") {\n  return Math.floor(diff / (1000 * 60 * 60));\n} else if ($$args.unit == \"minutes\") {\n  return Math.floor(diff / (1000 * 60));\n}\n"
      }
    },
    "returns": {
      "type": "_types.Number",
      "description": "The calculated difference in the specified unit."
    },
    "tests": {
      "datetimeDifferenceDays": {
        "description": "Calculate the difference between two dates in days.",
        "input": {
          "start_date": "2022-01-01T00:00:00.000Z",
          "end_date": "2022-01-03T12:00:00.000Z",
          "unit": "days"
        },
        "expected": 1
      },
      "datetimeDifferenceHours": {
        "description": "Calculate the difference between two dates in hours.",
        "input": {
          "start_date": "2022-01-01T10:30:00.000Z",
          "end_date": "2022-01-02T14:45:00.000Z",
          "unit": "hours"
        },
        "expected": 28
      },
      "datetimeDifferenceMinutes": {
        "description": "Calculate the difference between two dates in minutes.",
        "input": {
          "start_date": "2022-01-01T10:30:00.000Z",
          "end_date": "2022-01-02T11:15:00.000Z",
          "unit": "minutes"
        },
        "expected": 1485
      }
    },
    "examples": [
      {
        "description": "Calculate the difference in days across a month boundary.",
        "input": {
          "start_date": "2022-01-30T00:00:00.000Z",
          "end_date": "2022-02-02T00:00:00.000Z",
          "unit": "days"
        },
        "expected": 2
      },
      {
        "description": "Calculate the difference in hours over a single day.",
        "input": {
          "start_date": "2022-01-01T07:00:00.000Z",
          "end_date": "2022-01-01T20:00:00.000Z",
          "unit": "hours"
        },
        "expected": 13
      },
      {
        "description": "Calculate the difference in minutes for a partial hour.",
        "input": {
          "start_date": "2022-01-01T07:15:00.000Z",
          "end_date": "2022-01-01T07:45:00.000Z",
          "unit": "minutes"
        },
        "expected": 30
      }
    ]
  },
  {
    "define": "_functions.Date.DatetimeIsAfter",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Compares two dates and returns a boolean indicating if the first date is after the second.",
    "parameters": {
      "date1": {
        "type": "_types.Date",
        "description": "The first date to compare in ISO format."
      },
      "date2": {
        "type": "_types.Date",
        "description": "The second date to compare in ISO format."
      }
    },
    "implementation": {
      "javascript": {
        "code": "const date1 = new Date($$args.date1);\nconst date2 = new Date($$args.date2);\nreturn date1.getTime() > date2.getTime();\n"
      }
    },
    "returns": {
      "type": "_types.Boolean",
      "description": "Whether the first date is after the second."
    },
    "tests": {
      "datetimeIsAfterToday": {
        "description": "Check if a date in the future is after today.",
        "input": {
          "date1": "2023-01-01T12:00:00.000Z",
          "date2": "2022-01-01T12:00:00.000Z"
        },
        "expected": true
      },
      "datetimeIsNotAfterToday": {
        "description": "Check if a date in the past is not after today.",
        "input": {
          "date1": "2020-01-01T12:00:00.000Z",
          "date2": "2022-01-01T12:00:00.000Z"
        },
        "expected": false
      },
      "datetimeIsEqual": {
        "description": "Check if two dates that are the same return false.",
        "input": {
          "date1": "2022-01-01T12:00:00.000Z",
          "date2": "2022-01-01T12:00:00.000Z"
        },
        "expected": false
      }
    },
    "examples": [
      {
        "description": "Check if a date in 2025 is after a date in 2020.",
        "input": {
          "date1": "2025-01-01T00:00:00.000Z",
          "date2": "2020-01-01T00:00:00.000Z"
        },
        "expected": true
      },
      {
        "description": "Check if a date in February is after a date in January of the same year.",
        "input": {
          "date1": "2023-02-01T00:00:00.000Z",
          "date2": "2023-01-01T00:00:00.000Z"
        },
        "expected": true
      },
      {
        "description": "Check if a date in the same month but later day is after an earlier day.",
        "input": {
          "date1": "2023-01-15T00:00:00.000Z",
          "date2": "2023-01-10T00:00:00.000Z"
        },
        "expected": true
      }
    ]
  },
  {
    "define": "_functions.Date.DatetimeIsBefore",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Compares two datetime values and returns true if the first datetime is before the second.",
    "parameters": {
      "datetime1": {
        "type": "_types.Date",
        "description": "The first datetime to compare in ISO format."
      },
      "datetime2": {
        "type": "_types.Date",
        "description": "The second datetime to compare in ISO format."
      }
    },
    "implementation": {
      "javascript": {
        "code": "const datetime1 = new Date($$args.datetime1);\nconst datetime2 = new Date($$args.datetime2);\nreturn datetime1.getTime() < datetime2.getTime();\n"
      }
    },
    "returns": {
      "type": "_types.Boolean",
      "description": "True if the first datetime is before the second, false otherwise."
    },
    "tests": {
      "datetimeIsBeforeSameDate": {
        "description": "Compare two dates on the same day.",
        "input": {
          "datetime1": "2023-03-15T14:30:00.000Z",
          "datetime2": "2023-03-15T16:30:00.000Z"
        },
        "expected": true
      },
      "datetimeIsBeforeEarlierDate": {
        "description": "Compare two dates on different days, but the first is earlier.",
        "input": {
          "datetime1": "2023-03-14T14:30:00.000Z",
          "datetime2": "2023-03-15T16:30:00.000Z"
        },
        "expected": true
      },
      "datetimeIsBeforeLaterDate": {
        "description": "Compare two dates on different days, but the first is later.",
        "input": {
          "datetime1": "2023-03-16T14:30:00.000Z",
          "datetime2": "2023-03-15T16:30:00.000Z"
        },
        "expected": false
      },
      "datetimeIsEqual": {
        "description": "Compare two identical dates.",
        "input": {
          "datetime1": "2023-03-15T16:30:00.000Z",
          "datetime2": "2023-03-15T16:30:00.000Z"
        },
        "expected": false
      }
    },
    "examples": [
      {
        "description": "Compare two dates within the same month and year.",
        "input": {
          "datetime1": "2023-03-01T10:00:00.000Z",
          "datetime2": "2023-03-31T10:00:00.000Z"
        },
        "expected": true
      },
      {
        "description": "Compare two dates where the second date is exactly one year later than the first.",
        "input": {
          "datetime1": "2022-03-15T14:30:00.000Z",
          "datetime2": "2023-03-15T14:30:00.000Z"
        },
        "expected": true
      },
      {
        "description": "Compare two dates where the first date is exactly one year later than the second.",
        "input": {
          "datetime1": "2024-03-15T14:30:00.000Z",
          "datetime2": "2023-03-15T14:30:00.000Z"
        },
        "expected": false
      }
    ]
  },
  {
    "define": "_functions.Date.DatetimeIsBetween",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Checks if a date is between two dates.",
    "parameters": {
      "datetime": {
        "type": "_types.Date",
        "description": "The date to check in ISO format."
      },
      "start": {
        "type": "_types.Date",
        "description": "The start date of the range in ISO format."
      },
      "end": {
        "type": "_types.Date",
        "description": "The end date of the range in ISO format."
      }
    },
    "implementation": {
      "javascript": {
        "code": "const datetime = new Date($$args.datetime);\nconst start = new Date($$args.start);\nconst end = new Date($$args.end);\nreturn datetime >= start && datetime <= end;\n"
      }
    },
    "returns": {
      "type": "_types.Boolean",
      "description": "Whether the datetime is between the start and end dates."
    },
    "tests": {
      "datetimeIsBetweenSimple": {
        "description": "Check a date within the range.",
        "input": {
          "datetime": "2022-01-01T00:00:00.000Z",
          "start": "2022-01-01T00:00:00.000Z",
          "end": "2022-01-31T23:59:59.999Z"
        },
        "expected": true
      },
      "datetimeIsBetweenStart": {
        "description": "Check a date at the start of the range.",
        "input": {
          "datetime": "2022-01-01T00:00:00.000Z",
          "start": "2022-01-01T00:00:00.000Z",
          "end": "2022-01-31T23:59:59.999Z"
        },
        "expected": true
      },
      "datetimeIsBetweenEnd": {
        "description": "Check a date at the end of the range.",
        "input": {
          "datetime": "2022-01-31T23:59:59.999Z",
          "start": "2022-01-01T00:00:00.000Z",
          "end": "2022-01-31T23:59:59.999Z"
        },
        "expected": true
      },
      "datetimeIsOutsideRange": {
        "description": "Check a date outside the range.",
        "input": {
          "datetime": "2021-12-31T23:59:59.999Z",
          "start": "2022-01-01T00:00:00.000Z",
          "end": "2022-01-31T23:59:59.999Z"
        },
        "expected": false
      }
    },
    "examples": [
      {
        "description": "Check a date exactly one day before the range.",
        "input": {
          "datetime": "2021-12-31T00:00:00.000Z",
          "start": "2022-01-01T00:00:00.000Z",
          "end": "2022-01-31T23:59:59.999Z"
        },
        "expected": false
      },
      {
        "description": "Check a date exactly one day after the range.",
        "input": {
          "datetime": "2022-02-01T00:00:00.000Z",
          "start": "2022-01-01T00:00:00.000Z",
          "end": "2022-01-31T23:59:59.999Z"
        },
        "expected": false
      },
      {
        "description": "Check a date exactly in the middle of the range.",
        "input": {
          "datetime": "2022-01-16T12:00:00.000Z",
          "start": "2022-01-01T00:00:00.000Z",
          "end": "2022-01-31T23:59:59.999Z"
        },
        "expected": true
      }
    ]
  },
  {
    "define": "_functions.Date.DatetimeIsSame",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Checks if two datetime values are the same.",
    "parameters": {
      "date1": {
        "type": "_types.Date",
        "description": "The first datetime value to compare in ISO format."
      },
      "date2": {
        "type": "_types.Date",
        "description": "The second datetime value to compare in ISO format."
      }
    },
    "implementation": {
      "javascript": {
        "code": "const date1 = new Date($$args.date1);\nconst date2 = new Date($$args.date2);\nreturn date1.getTime() === date2.getTime();\n"
      }
    },
    "returns": {
      "type": "_types.Boolean",
      "description": "Whether the two datetime values are the same or not."
    },
    "tests": {
      "datetimeIsSameSame": {
        "description": "Compare two identical datetime values.",
        "input": {
          "date1": "2020-01-01T00:00:00.000Z",
          "date2": "2020-01-01T00:00:00.000Z"
        },
        "expected": true
      },
      "datetimeIsSameDifferent": {
        "description": "Compare two different datetime values.",
        "input": {
          "date1": "2020-01-01T00:00:00.000Z",
          "date2": "2020-02-01T00:00:00.000Z"
        },
        "expected": false
      }
    },
    "examples": [
      {
        "description": "Compare identical datetime values including milliseconds.",
        "input": {
          "date1": "2021-05-15T13:45:30.123Z",
          "date2": "2021-05-15T13:45:30.123Z"
        },
        "expected": true
      },
      {
        "description": "Compare datetime values with different times but same date.",
        "input": {
          "date1": "2022-12-25T08:00:00.000Z",
          "date2": "2022-12-25T17:00:00.000Z"
        },
        "expected": false
      },
      {
        "description": "Compare datetime values where one is slightly later.",
        "input": {
          "date1": "2023-07-01T10:00:00.000Z",
          "date2": "2023-07-01T10:00:00.001Z"
        },
        "expected": false
      }
    ]
  },
  {
    "define": "_functions.Date.DatetimeIsSameOrAfter",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Compares two dates and returns true if the given date is same or after the reference date.",
    "parameters": {
      "referenceDate": {
        "type": "_types.Date",
        "description": "The reference date to compare with in ISO format."
      },
      "targetDate": {
        "type": "_types.Date",
        "description": "The target date to compare in ISO format."
      }
    },
    "implementation": {
      "javascript": {
        "code": "const referenceDate = new Date($$args.referenceDate);\nconst targetDate = new Date($$args.targetDate);\nreturn targetDate.getTime() >= referenceDate.getTime();\n"
      }
    },
    "returns": {
      "type": "_types.Boolean",
      "description": "Whether the target date is same or after the reference date."
    },
    "tests": {
      "datetimeIsSameOrAfterSame": {
        "description": "Compare two dates that are the same.",
        "input": {
          "referenceDate": "2022-01-01T00:00:00.000Z",
          "targetDate": "2022-01-01T00:00:00.000Z"
        },
        "expected": true
      },
      "datetimeIsSameOrAfterAfter": {
        "description": "Compare two dates where the target date is after the reference date.",
        "input": {
          "referenceDate": "2022-01-01T00:00:00.000Z",
          "targetDate": "2022-02-01T00:00:00.000Z"
        },
        "expected": true
      },
      "datetimeIsSameOrAfterBefore": {
        "description": "Compare two dates where the target date is before the reference date.",
        "input": {
          "referenceDate": "2022-02-01T00:00:00.000Z",
          "targetDate": "2022-01-01T00:00:00.000Z"
        },
        "expected": false
      }
    },
    "examples": [
      {
        "description": "Compare two dates where the target date is one second after the reference date.",
        "input": {
          "referenceDate": "2022-01-01T00:00:00.000Z",
          "targetDate": "2022-01-01T00:00:01.000Z"
        },
        "expected": true
      },
      {
        "description": "Compare two dates where the target date is exactly one year after the reference date.",
        "input": {
          "referenceDate": "2021-01-01T00:00:00.000Z",
          "targetDate": "2022-01-01T00:00:00.000Z"
        },
        "expected": true
      },
      {
        "description": "Compare two dates where the target date is one millisecond before the reference date.",
        "input": {
          "referenceDate": "2022-01-01T00:00:01.000Z",
          "targetDate": "2022-01-01T00:00:00.999Z"
        },
        "expected": false
      }
    ]
  },
  {
    "define": "_functions.Date.DatetimeIsSameOrBefore",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Checks if a given date is the same or before another given date.",
    "parameters": {
      "date1": {
        "type": "_types.Date",
        "description": "The date to compare."
      },
      "date2": {
        "type": "_types.Date",
        "description": "The date against which to compare."
      }
    },
    "implementation": {
      "javascript": {
        "code": "return $$args.date1 <= $$args.date2;\n"
      }
    },
    "returns": {
      "type": "_types.Boolean",
      "description": "Whether the given date is the same or before another given date."
    },
    "tests": {
      "sameDate": {
        "description": "Compare two dates that are the same.",
        "input": {
          "date1": "2020-01-01T00:00:00.000Z",
          "date2": "2020-01-01T00:00:00.000Z"
        },
        "expected": true
      },
      "beforeDate": {
        "description": "Compare two dates where one is before the other.",
        "input": {
          "date1": "2019-12-31T23:59:59.999Z",
          "date2": "2020-01-01T00:00:00.000Z"
        },
        "expected": true
      },
      "sameDateButTime": {
        "description": "Compare two dates that are the same but have different times.",
        "input": {
          "date1": "2020-01-01T23:59:59.999Z",
          "date2": "2020-01-01T00:00:00.000Z"
        },
        "expected": false
      }
    },
    "examples": [
      {
        "description": "Compare two different dates in different years.",
        "input": {
          "date1": "2021-07-04T00:00:00.000Z",
          "date2": "2022-01-01T00:00:00.000Z"
        },
        "expected": true
      },
      {
        "description": "Compare a date significantly earlier than another date.",
        "input": {
          "date1": "2018-05-15T00:00:00.000Z",
          "date2": "2020-10-10T00:00:00.000Z"
        },
        "expected": true
      },
      {
        "description": "Compare two dates where date1 is after date2.",
        "input": {
          "date1": "2023-11-11T00:00:00.000Z",
          "date2": "2023-09-09T00:00:00.000Z"
        },
        "expected": false
      }
    ]
  },
  {
    "define": "_functions.Number.DecliningBalance",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Calculates the declining balance of an initial value with a given rate.",
    "parameters": {
      "initialValue": {
        "type": "_types.Number",
        "description": "The initial value of the asset."
      },
      "rate": {
        "type": "_types.Number",
        "description": "The rate of decline per period."
      }
    },
    "implementation": {
      "javascript": {
        "code": "return $$args.initialValue * (1 - $$args.rate);\n"
      }
    },
    "returns": {
      "type": "_types.Number",
      "description": "The declining balance after applying the rate."
    },
    "tests": {
      "decliningBalanceSimple": {
        "description": "Calculate the declining balance with a simple rate.",
        "input": {
          "initialValue": 1000,
          "rate": 0.1
        },
        "expected": 900
      },
      "decliningBalanceZeroRate": {
        "description": "Calculate the declining balance with a zero rate.",
        "input": {
          "initialValue": 2000,
          "rate": 0
        },
        "expected": 2000
      },
      "decliningBalanceNegativeRate": {
        "description": "Calculate the declining balance with a negative rate.",
        "input": {
          "initialValue": 500,
          "rate": -0.2
        },
        "expected": 600
      }
    },
    "examples": [
      {
        "description": "Calculate the declining balance with a high rate.",
        "input": {
          "initialValue": 1000,
          "rate": 0.5
        },
        "expected": 500
      },
      {
        "description": "Calculate the declining balance with a fractional rate.",
        "input": {
          "initialValue": 750,
          "rate": 0.25
        },
        "expected": 562.5
      },
      {
        "description": "Calculate the declining balance with a low rate.",
        "input": {
          "initialValue": 1500,
          "rate": 0.05
        },
        "expected": 1425
      }
    ]
  },
  {
    "define": "_functions.String.DefaultString",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Returns the default string value for a given input.",
    "parameters": {
      "input": {
        "type": "_types.String",
        "description": "The input to check for a default value."
      }
    },
    "implementation": {
      "javascript": {
        "code": "if ($$args.input == null || $$args.input === \"\") {\n  return \"default\";\n} else {\n  return $$args.input;\n}\n"
      }
    },
    "returns": {
      "type": "_types.String",
      "description": "The default string value or the input value if it is not null or an empty string."
    },
    "tests": {
      "defaultStringNull": {
        "description": "Check for a null input.",
        "input": {
          "input": null
        },
        "expected": "default"
      },
      "defaultStringEmptyString": {
        "description": "Check for an empty string as input.",
        "input": {
          "input": ""
        },
        "expected": "default"
      },
      "defaultStringNonDefaultInput": {
        "description": "Check for a non-default input.",
        "input": {
          "input": "hello"
        },
        "expected": "hello"
      }
    },
    "examples": [
      {
        "description": "Check for a whitespace-only string input.",
        "input": {
          "input": "   "
        },
        "expected": "   "
      },
      {
        "description": "Check for a string with special characters.",
        "input": {
          "input": "@#!"
        },
        "expected": "@#!"
      },
      {
        "description": "Check for a non-default input with mixed case.",
        "input": {
          "input": "TestInput"
        },
        "expected": "TestInput"
      }
    ]
  },
  {
    "define": "_functions.String.DefaultFileExtension",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Returns the default file extension for a given type.",
    "parameters": {
      "type": {
        "type": "_types.String",
        "description": "The type of file to determine the default extension for."
      }
    },
    "implementation": {
      "javascript": {
        "code": "const extensions = {\n  'image': '.png',\n  'video': '.mp4',\n  // Add more types and their default extensions as needed\n};\nreturn extensions[$$args.type] || '';\n"
      }
    },
    "returns": {
      "type": "_types.String",
      "description": "The default file extension for the given type."
    },
    "tests": {
      "defaultFileExtensionImage": {
        "description": "Get the default file extension for an image.",
        "input": {
          "type": "image"
        },
        "expected": ".png"
      },
      "defaultFileExtensionVideo": {
        "description": "Get the default file extension for a video.",
        "input": {
          "type": "video"
        },
        "expected": ".mp4"
      },
      "defaultFileExtensionUnknown": {
        "description": "Get the default file extension for an unknown type.",
        "input": {
          "type": "unknown"
        },
        "expected": ""
      }
    },
    "examples": [
      {
        "description": "Get the default file extension for an audio file.",
        "input": {
          "type": "audio"
        },
        "expected": ""
      },
      {
        "description": "Get the default file extension for a document.",
        "input": {
          "type": "document"
        },
        "expected": ""
      },
      {
        "description": "Get the default file extension for an archive file.",
        "input": {
          "type": "archive"
        },
        "expected": ""
      }
    ]
  },
  {
    "define": "_functions.Dictionary.DeleteKey",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Removes the specified key-value pair from a dictionary.",
    "parameters": {
      "dictionary": {
        "type": "_types.Dictionary",
        "description": "The dictionary to remove the key-value pair from."
      },
      "key": {
        "type": "_types.String",
        "description": "The key of the key-value pair to delete."
      }
    },
    "implementation": {
      "javascript": {
        "code": "if ($$args.dictionary.hasOwnProperty($$args.key)) {\n  delete $$args.dictionary[$$args.key];\n}\nreturn $$args.dictionary;\n"
      }
    },
    "returns": {
      "type": "_types.Dictionary",
      "description": "The dictionary with the specified key-value pair removed."
    },
    "tests": {
      "deleteKeyNonExistingKey": {
        "description": "Attempt to delete a key that does not exist in the dictionary.",
        "input": {
          "dictionary": {
            "a": 1,
            "b": 2
          },
          "key": "c"
        },
        "expected": {
          "a": 1,
          "b": 2
        }
      }
    },
    "examples": [
      {
        "description": "Delete an existing key from the dictionary.",
        "input": {
          "dictionary": {
            "x": 10,
            "y": 20,
            "z": 30
          },
          "key": "y"
        },
        "expected": {
          "x": 10,
          "z": 30
        }
      },
      {
        "description": "Delete the only key from the dictionary.",
        "input": {
          "dictionary": {
            "singleKey": 123
          },
          "key": "singleKey"
        },
        "expected": {}
      },
      {
        "description": "Attempt to delete a key from an empty dictionary.",
        "input": {
          "dictionary": {},
          "key": "nonExistentKey"
        },
        "expected": {}
      }
    ]
  },
  {
    "define": "_functions.Number.Devsq",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Returns the square of each element in the given list.",
    "parameters": {
      "input": {
        "type": "_types.List",
        "description": "The list of numbers to calculate the square of each element."
      }
    },
    "implementation": {
      "javascript": {
        "code": "return $$args.input.map(item => Math.pow(item, 2));\n"
      }
    },
    "returns": {
      "type": "_types.List",
      "description": "The list of squares for each element in the input list."
    },
    "tests": {
      "devsqPositiveNumbers": {
        "description": "Calculate the squares of positive numbers.",
        "input": {
          "input": [2, 4, 6]
        },
        "expected": [4, 16, 36]
      },
      "devsqNegativeNumbers": {
        "description": "Calculate the squares of negative numbers.",
        "input": {
          "input": [-3, -5, -7]
        },
        "expected": [9, 25, 49]
      },
      "devsqMixedNumbers": {
        "description": "Calculate the squares of mixed positive and negative numbers.",
        "input": {
          "input": [-2, 0, 2]
        },
        "expected": [4, 0, 4]
      }
    },
    "examples": [
      {
        "description": "Calculate the squares of single element list.",
        "input": {
          "input": [5]
        },
        "expected": [25]
      },
      {
        "description": "Calculate the squares of a list with zero.",
        "input": {
          "input": [0, 3, 4]
        },
        "expected": [0, 9, 16]
      },
      {
        "description": "Calculate the squares of a list with decimal numbers.",
        "input": {
          "input": [1.5, 2.5, 3.5]
        },
        "expected": [2.25, 6.25, 12.25]
      }
    ]
  },
  {
    "define": "_functions.List.Difference",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Returns the elements that are in one list but not in another.",
    "parameters": {
      "list1": {
        "type": "_types.List",
        "description": "The first list.",
        "items": {
          "type": "_types.Any"
        }
      },
      "list2": {
        "type": "_types.List",
        "description": "The second list.",
        "items": {
          "type": "_types.Any"
        }
      }
    },
    "implementation": {
      "javascript": {
        "code": "const set2 = new Set($$args.list2);\nreturn $$args.list1.filter(item => !set2.has(item));\n"
      }
    },
    "returns": {
      "type": "_types.List",
      "description": "The list of elements that are in the first list but not in the second list.",
      "items": {
        "type": "_types.Any"
      }
    },
    "tests": {
      "differenceNoOverlap": {
        "description": "Difference of two lists with no overlap.",
        "input": {
          "list1": [1, 2, 3],
          "list2": [4, 5, 6]
        },
        "expected": [1, 2, 3]
      },
      "differenceWithOverlap": {
        "description": "Difference of two lists with some overlap.",
        "input": {
          "list1": [1, 2, 3, 4],
          "list2": [3, 4, 5, 6]
        },
        "expected": [1, 2]
      },
      "differenceEmptyFirstList": {
        "description": "Difference with an empty first list.",
        "input": {
          "list1": [],
          "list2": [1, 2, 3]
        },
        "expected": []
      },
      "differenceEmptySecondList": {
        "description": "Difference with an empty second list.",
        "input": {
          "list1": [1, 2, 3],
          "list2": []
        },
        "expected": [1, 2, 3]
      },
      "differenceBothEmpty": {
        "description": "Difference of two empty lists.",
        "input": {
          "list1": [],
          "list2": []
        },
        "expected": []
      }
    },
    "examples": [
      {
        "description": "Difference with a mix of numbers and strings.",
        "input": {
          "list1": [1, "apple", 3, "banana"],
          "list2": ["apple", 4, 5]
        },
        "expected": [1, 3, "banana"]
      },
      {
        "description": "Difference where list1 contains duplicate elements.",
        "input": {
          "list1": [1, 1, 2, 3, 4],
          "list2": [2, 4]
        },
        "expected": [1, 1, 3]
      },
      {
        "description": "Difference where list2 is a subset of list1.",
        "input": {
          "list1": ["cat", "dog", "bird"],
          "list2": ["dog"]
        },
        "expected": ["cat", "bird"]
      }
    ]
  },
  {
    "define": "_functions.List.Div",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Splits the list into sublists of a specified size.",
    "parameters": {
      "input": {
        "type": "_types.List",
        "description": "The list to be divided."
      },
      "size": {
        "type": "_types.Number",
        "description": "The size of each sublist."
      }
    },
    "implementation": {
      "javascript": {
        "code": "const result = [];\nfor (let i = 0; i < $$args.input.length; i += $$args.size) {\n  result.push($$args.input.slice(i, i + $$args.size));\n}\nreturn result;\n"
      }
    },
    "returns": {
      "type": "_types.List",
      "description": "The divided list."
    },
    "tests": {
      "divSimple": {
        "description": "Divide a list of three items into sublists of size one.",
        "input": {
          "input": ["a", "b", "c"],
          "size": 1
        },
        "expected": [["a"], ["b"], ["c"]]
      },
      "divMultiple": {
        "description": "Divide a list of five items into sublists of size two.",
        "input": {
          "input": ["a", "b", "c", "d", "e"],
          "size": 2
        },
        "expected": [["a", "b"], ["c", "d"], ["e"]]
      },
      "divLastElement": {
        "description": "Divide a list with one element into sublists of size two.",
        "input": {
          "input": ["a"],
          "size": 2
        },
        "expected": [["a"]]
      }
    },
    "examples": [
      {
        "description": "Divide a list of four elements into sublists of size three.",
        "input": {
          "input": ["x", "y", "z", "w"],
          "size": 3
        },
        "expected": [["x", "y", "z"], ["w"]]
      },
      {
        "description": "Divide a list of six elements into sublists of size two.",
        "input": {
          "input": [1, 2, 3, 4, 5, 6],
          "size": 2
        },
        "expected": [
          [1, 2],
          [3, 4],
          [5, 6]
        ]
      },
      {
        "description": "Divide a list of ten elements into sublists of size four.",
        "input": {
          "input": ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"],
          "size": 4
        },
        "expected": [
          ["a", "b", "c", "d"],
          ["e", "f", "g", "h"],
          ["i", "j"]
        ]
      }
    ]
  },
  {
    "define": "_functions.Math.Divide",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Divide two numbers.",
    "parameters": {
      "a": {
        "type": "_types.Number",
        "description": "The first number."
      },
      "b": {
        "type": "_types.Number",
        "description": "The second number."
      }
    },
    "implementation": {
      "javascript": {
        "code": "return $$args.a / $$args.b;\n"
      }
    },
    "returns": {
      "type": "_types.Number",
      "description": "The quotient of the two numbers."
    },
    "tests": {
      "divideTwo": {
        "description": "Divide two numbers.",
        "input": {
          "a": 6,
          "b": 2
        },
        "expected": 3
      }
    },
    "examples": [
      {
        "description": "Divide a number by 1",
        "input": {
          "a": 5,
          "b": 1
        },
        "expected": 5
      },
      {
        "description": "Divide a larger number by a smaller number",
        "input": {
          "a": 10,
          "b": 5
        },
        "expected": 2
      },
      {
        "description": "Divide two decimal numbers",
        "input": {
          "a": 7.5,
          "b": 2.5
        },
        "expected": 3
      }
    ]
  },
  {
    "define": "_functions.Number.DoubleDecliningBalance",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Calculates the double declining balance depreciation of an asset.",
    "parameters": {
      "cost": {
        "type": "_types.Number",
        "description": "The initial cost of the asset."
      },
      "salvageValue": {
        "type": "_types.Number",
        "description": "The salvage value of the asset."
      },
      "usefulLife": {
        "type": "_types.Number",
        "description": "The useful life of the asset in years."
      },
      "period": {
        "type": "_types.Number",
        "description": "The period for which depreciation is calculated."
      }
    },
    "implementation": {
      "javascript": {
        "code": "const rate = 2 / $$args.usefulLife;\nconst straightLine = ($$args.cost - $$args.salvageValue) / $$args.usefulLife;\nreturn Math.min(($$args.cost - straightLine * $$args.period) * rate, $$args.cost - $$args.salvageValue);\n"
      }
    },
    "returns": {
      "type": "_types.Number",
      "description": "The depreciation amount for the specified period."
    },
    "tests": {
      "doubleDecliningBalFirstYear": {
        "description": "Calculate depreciation for the first year.",
        "input": {
          "cost": 1000,
          "salvageValue": 100,
          "usefulLife": 5,
          "period": 1
        },
        "expected": 328
      },
      "doubleDecliningBalMidYear": {
        "description": "Calculate depreciation for a mid-year period.",
        "input": {
          "cost": 5000,
          "salvageValue": 1000,
          "usefulLife": 10,
          "period": 4.5
        },
        "expected": 640
      },
      "doubleDecliningBalFinalPeriod": {
        "description": "Calculate depreciation for the final period.",
        "input": {
          "cost": 8000,
          "salvageValue": 2000,
          "usefulLife": 8,
          "period": 8
        },
        "expected": 500
      }
    },
    "examples": [
      {
        "description": "Calculate depreciation for the third year.",
        "input": {
          "cost": 10000,
          "salvageValue": 2000,
          "usefulLife": 7,
          "period": 3
        },
        "expected": 1314.2857142857142
      },
      {
        "description": "Calculate depreciation for a period less than a year.",
        "input": {
          "cost": 6000,
          "salvageValue": 500,
          "usefulLife": 6,
          "period": 0.5
        },
        "expected": 166.66666666666666
      },
      {
        "description": "Calculate no depreciation if period is zero.",
        "input": {
          "cost": 7500,
          "salvageValue": 1500,
          "usefulLife": 5,
          "period": 0
        },
        "expected": 0
      }
    ]
  },
  {
    "define": "_functions.String.EncodeForUrl",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Encodes a string for use in URLs.",
    "parameters": {
      "input": {
        "type": "_types.String",
        "description": "The input string to encode."
      }
    },
    "implementation": {
      "javascript": {
        "code": "return encodeURIComponent($$args.input);\n"
      }
    },
    "returns": {
      "type": "_types.String",
      "description": "The encoded string."
    },
    "tests": {
      "encodeForUrlSimple": {
        "description": "Encode a simple string.",
        "input": {
          "input": "hello world"
        },
        "expected": "hello%20world"
      },
      "encodeForUrlSpecialChars": {
        "description": "Encode strings with special characters.",
        "input": {
          "input": "http://example.com/search?q=foo+bar"
        },
        "expected": "http%3A%2F%2Fexample.com%2Fsearch%3Fq%3Dfoo%2Bbar"
      },
      "encodeForUrlEmptyString": {
        "description": "Encode an empty string.",
        "input": {
          "input": ""
        },
        "expected": ""
      }
    },
    "examples": [
      {
        "description": "Encode a string with spaces and punctuation.",
        "input": {
          "input": "Good morning, world!"
        },
        "expected": "Good%20morning%2C%20world%21"
      },
      {
        "description": "Encode a string with various special characters.",
        "input": {
          "input": "#$&+,/:;=?@"
        },
        "expected": "%23%24%26%2B%2C%2F%3A%3B%3D%3F%40"
      },
      {
        "description": "Encode a string with non-ASCII characters.",
        "input": {
          "input": "ä½ å¥½ï¼Œä¸–ç•Œ"
        },
        "expected": "%E4%BD%A0%E5%A5%BD%EF%BC%8C%E4%B8%96%E7%95%8C"
      }
    ]
  },
  {
    "define": "_functions.Any.EncodeJSON",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Encodes a given input as JSON.",
    "parameters": {
      "input": {
        "type": "_types.Any",
        "description": "The input to be encoded as JSON."
      }
    },
    "implementation": {
      "javascript": {
        "code": "return JSON.stringify($$args.input);\n"
      }
    },
    "returns": {
      "type": "_types.String",
      "description": "The JSON-encoded input."
    },
    "tests": {
      "encodeJSONSimple": {
        "description": "Encode a simple object.",
        "input": {
          "input": {
            "key": "value"
          }
        },
        "expected": "{\"key\":\"value\"}"
      },
      "encodeJSONComplex": {
        "description": "Encode a complex object.",
        "input": {
          "input": {
            "a": [1, 2, 3],
            "b": {
              "x": 5,
              "y": 6
            }
          }
        },
        "expected": "{\"a\":[1,2,3],\"b\":{\"x\":5,\"y\":6}}"
      },
      "encodeJSONNull": {
        "description": "Encode null as JSON.",
        "input": {
          "input": null
        },
        "expected": "null"
      }
    },
    "examples": [
      {
        "description": "Encode a list of numbers.",
        "input": {
          "input": [1, 2, 3, 4, 5]
        },
        "expected": "[1,2,3,4,5]"
      },
      {
        "description": "Encode a dictionary with nested structure.",
        "input": {
          "input": {
            "name": "Alice",
            "details": {
              "age": 30,
              "city": "Wonderland"
            }
          }
        },
        "expected": "{\"name\":\"Alice\",\"details\":{\"age\":30,\"city\":\"Wonderland\"}}"
      },
      {
        "description": "Encode a boolean value.",
        "input": {
          "input": true
        },
        "expected": "true"
      }
    ]
  },
  {
    "define": "_functions.Math.Euler",
    "blueprint": "_blueprint.Flowgraph",
    "description": "The Euler's totient function, also known as Euler's phi function, is a fundamental arithmetic function in number theory.",
    "parameters": {
      "n": {
        "type": "_types.Number",
        "description": "The input number for which to calculate the Euler's totient function value."
      }
    },
    "implementation": {
      "javascript": {
        "code": "function gcd(a, b) {\n  while (b !== 0) {\n    const temp = b;\n    b = a % b;\n    a = temp;\n  }\n  return a;\n}\n\nfunction eulerTotient(n) {\n  let result = n;\n  for (let i = 2; i * i <= n; i++) {\n    if (n % i === 0) {\n      while (n % i === 0) {\n        n /= i;\n      }\n      result -= result / i;\n    }\n  }\n\n  if (n > 1) {\n    result -= result / n;\n  }\n\n  return result;\n}\n\nreturn eulerTotient($$args.n);\n"
      }
    },
    "returns": {
      "type": "_types.Number",
      "description": "The Euler's totient function value for the given input number."
    },
    "tests": {
      "eulerSimple": {
        "description": "Calculate the Euler's totient function for a simple case.",
        "input": {
          "n": 10
        },
        "expected": 4
      },
      "eulerMedium": {
        "description": "Calculate the Euler's totient function for a medium-sized case.",
        "input": {
          "n": 1000
        },
        "expected": 400
      }
    },
    "examples": [
      {
        "description": "Calculate the Euler's totient function for a prime number.",
        "input": {
          "n": 13
        },
        "expected": 12
      },
      {
        "description": "Calculate the Euler's totient function for a number with multiple prime factors.",
        "input": {
          "n": 30
        },
        "expected": 8
      },
      {
        "description": "Calculate the Euler's totient function for a number that is a power of a prime.",
        "input": {
          "n": 64
        },
        "expected": 32
      }
    ]
  },
  {
    "define": "_functions.Math.Even",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Returns whether the given number is even.",
    "parameters": {
      "input": {
        "type": "_types.Number",
        "description": "The number to check if it's even."
      }
    },
    "implementation": {
      "javascript": {
        "code": "return $$args.input % 2 === 0;\n"
      }
    },
    "returns": {
      "type": "_types.Boolean",
      "description": "Whether the number is even or not."
    },
    "tests": {
      "evenZero": {
        "description": "Check if 0 is even.",
        "input": {
          "input": 0
        },
        "expected": true
      },
      "evenPositive": {
        "description": "Check if a positive number is even.",
        "input": {
          "input": 4
        },
        "expected": true
      },
      "evenNegative": {
        "description": "Check if a negative number is even.",
        "input": {
          "input": -2
        },
        "expected": true
      },
      "oddPositive": {
        "description": "Check if an odd number is not even.",
        "input": {
          "input": 3
        },
        "expected": false
      },
      "oddNegative": {
        "description": "Check if an odd negative number is not even.",
        "input": {
          "input": -1
        },
        "expected": false
      }
    },
    "examples": [
      {
        "description": "Check if a large even number is even.",
        "input": {
          "input": 1000000
        },
        "expected": true
      },
      {
        "description": "Check if a small odd number is not even.",
        "input": {
          "input": 1
        },
        "expected": false
      },
      {
        "description": "Check if a large negative even number is even.",
        "input": {
          "input": -9999998
        },
        "expected": true
      }
    ]
  },
  {
    "define": "_functions.Dictionary.ExcludeByKey",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Excludes items in the dictionary based on their keys.",
    "parameters": {
      "input": {
        "type": "_types.Dictionary",
        "description": "The dictionary to exclude items from."
      },
      "key": {
        "type": "_types.String",
        "description": "The key to exclude."
      }
    },
    "implementation": {
      "javascript": {
        "code": "const result = {};\nfor (const [k, v] of Object.entries($$args.input)) {\n  if (k !== $$args.key) {\n    result[k] = v;\n  }\n}\nreturn result;\n"
      }
    },
    "returns": {
      "type": "_types.Dictionary",
      "description": "A new dictionary with items that do not have the specified key."
    },
    "tests": {
      "excludeByKeyPresent": {
        "description": "Exclude items with the key present in some items.",
        "input": {
          "input": {
            "a": 1,
            "b": 2
          },
          "key": "a"
        },
        "expected": {
          "b": 2
        }
      },
      "excludeByKeyNotPresent": {
        "description": "Exclude items when no items have the specified key.",
        "input": {
          "input": {
            "x": 3,
            "y": 4
          },
          "key": "z"
        },
        "expected": {
          "x": 3,
          "y": 4
        }
      },
      "excludeByKeyMixed": {
        "description": "Exclude items with a mix of presence and absence of the key.",
        "input": {
          "input": {
            "a": 1,
            "b": 2,
            "c": 4
          },
          "key": "a"
        },
        "expected": {
          "b": 2,
          "c": 4
        }
      }
    },
    "examples": [
      {
        "description": "Exclude an item in a dictionary with numeric keys.",
        "input": {
          "input": {
            "1": "one",
            "2": "two",
            "3": "three"
          },
          "key": "2"
        },
        "expected": {
          "1": "one",
          "3": "three"
        }
      },
      {
        "description": "Exclude an item in a dictionary with mixed-type values.",
        "input": {
          "input": {
            "alpha": "a",
            "beta": true,
            "gamma": 3
          },
          "key": "beta"
        },
        "expected": {
          "alpha": "a",
          "gamma": 3
        }
      },
      {
        "description": "Exclude an item from a dictionary with nested dictionaries.",
        "input": {
          "input": {
            "outer": {
              "inner": 1
            },
            "middle": 2
          },
          "key": "middle"
        },
        "expected": {
          "outer": {
            "inner": 1
          }
        }
      }
    ]
  },
  {
    "define": "_functions.List.ExcludeByRegex",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Returns a new list that excludes the elements that match the given regular expression.",
    "parameters": {
      "input": {
        "type": "_types.List",
        "description": "The list to exclude elements from."
      },
      "pattern": {
        "type": "_types.String",
        "description": "The regular expression pattern to match and exclude."
      },
      "replacement": {
        "type": "_types.Any",
        "description": "This parameter is ignored in this function. It's kept for consistency with other functions."
      }
    },
    "implementation": {
      "javascript": {
        "code": "const regex = new RegExp($$args.pattern);\nreturn $$args.input.filter((item) => !regex.test(item));\n"
      }
    },
    "returns": {
      "type": "_types.List",
      "description": "The list of elements that do not match the regular expression pattern."
    },
    "tests": {
      "excludeByRegexSimple": {
        "description": "Exclude a simple match.",
        "input": {
          "input": ["a", "b", "c", "d"],
          "pattern": "c"
        },
        "expected": ["a", "b", "d"]
      },
      "excludeByRegexFirstMatch": {
        "description": "Exclude only the first match of the pattern.",
        "input": {
          "input": ["one", "two", "three", "four"],
          "pattern": "two"
        },
        "expected": ["one", "three", "four"]
      },
      "excludeByRegexNoMatch": {
        "description": "Attempt to exclude when no match is found.",
        "input": {
          "input": ["hello", "world", "foo", "bar"],
          "pattern": "baz"
        },
        "expected": ["hello", "world", "foo", "bar"]
      }
    },
    "examples": [
      {
        "description": "Exclude elements that contain digits.",
        "input": {
          "input": ["apple", "banana1", "cherry2", "date"],
          "pattern": "\\\\d"
        },
        "expected": ["apple", "date"]
      },
      {
        "description": "Exclude elements that start with a vowel.",
        "input": {
          "input": ["apple", "banana", "orange", "grape"],
          "pattern": "^[aeiou]"
        },
        "expected": ["banana", "grape"]
      },
      {
        "description": "Exclude elements with exactly three characters.",
        "input": {
          "input": ["dog", "cat", "parrot", "fish"],
          "pattern": "^.{3}$"
        },
        "expected": ["parrot", "fish"]
      }
    ]
  },
  {
    "define": "_functions.List.Slice",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Selects the items starting at the given Start index and ending at the given End index.",
    "parameters": {
      "input": {
        "type": "_types.List",
        "description": "The list to slice."
      },
      "start": {
        "type": "_types.Number",
        "description": "The index of the first item in the slice."
      },
      "end": {
        "type": "_types.Number",
        "description": "The index where the slice ends (not including the item at this index). A negative index counts from the end of the list."
      }
    },
    "implementation": {
      "javascript": {
        "code": "return $$args.input.slice($$args.start, $$args.end);\n"
      }
    },
    "returns": {
      "type": "_types.List",
      "description": "The sliced list."
    },
    "tests": {
      "sliceNormal": {
        "description": "Select a normal slice from the list.",
        "input": {
          "input": ["a", "b", "c", "d"],
          "start": 1,
          "end": 3
        },
        "expected": ["b", "c"]
      },
      "sliceWithNegativeIndex": {
        "description": "Use a negative index to slice the list.",
        "input": {
          "input": ["a", "b", "c", "d"],
          "start": 0,
          "end": -1
        },
        "expected": ["a", "b", "c"]
      },
      "sliceFromMiddle": {
        "description": "Start the slice from the middle of the list.",
        "input": {
          "input": ["a", "b", "c", "d"],
          "start": 2
        },
        "expected": ["c", "d"]
      }
    },
    "examples": [
      {
        "description": "Slice the entire list by specifying 0 as start and no end index.",
        "input": {
          "input": ["x", "y", "z"],
          "start": 0
        },
        "expected": ["x", "y", "z"]
      },
      {
        "description": "Slice the first two elements of the list.",
        "input": {
          "input": [10, 20, 30, 40],
          "start": 0,
          "end": 2
        },
        "expected": [10, 20]
      },
      {
        "description": "Slice the last two elements using negative indices.",
        "input": {
          "input": [1, 2, 3, 4, 5],
          "start": -2,
          "end": 5
        },
        "expected": [4, 5]
      }
    ]
  },
  {
    "define": "_functions.Math.Factorial",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Calculates the factorial of a given number.",
    "parameters": {
      "n": {
        "type": "_types.Number",
        "description": "The number to calculate the factorial of."
      }
    },
    "implementation": {
      "javascript": {
        "code": "function fact(n) {\n  if (n < 0) throw new Error(\"Factorial is not defined for negative numbers\");\n  let result = 1;\n  for (let i = 2; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n}\nreturn fact($$args.n);\n"
      }
    },
    "returns": {
      "type": "_types.Number",
      "description": "The factorial of the given number."
    },
    "tests": {
      "factorialOne": {
        "description": "Calculate the factorial of 1.",
        "input": {
          "n": 1
        },
        "expected": 1
      },
      "factorialTwo": {
        "description": "Calculate the factorial of 2.",
        "input": {
          "n": 2
        },
        "expected": 2
      },
      "factorialThree": {
        "description": "Calculate the factorial of 3.",
        "input": {
          "n": 3
        },
        "expected": 6
      }
    },
    "examples": [
      {
        "description": "Calculate the factorial of 4.",
        "input": {
          "n": 4
        },
        "expected": 24
      },
      {
        "description": "Calculate the factorial of 5.",
        "input": {
          "n": 5
        },
        "expected": 120
      },
      {
        "description": "Calculate the factorial of 6.",
        "input": {
          "n": 6
        },
        "expected": 720
      }
    ]
  },
  {
    "define": "_functions.Math.FadeIn",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Calculates the fade-in value based on the given start and end values.",
    "parameters": {
      "start": {
        "type": "_types.Number",
        "description": "The starting value for the fade-in."
      },
      "end": {
        "type": "_types.Number",
        "description": "The ending value for the fade-in."
      },
      "t": {
        "type": "_types.Number",
        "description": "The position within the fade, ranging from 0 to 1."
      }
    },
    "implementation": {
      "javascript": {
        "code": "return $$args.start + ($$args.end - $$args.start) * $$args.t;\n"
      }
    },
    "returns": {
      "type": "_types.Number",
      "description": "The fade-in value based on the start, end values, and position t."
    },
    "tests": {
      "fadeInSimple": {
        "description": "Calculate a simple fade-in.",
        "input": {
          "start": 0,
          "end": 10,
          "t": 1
        },
        "expected": 10
      },
      "fadeInReverse": {
        "description": "Calculate a reverse fade-in.",
        "input": {
          "start": 10,
          "end": 0,
          "t": 1
        },
        "expected": 0
      },
      "fadeInMid": {
        "description": "Calculate a fade-in to the midpoint.",
        "input": {
          "start": 0,
          "end": 10,
          "t": 0.5
        },
        "expected": 5
      }
    },
    "examples": [
      {
        "description": "Calculate a fade-in near the start.",
        "input": {
          "start": 0,
          "end": 100,
          "t": 0.1
        },
        "expected": 10
      },
      {
        "description": "Calculate a fade-in near the end.",
        "input": {
          "start": 50,
          "end": 100,
          "t": 0.9
        },
        "expected": 95
      },
      {
        "description": "Calculate a fade-in with an equal start and end value.",
        "input": {
          "start": 25,
          "end": 25,
          "t": 0.5
        },
        "expected": 25
      }
    ]
  },
  {
    "define": "_functions.Math.FadeOut",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Fades out the input number to zero.",
    "parameters": {
      "startValue": {
        "type": "_types.Number",
        "description": "The initial value of the number to fade out."
      }
    },
    "implementation": {
      "javascript": {
        "code": "const duration = 1.0;\nlet current = $$args.startValue;\nfor (let i = 0; i < duration * 60; i++) {\n  if (current <= 0) return 0;\n  current -= $$args.startValue / duration;\n}\nreturn 0;\n"
      }
    },
    "returns": {
      "type": "_types.Number",
      "description": "The faded out value."
    },
    "tests": {
      "fadeOutSimple": {
        "description": "Fade out a simple number.",
        "input": {
          "startValue": 10
        },
        "expected": 0
      },
      "fadeOutComplex": {
        "description": "Fade out a complex number.",
        "input": {
          "startValue": 5.2
        },
        "expected": 0
      }
    },
    "examples": [
      {
        "description": "Fade out a number with decimal value.",
        "input": {
          "startValue": 3.7
        },
        "expected": 0
      },
      {
        "description": "Fade out a large number.",
        "input": {
          "startValue": 1000
        },
        "expected": 0
      },
      {
        "description": "Fade out a negative number.",
        "input": {
          "startValue": -5
        },
        "expected": 0
      }
    ]
  },
  {
    "define": "_functions.Math.FilenameIsImage",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Determines whether a file name is an image.",
    "parameters": {
      "filename": {
        "type": "_types.String",
        "description": "The file name to check."
      }
    },
    "implementation": {
      "javascript": {
        "code": "const extensions = [\".png\", \".jpg\", \".jpeg\", \".gif\"];\nreturn extensions.some(extension => $$args.filename.endsWith(extension));\n"
      }
    },
    "returns": {
      "type": "_types.Boolean",
      "description": "Whether the file name is an image or not."
    },
    "tests": {
      "filenameIsImageSimple": {
        "description": "Check a simple image file.",
        "input": {
          "filename": "image.jpg"
        },
        "expected": true
      },
      "filenameIsImageNotImage": {
        "description": "Check a non-image file.",
        "input": {
          "filename": "document.txt"
        },
        "expected": false
      }
    },
    "examples": [
      {
        "description": "Check an image file with a .png extension.",
        "input": {
          "filename": "picture.png"
        },
        "expected": true
      },
      {
        "description": "Check an image file with a .gif extension.",
        "input": {
          "filename": "animation.gif"
        },
        "expected": true
      },
      {
        "description": "Check a non-image file with a .pdf extension.",
        "input": {
          "filename": "file.pdf"
        },
        "expected": false
      }
    ]
  },
  {
    "define": "_functions.Dictionary.FindByKey",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Finds the value in a dictionary that corresponds to the given key.",
    "parameters": {
      "dictionary": {
        "type": "_types.Dictionary",
        "description": "The dictionary to search."
      },
      "key": {
        "type": "_types.String",
        "description": "The key to find the value for."
      }
    },
    "implementation": {
      "javascript": {
        "code": "return $$args.dictionary[$$args.key];\n"
      }
    },
    "returns": {
      "type": "_types.Dictionary",
      "description": "The value associated with the given key, or undefined if not found."
    },
    "tests": {
      "findByKeySimple": {
        "description": "Find a simple value.",
        "input": {
          "dictionary": {
            "foo": "bar",
            "baz": "qux"
          },
          "key": "foo"
        },
        "expected": "bar"
      },
      "findByKeyNonExistingKey": {
        "description": "Attempt to find a non-existent key.",
        "input": {
          "dictionary": {
            "foo": "bar",
            "baz": "qux"
          },
          "key": "notfound"
        },
        "expected": null
      }
    },
    "examples": [
      {
        "description": "Retrieve a value from a dictionary with integer keys.",
        "input": {
          "dictionary": {
            "1": "one",
            "2": "two"
          },
          "key": "1"
        },
        "expected": "one"
      },
      {
        "description": "Handle a dictionary with nested objects.",
        "input": {
          "dictionary": {
            "outer": {
              "inner": "value"
            }
          },
          "key": "outer"
        },
        "expected": {
          "inner": "value"
        }
      },
      {
        "description": "Retrieve a value from a dictionary with mixed data types as values.",
        "input": {
          "dictionary": {
            "stringKey": "stringValue",
            "numberKey": 123,
            "boolKey": true
          },
          "key": "numberKey"
        },
        "expected": 123
      }
    ]
  },
  {
    "define": "_functions.String.FindByRegex",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Finds the first match of a regular expression in a given text.",
    "parameters": {
      "text": {
        "type": "_types.String",
        "description": "The text to search for matches."
      },
      "pattern": {
        "type": "_types.String",
        "description": "The regular expression pattern to find."
      },
      "group": {
        "type": "_types.Any",
        "description": "The group number to return the match from (optional)."
      }
    },
    "implementation": {
      "javascript": {
        "code": "const regex = new RegExp($$args.pattern);\nconst match = $$args.text.match(regex);\nif (!match) return null;\nif ($$args.group !== undefined) {\n  return match[$$args.group] || null;\n} else {\n  return match[0];\n}\n"
      }
    },
    "returns": {
      "type": "_types.String",
      "description": "The first match of the regular expression."
    },
    "tests": {
      "findByRegexSimple": {
        "description": "Find the first match of a simple pattern.",
        "input": {
          "text": "hello world",
          "pattern": "world"
        },
        "expected": "world"
      },
      "findByRegexGroup": {
        "description": "Find the first match of a pattern and return the group.",
        "input": {
          "text": "hello john smith",
          "pattern": "(\\w+) (\\w+)",
          "group": 1
        },
        "expected": "hello"
      },
      "findByRegexNoMatch": {
        "description": "Attempt to find when no match is found.",
        "input": {
          "text": "hello world",
          "pattern": "foo"
        },
        "expected": null
      },
      "findByRegexNamedGroup": {
        "description": "Find the first match of a pattern with a named group.",
        "input": {
          "text": "hello john smith",
          "pattern": "(?<first>\\w+) (?<last>\\w+)",
          "group": "groups.first"
        },
        "expected": null
      }
    },
    "examples": [
      {
        "description": "Find a date in the format YYYY-MM-DD.",
        "input": {
          "text": "The event is on 2023-10-01.",
          "pattern": "\\d{4}-\\d{2}-\\d{2}"
        },
        "expected": "2023-10-01"
      },
      {
        "description": "Find an email address.",
        "input": {
          "text": "Please contact us at support@example.com.",
          "pattern": "\\S+@\\S+\\.com"
        },
        "expected": "support@example.com"
      },
      {
        "description": "Find a word with digits.",
        "input": {
          "text": "The product code is AB123.",
          "pattern": "\\b[\\w]+\\d+\\b"
        },
        "expected": "AB123"
      }
    ]
  },
  {
    "define": "_functions.List.FirstItem",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Returns the first item of a given list.",
    "parameters": {
      "input": {
        "type": "_types.List",
        "description": "The list to get the first item from."
      }
    },
    "implementation": {
      "javascript": {
        "code": "return $$args.input[0];\n"
      }
    },
    "returns": {
      "type": "_types.Any",
      "description": "The first item in the list, or undefined if the list is empty."
    },
    "tests": {
      "firstItemSimple": {
        "description": "Get the first item of a simple list.",
        "input": {
          "input": ["a", "b", "c"]
        },
        "expected": "a"
      },
      "firstItemEmptyList": {
        "description": "Attempt to get the first item from an empty list.",
        "input": {
          "input": []
        },
        "expected": null
      },
      "firstItemNumberList": {
        "description": "Get the first item of a list of numbers.",
        "input": {
          "input": [1, 2, 3]
        },
        "expected": 1
      },
      "firstItemMixedList": {
        "description": "Get the first item of a list with mixed types.",
        "input": {
          "input": [true, "b", 3]
        },
        "expected": true
      }
    },
    "examples": [
      {
        "description": "Get the first item of a list with negative numbers.",
        "input": {
          "input": [-1, -2, -3]
        },
        "expected": -1
      },
      {
        "description": "Get the first item of a list with nested lists.",
        "input": {
          "input": [
            ["a", "b"],
            ["c", "d"]
          ]
        },
        "expected": ["a", "b"]
      },
      {
        "description": "Get the first item of a list with boolean values.",
        "input": {
          "input": [false, true]
        },
        "expected": false
      }
    ]
  },
  {
    "define": "_functions.List.Fisher",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Calculates the Fisher-Yates shuffle of a list.",
    "parameters": {
      "list": {
        "type": "_types.List",
        "description": "The list to shuffle."
      }
    },
    "implementation": {
      "javascript": {
        "code": "const array = $$args.list.slice();\nfor (let i = array.length - 1; i > 0; i--) {\n  const j = Math.floor(Math.random() * (i + 1));\n  [array[i], array[j]] = [array[j], array[i]];\n}\nreturn array;\n"
      }
    },
    "returns": {
      "type": "_types.List",
      "description": "The shuffled list."
    },
    "tests": {
      "fisherShuffleEmptyList": {
        "description": "Shuffle an empty list should return an empty list.",
        "input": {
          "list": []
        },
        "expected": []
      },
      "fisherShuffleSingleItem": {
        "description": "Shuffle a list with a single item should return the same list.",
        "input": {
          "list": [42]
        },
        "expected": [42]
      }
    },
    "examples": [
      {
        "description": "Shuffle a list of strings.",
        "input": {
          "list": ["apple", "banana", "cherry"]
        },
        "expected": ["banana", "apple", "cherry"]
      },
      {
        "description": "Shuffle a list of mixed data types.",
        "input": {
          "list": [1, "two", 3, true]
        },
        "expected": ["two", 1, 3, true]
      },
      {
        "description": "Shuffle a longer list of numbers.",
        "input": {
          "list": [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]
        },
        "expected": [90, 10, 70, 20, 80, 50, 60, 30, 100, 40]
      }
    ]
  },
  {
    "define": "_functions.List.Flatten",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Flattens a nested list into a single list.",
    "parameters": {
      "list": {
        "type": "_types.List",
        "description": "The nested list to flatten.",
        "items": {
          "type": "_types.Unknown"
        }
      }
    },
    "implementation": {
      "javascript": {
        "code": "const flatten = (arr) => arr.reduce((flat, toFlatten) => \n  flat.concat(Array.isArray(toFlatten) ? flatten(toFlatten) : toFlatten), []);\nreturn flatten($$args.list);\n"
      }
    },
    "returns": {
      "type": "_types.List",
      "description": "The flattened list.",
      "items": {
        "type": "_types.Unknown"
      }
    },
    "tests": {
      "flattenSimple": {
        "description": "Flatten a simple nested list.",
        "input": {
          "list": [
            [1, 2],
            [3, 4]
          ]
        },
        "expected": [1, 2, 3, 4]
      },
      "flattenComplex": {
        "description": "Flatten a complex nested list.",
        "input": {
          "list": [1, [2, [3, [4]]]]
        },
        "expected": [1, 2, 3, 4]
      },
      "flattenEmptyList": {
        "description": "Flatten an empty list.",
        "input": {
          "list": []
        },
        "expected": []
      },
      "flattenAlreadyFlat": {
        "description": "Flatten an already flat list.",
        "input": {
          "list": [1, 2, 3, 4]
        },
        "expected": [1, 2, 3, 4]
      }
    },
    "examples": [
      {
        "description": "Flatten a list with mixed data types.",
        "input": {
          "list": [1, ["a", [true, [null]]]]
        },
        "expected": [1, "a", true, null]
      },
      {
        "description": "Flatten a deeper nested list.",
        "input": {
          "list": [[[[1]]], 2, [[[3]]]]
        },
        "expected": [1, 2, 3]
      },
      {
        "description": "Flatten a list with multiple empty nested lists.",
        "input": {
          "list": [1, [], [2], [[]], [3, [4, []]]]
        },
        "expected": [1, 2, 3, 4]
      }
    ]
  },
  {
    "define": "_functions.Math.Floor",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Rounds a number down to the nearest integer.",
    "parameters": {
      "value": {
        "type": "_types.Number",
        "description": "The number to round down."
      }
    },
    "implementation": {
      "javascript": {
        "code": "return Math.floor($$args.value);\n"
      }
    },
    "returns": {
      "type": "_types.Number",
      "description": "The rounded down value."
    },
    "tests": {
      "floorZero": {
        "description": "Round 0 down.",
        "input": {
          "value": 0
        },
        "expected": 0
      },
      "floorPositive": {
        "description": "Round a positive number down.",
        "input": {
          "value": 3.5
        },
        "expected": 3
      },
      "floorNegative": {
        "description": "Round a negative number down.",
        "input": {
          "value": -4.7
        },
        "expected": -5
      }
    },
    "examples": [
      {
        "description": "Round a positive decimal number down.",
        "input": {
          "value": 5.9
        },
        "expected": 5
      },
      {
        "description": "Round a negative decimal number slightly above an integer down.",
        "input": {
          "value": -2.1
        },
        "expected": -3
      },
      {
        "description": "Round a small positive decimal number down.",
        "input": {
          "value": 0.8
        },
        "expected": 0
      }
    ]
  },
  {
    "define": "_functions.Any.Forecast",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Returns the forecasted value based on the given historical data.",
    "parameters": {
      "historicalData": {
        "type": "_types.List",
        "description": "The historical data used for forecasting."
      }
    },
    "implementation": {
      "javascript": {
        "code": "// Simple forecast based on the average of historical data\nconst sum = $$args.historicalData.reduce((acc, cur) => acc + cur, 0);\nreturn sum / $$args.historicalData.length;\n"
      }
    },
    "returns": {
      "type": "_types.Number",
      "description": "The forecasted value based on historical data."
    },
    "tests": {
      "forecastAverage": {
        "description": "Forecast the average of the historical data.",
        "input": {
          "historicalData": [10, 20, 30]
        },
        "expected": 20
      },
      "forecastSingleData": {
        "description": "Forecast with only one data point.",
        "input": {
          "historicalData": [5]
        },
        "expected": 5
      }
    },
    "examples": [
      {
        "description": "Forecast with multiple data points including zero.",
        "input": {
          "historicalData": [10, 0, 20, 40]
        },
        "expected": 17.5
      },
      {
        "description": "Forecast with negative and positive values.",
        "input": {
          "historicalData": [-10, 10, -20, 20]
        },
        "expected": 0
      },
      {
        "description": "Forecast with all identical data points.",
        "input": {
          "historicalData": [3, 3, 3, 3]
        },
        "expected": 3
      }
    ]
  },
  {
    "define": "_functions.Math.FormatDatetimeLocal",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Formats a date and time according to the given pattern.",
    "parameters": {
      "datetime": {
        "type": "_types.String",
        "description": "The date and time to format."
      },
      "pattern": {
        "type": "_types.String",
        "description": "The pattern to use for formatting the date and time."
      }
    },
    "implementation": {
      "javascript": {
        "code": "const dt = new Date($$args.datetime);\nreturn dt.toLocaleString();\n"
      }
    },
    "returns": {
      "type": "_types.String",
      "description": "The formatted date and time."
    },
    "tests": {
      "formatDatetimeLocalSimple": {
        "description": "Format a simple date.",
        "input": {
          "datetime": "2022-01-01T12:00:00.000Z",
          "pattern": ""
        },
        "expected": "1/1/2022, 12:00:00 PM"
      },
      "formatDatetimeLocalComplex": {
        "description": "Format a complex date with timezone.",
        "input": {
          "datetime": "2022-01-01T12:00:00.000+02:00",
          "pattern": ""
        },
        "expected": "1/1/2022, 10:00:00 AM"
      }
    },
    "examples": [
      {
        "description": "Format New Year's date without a pattern.",
        "input": {
          "datetime": "2022-01-01T00:00:00.000Z",
          "pattern": ""
        },
        "expected": "12/31/2021, 7:00:00 PM"
      },
      {
        "description": "Format a leap year date.",
        "input": {
          "datetime": "2020-02-29T12:00:00.000Z",
          "pattern": ""
        },
        "expected": "2/29/2020, 7:00:00 AM"
      },
      {
        "description": "Format a date at the end of the year.",
        "input": {
          "datetime": "2023-12-31T23:59:59.999Z",
          "pattern": ""
        },
        "expected": "12/31/2023, 6:59:59 PM"
      }
    ]
  },
  {
    "define": "_functions.String.FormatDatetimeWithTimezone",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Formats a date and time string with the given timezone.",
    "parameters": {
      "datetime": {
        "type": "_types.String",
        "description": "The date and time string to format."
      },
      "timezone": {
        "type": "_types.String",
        "description": "The timezone to apply to the datetime."
      }
    },
    "implementation": {
      "javascript": {
        "code": "const dt = new Date($$args.datetime);\nreturn dt.toLocaleString('en-US', { timeZone: $$args.timezone });\n"
      }
    },
    "returns": {
      "type": "_types.String",
      "description": "The formatted date and time string with the given timezone."
    },
    "tests": {
      "formatDatetimeWithTimezoneSimple": {
        "description": "Format a simple datetime.",
        "input": {
          "datetime": "2022-01-01T00:00:00Z",
          "timezone": "America/New_York"
        },
        "expected": "12/31/2021, 7:00:00 PM"
      },
      "formatDatetimeWithTimezoneNoZoneOffset": {
        "description": "Format a datetime with no zone offset.",
        "input": {
          "datetime": "2022-01-01T00:00:00+02:00",
          "timezone": "Etc/GMT-1"
        },
        "expected": "12/31/2021, 11:00:00 PM"
      }
    },
    "examples": [
      {
        "description": "Format a datetime with a complex timezone.",
        "input": {
          "datetime": "2022-07-04T12:00:00Z",
          "timezone": "Asia/Kolkata"
        },
        "expected": "7/4/2022, 5:30:00 PM"
      },
      {
        "description": "Format a datetime during daylight saving time.",
        "input": {
          "datetime": "2022-06-01T00:00:00Z",
          "timezone": "Europe/London"
        },
        "expected": "6/1/2022, 1:00:00 AM"
      },
      {
        "description": "Format a datetime with a negative timezone offset.",
        "input": {
          "datetime": "2022-01-01T12:00:00Z",
          "timezone": "America/Los_Angeles"
        },
        "expected": "1/1/2022, 4:00:00 AM"
      }
    ]
  },
  {
    "define": "_functions.Number.FutureValue",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Calculates the future value of an investment based on the principal amount, interest rate, and time period.",
    "parameters": {
      "principalAmount": {
        "type": "_types.Number",
        "description": "The initial principal amount of the investment."
      },
      "interestRate": {
        "type": "_types.Number",
        "description": "The annual interest rate in decimal form (e.g., 0.05 for 5%)."
      },
      "timePeriod": {
        "type": "_types.Number",
        "description": "The number of time periods the investment is held."
      }
    },
    "implementation": {
      "javascript": {
        "code": "return $$args.principalAmount * Math.pow(1 + $$args.interestRate, $$args.timePeriod);\n"
      }
    },
    "returns": {
      "type": "_types.Number",
      "description": "The future value of the investment."
    },
    "tests": {
      "futureValueSimple": {
        "description": "Calculate future value for a simple case.",
        "input": {
          "principalAmount": 1000,
          "interestRate": 0.1,
          "timePeriod": 5
        },
        "expected": 1610.5100000000004
      },
      "futureValueZeroRate": {
        "description": "Calculate future value with zero interest rate.",
        "input": {
          "principalAmount": 5000,
          "interestRate": 0,
          "timePeriod": 10
        },
        "expected": 5000
      },
      "futureValueLongTerm": {
        "description": "Calculate future value for a long-term investment.",
        "input": {
          "principalAmount": 10000,
          "interestRate": 0.05,
          "timePeriod": 20
        },
        "expected": 26532.97705144421
      },
      "futureValueNegativeRate": {
        "description": "Calculate future value with a negative interest rate.",
        "input": {
          "principalAmount": 2000,
          "interestRate": -0.02,
          "timePeriod": 8
        },
        "expected": 1701.5260451635706
      }
    },
    "examples": [
      {
        "description": "Calculate future value for a short-term investment.",
        "input": {
          "principalAmount": 1500,
          "interestRate": 0.07,
          "timePeriod": 2
        },
        "expected": 1714.5
      },
      {
        "description": "Calculate future value with a high interest rate.",
        "input": {
          "principalAmount": 3000,
          "interestRate": 0.15,
          "timePeriod": 3
        },
        "expected": 4566.75
      },
      {
        "description": "Calculate future value with a fractional time period.",
        "input": {
          "principalAmount": 2500,
          "interestRate": 0.04,
          "timePeriod": 1.5
        },
        "expected": 2632.8999999999996
      }
    ]
  },
  {
    "define": "_functions.Number.Gamma",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Calculates the gamma function, which is the extension of the factorial function to real and complex numbers.",
    "parameters": {
      "x": {
        "type": "_types.Number",
        "description": "The input value to calculate the gamma function for."
      }
    },
    "implementation": {
      "javascript": {
        "code": "function gamma(n) {\n    if (n === 0) return Infinity;\n    if (n < 0) {\n        if (Number.isInteger(n)) return NaN;\n        return (Math.PI / (Math.sin(Math.PI * n) * gamma(1 - n)));\n    } else {\n        let p = [0.99999999999980993,\n        676.5203681218851, -1259.1392167224028, 771.32342877765313,\n        -176.61502916214059, 12.507343278686905, -0.13857109526572012,\n        9.9843695780195716e-6, 1.5056327351493116e-7];\n        n += 1;\n        let y = p[0];\n        for (let i = 1; i < p.length; i++) {\n            y += p[i] / (n + i);\n        }\n        let t = n + p.length - 2.5;\n        return Math.sqrt(2 * Math.PI) * Math.pow(t, (n - 0.5)) * Math.exp(-t) * y;\n    }\n}\nreturn gamma($$args.x);\n"
      }
    },
    "returns": {
      "type": "_types.Number",
      "description": "The value of the gamma function for the input."
    },
    "tests": {
      "gammaPositiveInteger": {
        "description": "Calculate gamma function for a positive integer.",
        "input": {
          "x": 5
        },
        "expected": 94.94291348688645
      },
      "gammaFraction": {
        "description": "Calculate gamma function for a fraction.",
        "input": {
          "x": 3.5
        },
        "expected": 8.37174051629619
      }
    },
    "examples": [
      {
        "description": "Calculate gamma function for a negative non-integer.",
        "input": {
          "x": -2.5
        },
        "expected": -0.9453087204829419
      },
      {
        "description": "Calculate gamma function for a positive fraction less than 1.",
        "input": {
          "x": 0.5
        },
        "expected": 1.772453850905516
      },
      {
        "description": "Calculate gamma function for a large positive number.",
        "input": {
          "x": 10
        },
        "expected": 362880.0000000002
      }
    ]
  },
  {
    "define": "_functions.Number.Gauss",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Calculates the probability density function of a normal distribution (Gaussian distribution) at a given point or points.",
    "parameters": {
      "x": {
        "type": "_types.Number",
        "description": "The point(s) at which to calculate the Gaussian distribution."
      },
      "mean": {
        "type": "_types.Number",
        "description": "The mean of the distribution."
      },
      "standard_deviation": {
        "type": "_types.Number",
        "description": "The standard deviation of the distribution."
      }
    },
    "implementation": {
      "javascript": {
        "code": "const numerator = Math.exp(-0.5 * Math.pow(($$args.x - $$args.mean) / $$args.standard_deviation, 2));\nconst denominator = $$args.standard_deviation * Math.sqrt(2 * Math.PI);\nreturn numerator / denominator;\n"
      }
    },
    "returns": {
      "type": "_types.Number",
      "description": "The probability density function of a normal distribution at the given point(s)."
    },
    "tests": {
      "gaussAtMean": {
        "description": "Calculate the Gaussian distribution at the mean.",
        "input": {
          "x": 0,
          "mean": 0,
          "standard_deviation": 1
        },
        "expected": 0.3989422804014327
      },
      "gaussPositiveX": {
        "description": "Calculate the Gaussian distribution at a positive x value.",
        "input": {
          "x": 2,
          "mean": 0,
          "standard_deviation": 1
        },
        "expected": 0.05399096651318806
      },
      "gaussNegativeX": {
        "description": "Calculate the Gaussian distribution at a negative x value.",
        "input": {
          "x": -1,
          "mean": 0,
          "standard_deviation": 1
        },
        "expected": 0.24197072451914337
      },
      "gaussDifferentMean": {
        "description": "Calculate the Gaussian distribution at a point with a different mean.",
        "input": {
          "x": 1,
          "mean": 2,
          "standard_deviation": 1
        },
        "expected": 0.24197072451914337
      }
    },
    "examples": [
      {
        "description": "Calculate the Gaussian distribution at a point x=3 with mean=0 and standard deviation=1.",
        "input": {
          "x": 3,
          "mean": 0,
          "standard_deviation": 1
        },
        "expected": 0.0044318484119380075
      },
      {
        "description": "Calculate the Gaussian distribution at a point x=0 with mean=1 and standard deviation=2.",
        "input": {
          "x": 0,
          "mean": 1,
          "standard_deviation": 2
        },
        "expected": 0.17603266338214976
      },
      {
        "description": "Calculate the Gaussian distribution at a point x=-2 with mean=-1 and standard deviation=1.",
        "input": {
          "x": -2,
          "mean": -1,
          "standard_deviation": 1
        },
        "expected": 0.24197072451914337
      }
    ]
  },
  {
    "define": "_functions.Math.GenerateRange",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Generates a list of numbers starting from the given Start and ending at the given End.",
    "parameters": {
      "start": {
        "type": "_types.Number",
        "description": "The starting number."
      },
      "end": {
        "type": "_types.Number",
        "description": "The ending number. If the end is a negative index, it will generate a range up to that negative value."
      }
    },
    "implementation": {
      "javascript": {
        "code": "let result = [];\nif ($$args.end < 0) {\n  for (let i = $$args.start; i >= $$args.end; i--) {\n    result.push(i);\n  }\n} else {\n  for (let i = $$args.start; i <= $$args.end; i++) {\n    result.push(i);\n  }\n}\nreturn result;\n"
      }
    },
    "returns": {
      "type": "_types.List",
      "description": "A list of numbers from start to end."
    },
    "tests": {
      "generateRangeSimple": {
        "description": "Generate a range with positive indices.",
        "input": {
          "start": 0,
          "end": 5
        },
        "expected": [0, 1, 2, 3, 4, 5]
      },
      "generateRangeNegativeEnd": {
        "description": "Generate a range with negative end value.",
        "input": {
          "start": 1,
          "end": -2
        },
        "expected": [1, 0, -1, -2]
      },
      "generateRangeStartAndEndEqual": {
        "description": "Generate a range where start and end are equal.",
        "input": {
          "start": 5,
          "end": 5
        },
        "expected": [5]
      }
    },
    "examples": [
      {
        "description": "Generate a range decrementing from 5 to 0.",
        "input": {
          "start": 5,
          "end": 0
        },
        "expected": [5, 4, 3, 2, 1, 0]
      },
      {
        "description": "Generate a range starting from -3 and ending at 2.",
        "input": {
          "start": -3,
          "end": 2
        },
        "expected": [-3, -2, -1, 0, 1, 2]
      },
      {
        "description": "Generate a range where start is greater than end resulting in a decrementing range.",
        "input": {
          "start": 4,
          "end": 1
        },
        "expected": [4, 3, 2, 1]
      }
    ]
  },
  {
    "define": "_functions.String.GenerateUUID",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Generates a unique identifier (UUID).",
    "parameters": {},
    "implementation": {
      "javascript": {
        "code": "return crypto.randomUUID();\n"
      }
    },
    "returns": {
      "type": "_types.String",
      "description": "The generated UUID."
    },
    "tests": null,
    "examples": [
      {
        "description": "Generate UUID with example usage 1.",
        "input": {},
        "expected": "e.g., a79e4ce2-5745-4d6d-b53d-129462d2e3ad"
      },
      {
        "description": "Generate UUID for tracking a user session.",
        "input": {},
        "expected": "e.g., d83954f2-312b-4be1-901c-ff4d8d3c87e1"
      },
      {
        "description": "Generate UUID for identifying a transaction.",
        "input": {},
        "expected": "e.g., ff3b5f96-b300-468b-ad7e-bd7dfed93e2a"
      }
    ]
  },
  {
    "define": "_functions.Number.Geomean",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Calculates the geometric mean of a list of numbers.",
    "parameters": {
      "numbers": {
        "type": "_types.List",
        "description": "The list of numbers to calculate the geometric mean of."
      }
    },
    "implementation": {
      "javascript": {
        "code": "const geomean = nums => nums.reduce((acc, val) => acc * val, 1) ** (1 / nums.length);\nreturn geomean($$args.numbers);\n"
      }
    },
    "returns": {
      "type": "_types.Number",
      "description": "The geometric mean of the given list of numbers."
    },
    "tests": {
      "geomeanSimple": {
        "description": "Calculate the geometric mean of a simple list of numbers.",
        "input": {
          "numbers": [1, 2, 3, 4, 5]
        },
        "expected": 2.605171084697352
      },
      "geomeanNegativeNumbers": {
        "description": "Calculate the geometric mean of a list with negative and positive numbers.",
        "input": {
          "numbers": [-2, -1, 1, 2]
        },
        "expected": 1.4142135623730951
      },
      "geomeanFractionalNumbers": {
        "description": "Calculate the geometric mean of a list with fractional numbers.",
        "input": {
          "numbers": [0.5, 1.5, 2.5, 3.5]
        },
        "expected": 1.6005429364718398
      },
      "geomeanLargeNumbers": {
        "description": "Calculate the geometric mean of a list with large numbers.",
        "input": {
          "numbers": [10000, 100000, 1000000]
        },
        "expected": 99999.99999999994
      }
    },
    "examples": [
      {
        "description": "Calculate the geometric mean of a list with small positive numbers.",
        "input": {
          "numbers": [0.1, 0.2, 0.3, 0.4]
        },
        "expected": 0.22360679774997896
      },
      {
        "description": "Calculate the geometric mean of a list with identical numbers.",
        "input": {
          "numbers": [5, 5, 5, 5]
        },
        "expected": 5
      },
      {
        "description": "Calculate the geometric mean of a single-element list.",
        "input": {
          "numbers": [42]
        },
        "expected": 42
      }
    ]
  },
  {
    "define": "_functions.Date.GetDatetimeComponent",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Returns the specified component of a datetime.",
    "parameters": {
      "datetime": {
        "type": "_types.String",
        "description": "The datetime to get the component from in ISO format."
      },
      "component": {
        "type": "_types.String",
        "description": "The desired component (year, month, day, hour, minute, second)."
      }
    },
    "implementation": {
      "javascript": {
        "code": "let value = new Date($$args.datetime);\nswitch ($$args.component) {\n  case 'year':\n    return value.getFullYear();\n  case 'month':\n    return value.getMonth() + 1; // months are 0-based in JS\n  case 'day':\n    return value.getDate();\n  case 'hour':\n    return value.getUTCHours();\n  case 'minute':\n    return value.getUTCMinutes();\n  case 'second':\n    return value.getUTCSeconds();\n  default:\n    throw new Error('Invalid component');\n}\n"
      }
    },
    "returns": {
      "type": "_types.Number",
      "description": "The specified component of the datetime."
    },
    "tests": {
      "getDatetimeYear": {
        "description": "Get the year component.",
        "input": {
          "datetime": "2022-07-25T14:30:00.000Z",
          "component": "year"
        },
        "expected": 2022
      },
      "getDatetimeMonth": {
        "description": "Get the month component.",
        "input": {
          "datetime": "2022-07-25T14:30:00.000Z",
          "component": "month"
        },
        "expected": 7
      },
      "getDatetimeDay": {
        "description": "Get the day component.",
        "input": {
          "datetime": "2022-07-25T14:30:00.000Z",
          "component": "day"
        },
        "expected": 25
      },
      "getDatetimeHour": {
        "description": "Get the hour component.",
        "input": {
          "datetime": "2022-07-25T14:30:00.000Z",
          "component": "hour"
        },
        "expected": 14
      },
      "getDatetimeMinute": {
        "description": "Get the minute component.",
        "input": {
          "datetime": "2022-07-25T14:30:00.000Z",
          "component": "minute"
        },
        "expected": 30
      },
      "getDatetimeSecond": {
        "description": "Get the second component.",
        "input": {
          "datetime": "2022-07-25T14:30:00.000Z",
          "component": "second"
        },
        "expected": 0
      }
    },
    "examples": [
      {
        "description": "Get the year component of a future date.",
        "input": {
          "datetime": "2030-01-01T00:00:00.000Z",
          "component": "year"
        },
        "expected": 2030
      },
      {
        "description": "Get the month component of a leap year date.",
        "input": {
          "datetime": "2024-02-29T12:00:00.000Z",
          "component": "month"
        },
        "expected": 2
      },
      {
        "description": "Get the second component of a precise time.",
        "input": {
          "datetime": "2022-07-25T14:30:45.123Z",
          "component": "second"
        },
        "expected": 45
      }
    ]
  },
  {
    "define": "_functions.Dictionary.GetKeys",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Returns the keys of an object.",
    "parameters": {
      "object": {
        "type": "_types.Dictionary",
        "description": "The object to get the keys of."
      }
    },
    "implementation": {
      "javascript": {
        "code": "return Object.keys($$args.object);\n"
      }
    },
    "returns": {
      "type": "_types.List",
      "description": "The keys of the object."
    },
    "tests": {
      "twoKeys": {
        "description": "Test with an object with two keys.",
        "input": {
          "object": {
            "a": 1,
            "b": 2
          }
        },
        "expected": ["a", "b"]
      },
      "emptyObject": {
        "description": "Test with an empty object.",
        "input": {
          "object": {}
        },
        "expected": []
      }
    },
    "examples": [
      {
        "description": "Get keys from an object with one key.",
        "input": {
          "object": {
            "key1": "value1"
          }
        },
        "expected": ["key1"]
      },
      {
        "description": "Get keys from an object with nested objects.",
        "input": {
          "object": {
            "key1": {
              "nestedKey1": "nestedValue1"
            },
            "key2": "value2"
          }
        },
        "expected": ["key1", "key2"]
      },
      {
        "description": "Get keys from an object with mixed key types.",
        "input": {
          "object": {
            "numKey": 1,
            "strKey": "string",
            "boolKey": true
          }
        },
        "expected": ["numKey", "strKey", "boolKey"]
      }
    ]
  },
  {
    "define": "_functions.Number.IsGreaterThan",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Check if a number is greater than another number.",
    "parameters": {
      "a": {
        "type": "_types.Number",
        "description": "The first number to be compared."
      },
      "b": {
        "type": "_types.Number",
        "description": "The second number to be compared."
      }
    },
    "implementation": {
      "javascript": {
        "code": "return $$args.a > $$args.b;\n"
      }
    },
    "returns": {
      "type": "_types.Boolean",
      "description": "Returns true if a is greater than b, and false otherwise."
    },
    "tests": {
      "greaterThanTest": {
        "description": "Check if a number is greater than another number.",
        "input": {
          "a": 5,
          "b": 2
        },
        "expected": true
      }
    },
    "examples": [
      {
        "description": "Check if 10 is greater than 8.",
        "input": {
          "a": 10,
          "b": 8
        },
        "expected": true
      },
      {
        "description": "Check if 0 is greater than -1.",
        "input": {
          "a": 0,
          "b": -1
        },
        "expected": true
      },
      {
        "description": "Check if 3 is greater than 5.",
        "input": {
          "a": 3,
          "b": 5
        },
        "expected": false
      }
    ]
  },
  {
    "define": "_functions.Math.GreaterThanOrEqual",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Check if a number is greater than or equal to another number.",
    "parameters": {
      "a": {
        "type": "_types.Number",
        "description": "The first number to be compared."
      },
      "b": {
        "type": "_types.Number",
        "description": "The second number to be compared."
      }
    },
    "implementation": {
      "javascript": {
        "code": "return $$args.a >= $$args.b;\n"
      }
    },
    "returns": {
      "type": "_types.Boolean",
      "description": "Returns true if a is greater than or equal to b, and false otherwise."
    },
    "tests": {
      "greaterThanOrEqualTest": {
        "description": "Check if a number is greater than or equal to another number.",
        "input": {
          "a": 5,
          "b": 2
        },
        "expected": true
      }
    },
    "examples": [
      {
        "description": "Check if a negative number is greater than or equal to another negative number.",
        "input": {
          "a": -1,
          "b": -5
        },
        "expected": true
      },
      {
        "description": "Check if two equal numbers return true.",
        "input": {
          "a": 3,
          "b": 3
        },
        "expected": true
      },
      {
        "description": "Check if a number is not greater than or equal to a larger number.",
        "input": {
          "a": 4,
          "b": 10
        },
        "expected": false
      }
    ]
  },
  {
    "define": "_functions.Math.GreatestCommonDivisor",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Returns the greatest common divisor of two numbers.",
    "parameters": {
      "a": {
        "type": "_types.Number",
        "description": "The first number."
      },
      "b": {
        "type": "_types.Number",
        "description": "The second number."
      }
    },
    "implementation": {
      "javascript": {
        "code": "function gcd(a, b) {\n  if (b === 0) return a;\n  return gcd(b, a % b);\n}\nreturn gcd($$args.a, $$args.b);\n"
      }
    },
    "returns": {
      "type": "_types.Number",
      "description": "The greatest common divisor."
    },
    "tests": {
      "gcdSimple": {
        "description": "Calculate the GCD of two simple numbers.",
        "input": {
          "a": 12,
          "b": 15
        },
        "expected": 3
      },
      "gcdPrime": {
        "description": "Calculate the GCD of two prime numbers.",
        "input": {
          "a": 23,
          "b": 37
        },
        "expected": 1
      }
    },
    "examples": [
      {
        "description": "Calculate the GCD of two even numbers.",
        "input": {
          "a": 48,
          "b": 18
        },
        "expected": 6
      },
      {
        "description": "Calculate the GCD where one number is zero.",
        "input": {
          "a": 0,
          "b": 5
        },
        "expected": 5
      },
      {
        "description": "Calculate the GCD of a negative and a positive number.",
        "input": {
          "a": -24,
          "b": 18
        },
        "expected": 6
      }
    ]
  },
  {
    "define": "_functions.String.Green",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Returns the result of a given input.",
    "parameters": {
      "input": {
        "type": "_types.String",
        "description": "The value to get the green color code from."
      }
    },
    "implementation": {
      "javascript": {
        "code": "return `#34C759`\n"
      }
    },
    "returns": {
      "type": "_types.String",
      "description": "The green color code in hexadecimal format."
    },
    "tests": {
      "greenColorCode": {
        "description": "Get the green color code.",
        "input": {
          "input": null
        },
        "expected": "#34C759"
      },
      "greenColorCodeWithInput": {
        "description": "Get the green color code with an input value.",
        "input": {
          "input": "Hello, World!"
        },
        "expected": "#34C759"
      }
    },
    "examples": [
      {
        "description": "Get the green color code with a numeric input string.",
        "input": {
          "input": "12345"
        },
        "expected": "#34C759"
      },
      {
        "description": "Get the green color code with an empty input string.",
        "input": {
          "input": ""
        },
        "expected": "#34C759"
      },
      {
        "description": "Get the green color code with a special characters input.",
        "input": {
          "input": "@#!$%"
        },
        "expected": "#34C759"
      }
    ]
  },
  {
    "define": "_functions.Math.HSL",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Converts Hue, Saturation, and Lightness values into an RGB color.",
    "parameters": {
      "hue": {
        "type": "_types.Number",
        "description": "The hue value (0-360 degrees)."
      },
      "saturation": {
        "type": "_types.Number",
        "description": "The saturation value (0-1.0)."
      },
      "lightness": {
        "type": "_types.Number",
        "description": "The lightness value (0-1.0)."
      }
    },
    "implementation": {
      "javascript": {
        "code": "function hslToRgb(h, s, l) {\n  h = h / 360;\n  let r, g, b;\n\n  if (s == 0) {\n    r = g = b = l;\n  } else {\n    const hue2rgb = function(p, q, t) {\n      if (t < 0) t += 1;\n      if (t > 1) t -= 1;\n      if (t < 1 / 6) return p + (q - p) * 6 * t;\n      if (t < 1 / 2) return q;\n      if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6;\n      return p;\n    };\n\n    const q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n    const p = 2 * l - q;\n    r = hue2rgb(p, q, h + 1 / 3);\n    g = hue2rgb(p, q, h);\n    b = hue2rgb(p, q, h - 1 / 3);\n  }\n\n  return {\n    r: Math.round(r * 255),\n    g: Math.round(g * 255),\n    b: Math.round(b * 255)\n  };\n}\n\nreturn hslToRgb($$args.hue, $$args.saturation, $$args.lightness);\n"
      }
    },
    "returns": {
      "type": "_types.Dictionary",
      "description": "The RGB color."
    },
    "tests": {
      "hslToRgbSimple": {
        "description": "Convert a simple HSL to RGB.",
        "input": {
          "hue": 0,
          "saturation": 1,
          "lightness": 0.5
        },
        "expected": {
          "r": 255,
          "g": 0,
          "b": 0
        }
      },
      "hslToRgbDifferentSaturation": {
        "description": "Convert HSL with different saturation.",
        "input": {
          "hue": 120,
          "saturation": 0.2,
          "lightness": 0.4
        },
        "expected": {
          "r": 82,
          "g": 122,
          "b": 82
        }
      },
      "hslToRgbDifferentLightness": {
        "description": "Convert HSL with different lightness.",
        "input": {
          "hue": 240,
          "saturation": 1,
          "lightness": 0.8
        },
        "expected": {
          "r": 153,
          "g": 153,
          "b": 255
        }
      },
      "hslToRgbZeroLightness": {
        "description": "Convert HSL with zero lightness.",
        "input": {
          "hue": 180,
          "saturation": 1,
          "lightness": 0
        },
        "expected": {
          "r": 0,
          "g": 0,
          "b": 0
        }
      }
    },
    "examples": [
      {
        "description": "Convert HSL to RGB with moderate saturation and lightness.",
        "input": {
          "hue": 60,
          "saturation": 0.5,
          "lightness": 0.5
        },
        "expected": {
          "r": 191,
          "g": 191,
          "b": 64
        }
      },
      {
        "description": "Convert HSL to RGB with low saturation and high lightness.",
        "input": {
          "hue": 300,
          "saturation": 0.1,
          "lightness": 0.9
        },
        "expected": {
          "r": 235,
          "g": 230,
          "b": 235
        }
      },
      {
        "description": "Convert HSL to RGB with high saturation and low lightness.",
        "input": {
          "hue": 90,
          "saturation": 0.8,
          "lightness": 0.2
        },
        "expected": {
          "r": 26,
          "g": 102,
          "b": 26
        }
      }
    ]
  },
  {
    "define": "_functions.Math.Hue",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Returns the hue of a color in degrees, in the range [0..360].",
    "parameters": {
      "color": {
        "type": "_types.Dictionary",
        "description": "The color to get the hue from, in HSL format."
      }
    },
    "implementation": {
      "javascript": {
        "code": "function getHue(color) {\n  return color.h;\n}\n\nreturn getHue($$args.color);\n"
      }
    },
    "returns": {
      "type": "_types.Number",
      "description": "The hue of the color in degrees."
    },
    "tests": {
      "hueSimple": {
        "description": "Get the hue of a simple color.",
        "input": {
          "color": {
            "h": 120,
            "s": 1,
            "l": 0.5
          }
        },
        "expected": 120
      },
      "hueRed": {
        "description": "Get the hue of the color red.",
        "input": {
          "color": {
            "h": 0,
            "s": 1,
            "l": 0.5
          }
        },
        "expected": 0
      },
      "hueBlue": {
        "description": "Get the hue of the color blue.",
        "input": {
          "color": {
            "h": 240,
            "s": 1,
            "l": 0.5
          }
        },
        "expected": 240
      },
      "hueYellow": {
        "description": "Get the hue of the color yellow.",
        "input": {
          "color": {
            "h": 60,
            "s": 1,
            "l": 0.5
          }
        },
        "expected": 60
      }
    },
    "examples": [
      {
        "description": "Get the hue of a pink color.",
        "input": {
          "color": {
            "h": 330,
            "s": 1,
            "l": 0.5
          }
        },
        "expected": 330
      },
      {
        "description": "Get the hue of a light green color.",
        "input": {
          "color": {
            "h": 150,
            "s": 0.5,
            "l": 0.8
          }
        },
        "expected": 150
      },
      {
        "description": "Get the hue of an orange color.",
        "input": {
          "color": {
            "h": 30,
            "s": 1,
            "l": 0.5
          }
        },
        "expected": 30
      }
    ]
  },
  {
    "define": "_functions.Number.Harmean",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Calculates the harmonic mean of a list of numbers.",
    "parameters": {
      "numbers": {
        "type": "_types.List",
        "description": "The list of numbers for which to calculate the harmonic mean."
      }
    },
    "implementation": {
      "javascript": {
        "code": "const harmonicMean = (numbers) => numbers.length / numbers.reduce((acc, val) => acc + 1 / val, 0);\nreturn harmonicMean($$args.numbers);\n"
      }
    },
    "returns": {
      "type": "_types.Number",
      "description": "The harmonic mean of the list of numbers."
    },
    "tests": {
      "harmeanSimple": {
        "description": "Calculate the harmonic mean of a simple list of numbers.",
        "input": {
          "numbers": [2, 4, 8]
        },
        "expected": 3.4285714285714284
      },
      "harmeanFraction": {
        "description": "Calculate the harmonic mean of a list with fractional numbers.",
        "input": {
          "numbers": [0.5, 0.25, 0.2]
        },
        "expected": 0.2727272727272727
      },
      "harmeanNegativeNumbers": {
        "description": "Calculate the harmonic mean of a list with negative numbers.",
        "input": {
          "numbers": [-2, -4, -8]
        },
        "expected": -3.4285714285714284
      }
    },
    "examples": [
      {
        "description": "Calculate the harmonic mean of a list with mixed positive and negative numbers.",
        "input": {
          "numbers": [1, -1, 1, -1]
        },
        "expected": 0
      },
      {
        "description": "Calculate the harmonic mean of a list with a single number.",
        "input": {
          "numbers": [5]
        },
        "expected": 5
      },
      {
        "description": "Calculate the harmonic mean of a list with repeated numbers.",
        "input": {
          "numbers": [7, 7, 7, 7]
        },
        "expected": 7
      }
    ]
  },
  {
    "define": "_functions.Math.Hypot",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Calculates the hypotenuse of a right-angled triangle given the lengths of the other two sides.",
    "parameters": {
      "side1": {
        "type": "_types.Number",
        "description": "The length of the first side."
      },
      "side2": {
        "type": "_types.Number",
        "description": "The length of the second side."
      }
    },
    "implementation": {
      "javascript": {
        "code": "return Math.hypot($$args.side1, $$args.side2);\n"
      }
    },
    "returns": {
      "type": "_types.Number",
      "description": "The length of the hypotenuse."
    },
    "tests": {
      "hypotThreeFour": {
        "description": "Calculate the hypotenuse of a right-angled triangle with sides 3 and 4.",
        "input": {
          "side1": 3,
          "side2": 4
        },
        "expected": 5
      },
      "hypotFiveTwelve": {
        "description": "Calculate the hypotenuse of a right-angled triangle with sides 5 and 12.",
        "input": {
          "side1": 5,
          "side2": 12
        },
        "expected": 13
      },
      "hypotZero": {
        "description": "Calculate the hypotenuse when one side is 0.",
        "input": {
          "side1": 0,
          "side2": 7
        },
        "expected": 7
      },
      "hypotBothZero": {
        "description": "Calculate the hypotenuse when both sides are 0.",
        "input": {
          "side1": 0,
          "side2": 0
        },
        "expected": 0
      }
    },
    "examples": [
      {
        "description": "Calculate the hypotenuse of a right-angled triangle with sides 8 and 15.",
        "input": {
          "side1": 8,
          "side2": 15
        },
        "expected": 17
      },
      {
        "description": "Calculate the hypotenuse of a right-angled triangle with sides 7 and 24.",
        "input": {
          "side1": 7,
          "side2": 24
        },
        "expected": 25
      },
      {
        "description": "Calculate the hypotenuse of a right-angled triangle with sides 1 and 1.",
        "input": {
          "side1": 1,
          "side2": 1
        },
        "expected": 1.4142135623730951
      }
    ]
  },
  {
    "define": "_functions.Logical.IF",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Evaluates a condition and returns one value if true, and another value otherwise.",
    "parameters": {
      "condition": {
        "type": "_types.Boolean",
        "description": "The condition to evaluate."
      },
      "then": {
        "type": "_types.Any",
        "description": "The value to return if the condition is true."
      },
      "else": {
        "type": "_types.Any",
        "description": "The value to return if the condition is false."
      }
    },
    "implementation": {
      "javascript": {
        "code": "if ($$args.condition) {\n  return $$args.then;\n} else {\n  return $$args.else;\n}\n"
      }
    },
    "returns": {
      "type": "_types.Any",
      "description": "The result of evaluating the condition and returning one of the specified values."
    },
    "tests": {
      "ifTrue": {
        "description": "Evaluate a true condition.",
        "input": {
          "condition": true,
          "then": "then",
          "else": "else"
        },
        "expected": "then"
      },
      "ifFalse": {
        "description": "Evaluate a false condition.",
        "input": {
          "condition": false,
          "then": "then",
          "else": "else"
        },
        "expected": "else"
      },
      "ifConditional": {
        "description": "Evaluate a conditional expression with true and false cases.",
        "input": {
          "condition": true,
          "then": "true result",
          "else": "false result"
        },
        "expected": "true result"
      }
    },
    "examples": [
      {
        "description": "Evaluate a true condition with numerical values.",
        "input": {
          "condition": true,
          "then": 42,
          "else": 24
        },
        "expected": 42
      },
      {
        "description": "Evaluate a false condition with numerical values.",
        "input": {
          "condition": false,
          "then": 42,
          "else": 24
        },
        "expected": 24
      },
      {
        "description": "Evaluate a conditional expression with string values.",
        "input": {
          "condition": false,
          "then": "pass",
          "else": "fail"
        },
        "expected": "fail"
      }
    ]
  },
  {
    "define": "_functions.Number.IPMT",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Returns the interest payment for a given period and principal.",
    "parameters": {
      "period": {
        "type": "_types.Number",
        "description": "The period for which to calculate the interest payment."
      },
      "rate": {
        "type": "_types.Number",
        "description": "The interest rate per period."
      },
      "nper": {
        "type": "_types.Number",
        "description": "The total number of payment periods."
      },
      "pv": {
        "type": "_types.Number",
        "description": "The present value or principal amount."
      }
    },
    "implementation": {
      "javascript": {
        "code": "const ratePerPeriod = $$args.rate / 12; // Assuming monthly payments for simplicity.\nconst interestPayment = $$args.pv * ratePerPeriod * (1 - Math.pow(1 + ratePerPeriod, -$$args.nper)) * Math.pow(1 + ratePerPeriod, $$args.period - 1);\nreturn Math.abs(interestPayment.toFixed(2)); // Return absolute value rounded to 2 decimal places.\n"
      }
    },
    "returns": {
      "type": "_types.Number",
      "description": "The interest payment amount for the specified period."
    },
    "tests": {
      "ipmtFirstPeriod": {
        "description": "Calculate interest payment for the first period.",
        "input": {
          "period": 1,
          "rate": 0.1,
          "nper": 12,
          "pv": 1000
        },
        "expected": 0.79
      },
      "ipmtMidPeriod": {
        "description": "Calculate interest payment for a middle period.",
        "input": {
          "period": 6,
          "rate": 0.12,
          "nper": 24,
          "pv": 5000
        },
        "expected": 11.16
      },
      "ipmtLastPeriod": {
        "description": "Calculate interest payment for the last period.",
        "input": {
          "period": 5,
          "rate": 0.08,
          "nper": 5,
          "pv": 2000
        },
        "expected": 0.45
      }
    },
    "examples": [
      {
        "description": "Calculate interest payment for the 3rd period at a specific interest rate.",
        "input": {
          "period": 3,
          "rate": 0.05,
          "nper": 10,
          "pv": 1200
        },
        "expected": 1.49
      },
      {
        "description": "Calculate interest payment for the 2nd period with higher interest.",
        "input": {
          "period": 2,
          "rate": 0.15,
          "nper": 20,
          "pv": 3000
        },
        "expected": 34.69
      },
      {
        "description": "Calculate interest payment for a period near the end of the term.",
        "input": {
          "period": 9,
          "rate": 0.07,
          "nper": 10,
          "pv": 2500
        },
        "expected": 1.44
      }
    ]
  },
  {
    "define": "_functions.Logical.ISEmail",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Determines whether the given text is a valid email address or not.",
    "parameters": {
      "text": {
        "type": "_types.String",
        "description": "The text to check for being an email address."
      }
    },
    "implementation": {
      "javascript": {
        "code": "const re = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/;\nreturn Boolean(re.test($$args.text));\n"
      }
    },
    "returns": {
      "type": "_types.Boolean",
      "description": "Whether the text is a valid email address or not."
    },
    "tests": {
      "isEmailSimple": {
        "description": "Check for a simple email.",
        "input": {
          "text": "john.doe@example.com"
        },
        "expected": true
      },
      "isEmailInvalid1": {
        "description": "Check for an invalid email with no @ symbol.",
        "input": {
          "text": "johndoeexamplecom"
        },
        "expected": false
      },
      "isEmailInvalid2": {
        "description": "Check for an invalid email without a domain.",
        "input": {
          "text": "john.doe@"
        },
        "expected": false
      },
      "isEmailInvalid3": {
        "description": "Check for an invalid email with multiple @ symbols.",
        "input": {
          "text": "john.doe@@example.com"
        },
        "expected": false
      }
    },
    "examples": [
      {
        "description": "Valid email with a subdomain.",
        "input": {
          "text": "john.doe@mail.example.com"
        },
        "expected": true
      },
      {
        "description": "Valid email with numeric domain.",
        "input": {
          "text": "user123@domain123.com"
        },
        "expected": true
      },
      {
        "description": "Invalid email with special characters.",
        "input": {
          "text": "john.doe!@example.com"
        },
        "expected": false
      }
    ]
  },
  {
    "define": "_functions.List.ISEmpty",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Checks if a list is empty.",
    "parameters": {
      "input": {
        "type": "_types.List",
        "description": "The list to check for emptiness."
      }
    },
    "implementation": {
      "javascript": {
        "code": "return $$args.input.length === 0;\n"
      }
    },
    "returns": {
      "type": "_types.Boolean",
      "description": "Whether the list is empty or not."
    },
    "tests": {
      "isEmptyList": {
        "description": "Check an empty list.",
        "input": {
          "input": []
        },
        "expected": true
      },
      "nonEmptyList": {
        "description": "Check a non-empty list.",
        "input": {
          "input": ["a", "b"]
        },
        "expected": false
      }
    },
    "examples": [
      {
        "description": "Check a list with numbers.",
        "input": {
          "input": [1, 2, 3]
        },
        "expected": false
      },
      {
        "description": "Check a list with a single item.",
        "input": {
          "input": ["single"]
        },
        "expected": false
      },
      {
        "description": "Check an empty list of objects.",
        "input": {
          "input": [{}]
        },
        "expected": false
      }
    ]
  },
  {
    "define": "_functions.Logical.ISEqual",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Checks if two values are equal.",
    "parameters": {
      "value1": {
        "type": "_types.Any",
        "description": "The first value to compare."
      },
      "value2": {
        "type": "_types.Any",
        "description": "The second value to compare."
      }
    },
    "implementation": {
      "javascript": {
        "code": "return $$args.value1 === $$args.value2;\n"
      }
    },
    "returns": {
      "type": "_types.Boolean",
      "description": "Whether the two values are equal or not."
    },
    "tests": {
      "isEqualTrue": {
        "description": "Compare two identical values.",
        "input": {
          "value1": true,
          "value2": true
        },
        "expected": true
      },
      "isEqualFalse": {
        "description": "Compare two different values.",
        "input": {
          "value1": true,
          "value2": false
        },
        "expected": false
      },
      "isEqualMixedType": {
        "description": "Compare a number and a string.",
        "input": {
          "value1": 5,
          "value2": "5"
        },
        "expected": false
      }
    },
    "examples": [
      {
        "description": "Compare two identical strings.",
        "input": {
          "value1": "apple",
          "value2": "apple"
        },
        "expected": true
      },
      {
        "description": "Compare two different numbers.",
        "input": {
          "value1": 10,
          "value2": 20
        },
        "expected": false
      },
      {
        "description": "Compare a string and a boolean.",
        "input": {
          "value1": "true",
          "value2": true
        },
        "expected": false
      }
    ]
  },
  {
    "define": "_functions.Any.IsNull",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Returns true if the input value is null or undefined, false otherwise.",
    "parameters": {
      "input": {
        "type": "_types.Any",
        "description": "The value to check for nullness."
      }
    },
    "implementation": {
      "javascript": {
        "code": "return $$args.input === null || $$args.input === undefined;\n"
      }
    },
    "returns": {
      "type": "_types.Boolean",
      "description": "Whether the input is null or undefined."
    },
    "tests": {
      "isNullTrue": {
        "description": "Test that ISNULL returns true for null values.",
        "input": {
          "input": null
        },
        "expected": true
      },
      "isNullFalse": {
        "description": "Test that ISNULL returns false for non-null values.",
        "input": {
          "input": "hello"
        },
        "expected": false
      }
    },
    "examples": [
      {
        "description": "Check if undefined is null or undefined.",
        "input": {
          "input": "undefined"
        },
        "expected": true
      },
      {
        "description": "Check if an empty string is null or undefined.",
        "input": {
          "input": ""
        },
        "expected": false
      },
      {
        "description": "Check if a number is null or undefined.",
        "input": {
          "input": 123
        },
        "expected": false
      }
    ]
  },
  {
    "define": "_functions.Boolean.IsNullOrEmpty",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Checks if the given input is null or an empty string.",
    "parameters": {
      "input": {
        "type": "_types.Any",
        "description": "The input to check for null or empty string."
      }
    },
    "implementation": {
      "javascript": {
        "code": "return $$args.input === null || $$args.input === '';\n"
      }
    },
    "returns": {
      "type": "_types.Boolean",
      "description": "Whether the input is null or an empty string."
    },
    "tests": {
      "isNullOrEmptyNull": {
        "description": "Check if a null value is considered null or empty.",
        "input": {
          "input": null
        },
        "expected": true
      },
      "isNullOrEmptyEmptyString": {
        "description": "Check if an empty string is considered null or empty.",
        "input": {
          "input": ""
        },
        "expected": true
      },
      "isNullOrEmptyNotNull": {
        "description": "Check if a non-null value is not considered null or empty.",
        "input": {
          "input": "Hello"
        },
        "expected": false
      }
    },
    "examples": [
      {
        "description": "Check if a string with spaces is considered null or empty.",
        "input": {
          "input": "   "
        },
        "expected": false
      },
      {
        "description": "Check if an empty list is considered null or empty.",
        "input": {
          "input": []
        },
        "expected": false
      },
      {
        "description": "Check if a zero number is considered null or empty.",
        "input": {
          "input": 0
        },
        "expected": false
      }
    ]
  },
  {
    "define": "_functions.Boolean.ISPMT",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Determines if the given numbers are in strict ascending order.",
    "parameters": {
      "numbers": {
        "type": "_types.List",
        "description": "The list of numbers to check for strict ascending order."
      }
    },
    "implementation": {
      "javascript": {
        "code": "for (let i = 0; i < $$args.numbers.length - 1; i++) {\n  if ($$args.numbers[i] >= $$args.numbers[i + 1]) {\n    return false;\n  }\n}\nreturn true;\n"
      }
    },
    "returns": {
      "type": "_types.Boolean",
      "description": "Returns true if the numbers are in strict ascending order, false otherwise."
    },
    "tests": {
      "ispmtAscendingOrder": {
        "description": "Check if numbers are in strict ascending order.",
        "input": {
          "numbers": [1, 2, 3, 4, 5]
        },
        "expected": true
      },
      "ispmtDescendingOrder": {
        "description": "Check if numbers are in descending order.",
        "input": {
          "numbers": [5, 4, 3, 2, 1]
        },
        "expected": false
      },
      "ispmtMixedOrder": {
        "description": "Check if numbers are in mixed order.",
        "input": {
          "numbers": [1, 3, 2, 4, 5]
        },
        "expected": false
      },
      "ispmtSingleNumber": {
        "description": "Check if a single number is considered in strict ascending order.",
        "input": {
          "numbers": [7]
        },
        "expected": true
      }
    },
    "examples": [
      {
        "description": "Check if all numbers in the list are in strict ascending order with negative values.",
        "input": {
          "numbers": [-3, -2, -1, 0, 1]
        },
        "expected": true
      },
      {
        "description": "Check if a longer mixed order list is not in strict ascending order.",
        "input": {
          "numbers": [10, 20, 30, 25, 40, 50]
        },
        "expected": false
      },
      {
        "description": "Check if a list with repeated numbers is not in strict ascending order.",
        "input": {
          "numbers": [1, 2, 2, 3, 4]
        },
        "expected": false
      }
    ]
  },
  {
    "define": "_functions.Math.ISSame",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Returns true if the given input is equal to another input.",
    "parameters": {
      "first": {
        "type": "_types.Any",
        "description": "The value to compare."
      },
      "second": {
        "type": "_types.Any",
        "description": "The value to compare with."
      }
    },
    "implementation": {
      "javascript": {
        "code": "return $$args.first === $$args.second;\n"
      }
    },
    "returns": {
      "type": "_types.Boolean",
      "description": "Whether the two inputs are equal or not."
    },
    "tests": {
      "issameTrue": {
        "description": "Compare two identical values.",
        "input": {
          "first": "Hello",
          "second": "Hello"
        },
        "expected": true
      },
      "issameFalse": {
        "description": "Compare two different values.",
        "input": {
          "first": "Hello",
          "second": "World"
        },
        "expected": false
      }
    },
    "examples": [
      {
        "description": "Compare two identical numbers.",
        "input": {
          "first": 42,
          "second": 42
        },
        "expected": true
      },
      {
        "description": "Compare null and undefined.",
        "input": {
          "first": null,
          "second": "undefined"
        },
        "expected": false
      },
      {
        "description": "Compare two identical lists.",
        "input": {
          "first": [1, 2, 3],
          "second": [1, 2, 3]
        },
        "expected": false
      }
    ]
  },
  {
    "define": "_functions.Any.ISUndefined",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Determines if a value is undefined.",
    "parameters": {
      "input": {
        "type": "_types.Any",
        "description": "The value to check for undefininess."
      }
    },
    "implementation": {
      "javascript": {
        "code": "return $$args.input === undefined;\n"
      }
    },
    "returns": {
      "type": "_types.Boolean",
      "description": "Whether the input value is undefined or not."
    },
    "tests": {
      "isUndefinedTrue": {
        "description": "Check if a defined variable is not undefined.",
        "input": {
          "input": "hello"
        },
        "expected": false
      }
    },
    "examples": [
      {
        "description": "Check if an undefined variable is undefined.",
        "input": {
          "input": "undefined"
        },
        "expected": true
      },
      {
        "description": "Check if a null variable is undefined.",
        "input": {
          "input": null
        },
        "expected": false
      },
      {
        "description": "Check if an empty string is undefined.",
        "input": {
          "input": ""
        },
        "expected": false
      }
    ]
  },
  {
    "define": "_functions.String.IndexOf",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Returns the index of the first occurrence of a specified value in a given string.",
    "parameters": {
      "text": {
        "type": "_types.String",
        "description": "The input string to search."
      },
      "target": {
        "type": "_types.String",
        "description": "The target value to find."
      }
    },
    "implementation": {
      "javascript": {
        "code": "return $$args.text.indexOf($$args.target);\n"
      }
    },
    "returns": {
      "type": "_types.Number",
      "description": "The index of the first occurrence of the target value."
    },
    "tests": {
      "indexOfFirstMatch": {
        "description": "Find the first occurrence of a string.",
        "input": {
          "text": "hello world",
          "target": "world"
        },
        "expected": 6
      },
      "indexOfNoMatch": {
        "description": "Attempt to find when no match is found.",
        "input": {
          "text": "hello world",
          "target": "foo"
        },
        "expected": -1
      },
      "indexOfStart": {
        "description": "Find the first occurrence of a string that matches the start.",
        "input": {
          "text": "hello world",
          "target": "hello"
        },
        "expected": 0
      },
      "indexOfMiddle": {
        "description": "Find the first occurrence of a string that matches the middle.",
        "input": {
          "text": "hello world",
          "target": "lo wo"
        },
        "expected": 3
      }
    },
    "examples": [
      {
        "description": "Find the first occurrence of a non-alphanumeric character.",
        "input": {
          "text": "hello, world!",
          "target": ","
        },
        "expected": 5
      },
      {
        "description": "Find the first occurrence of a repeated substring.",
        "input": {
          "text": "banana",
          "target": "an"
        },
        "expected": 1
      },
      {
        "description": "Find the first occurrence of a string with spaces.",
        "input": {
          "text": "searching in a sentence",
          "target": "in a"
        },
        "expected": 10
      }
    ]
  },
  {
    "define": "_functions.List.InsertItemAt",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Inserts an item at a given index in the list.",
    "parameters": {
      "input": {
        "type": "_types.List",
        "description": "The list to insert into."
      },
      "index": {
        "type": "_types.Number",
        "description": "The index where the new item should be inserted."
      },
      "item": {
        "type": "_types.Any",
        "description": "The item to be inserted."
      }
    },
    "implementation": {
      "javascript": {
        "code": "const result = $$args.input.slice(0, $$args.index);\nresult.push($$args.item);\nreturn result.concat($$args.input.slice($$args.index));\n"
      }
    },
    "returns": {
      "type": "_types.List",
      "description": "The modified list with the new item inserted."
    },
    "tests": {
      "insertItemAtBegin": {
        "description": "Insert an item at the beginning of the list.",
        "input": {
          "input": ["a", "b", "c"],
          "index": 0,
          "item": "d"
        },
        "expected": ["d", "a", "b", "c"]
      },
      "insertItemAtMiddle": {
        "description": "Insert an item in the middle of the list.",
        "input": {
          "input": ["a", "b", "c", "d", "e"],
          "index": 2,
          "item": "f"
        },
        "expected": ["a", "b", "f", "c", "d", "e"]
      },
      "insertItemAtEnd": {
        "description": "Insert an item at the end of the list.",
        "input": {
          "input": ["a", "b", "c"],
          "index": 3,
          "item": "d"
        },
        "expected": ["a", "b", "c", "d"]
      }
    },
    "examples": [
      {
        "description": "Insert a number into a list of letters.",
        "input": {
          "input": ["a", "b", "c"],
          "index": 1,
          "item": 1
        },
        "expected": ["a", 1, "b", "c"]
      },
      {
        "description": "Insert an object into a list of strings.",
        "input": {
          "input": ["apple", "banana", "cherry"],
          "index": 2,
          "item": {
            "fruit": "grape"
          }
        },
        "expected": [
          "apple",
          "banana",
          {
            "fruit": "grape"
          },
          "cherry"
        ]
      },
      {
        "description": "Insert a boolean value into a list of mixed types.",
        "input": {
          "input": [1, "two", 3],
          "index": 2,
          "item": false
        },
        "expected": [1, "two", false, 3]
      }
    ]
  },
  {
    "define": "_functions.Math.Integer",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Returns the integer value of a number.",
    "parameters": {
      "value": {
        "type": "_types.Number",
        "description": "The input value to be converted to an integer."
      }
    },
    "implementation": {
      "javascript": {
        "code": "return Math.floor($$args.value);\n"
      }
    },
    "returns": {
      "type": "_types.Integer",
      "description": "The integer value of the input."
    },
    "tests": {
      "intWholeNumber": {
        "description": "Test converting a whole number.",
        "input": {
          "value": 5
        },
        "expected": 5
      },
      "intDecimal": {
        "description": "Test converting a decimal number to an integer.",
        "input": {
          "value": 4.2
        },
        "expected": 4
      }
    },
    "examples": [
      {
        "description": "Convert a negative decimal to an integer.",
        "input": {
          "value": -3.8
        },
        "expected": -4
      },
      {
        "description": "Convert a positive decimal less than one to an integer.",
        "input": {
          "value": 0.9
        },
        "expected": 0
      },
      {
        "description": "Convert a very large number to an integer.",
        "input": {
          "value": 987654321.987
        },
        "expected": 987654321
      }
    ]
  },
  {
    "define": "_functions.List.Intersection",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Returns a new list that contains only the elements that are present in both input lists.",
    "parameters": {
      "set1": {
        "type": "_types.List",
        "description": "The first list to find common elements."
      },
      "set2": {
        "type": "_types.List",
        "description": "The second list to find common elements."
      }
    },
    "implementation": {
      "javascript": {
        "code": "return $$args.set1.filter(function(x) {\n  return $$args.set2.includes(x);\n});\n"
      }
    },
    "returns": {
      "type": "_types.List",
      "description": "A new list containing only the common elements."
    },
    "tests": {
      "intersectionSameElements": {
        "description": "Find the intersection of two lists with some common elements.",
        "input": {
          "set1": ["a", "b", "c"],
          "set2": ["b", "c", "d"]
        },
        "expected": ["b", "c"]
      },
      "intersectionNoCommonElements": {
        "description": "Find the intersection of two lists without any common elements.",
        "input": {
          "set1": ["a", "b", "c"],
          "set2": ["x", "y", "z"]
        },
        "expected": []
      },
      "intersectionOneCommonElement": {
        "description": "Find the intersection of two lists with only one common element.",
        "input": {
          "set1": ["a", "b", "c"],
          "set2": ["c", "d", "e"]
        },
        "expected": ["c"]
      }
    },
    "examples": [
      {
        "description": "Find the intersection of two lists with all elements common.",
        "input": {
          "set1": [1, 2, 3],
          "set2": [1, 2, 3]
        },
        "expected": [1, 2, 3]
      },
      {
        "description": "Find the intersection of lists with duplicate elements in the first list.",
        "input": {
          "set1": [1, 2, 2, 3],
          "set2": [2, 3]
        },
        "expected": [2, 2, 3]
      },
      {
        "description": "Find the intersection when the first list is empty.",
        "input": {
          "set1": [],
          "set2": [1, 2, 3]
        },
        "expected": []
      }
    ]
  },
  {
    "define": "_functions.Number.InvestmentDuration",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Calculates the investment duration based on the interest rate and principal.",
    "parameters": {
      "interestRate": {
        "type": "_types.Number",
        "description": "The interest rate for investment."
      },
      "principal": {
        "type": "_types.Number",
        "description": "The initial principal amount."
      }
    },
    "implementation": {
      "javascript": {
        "code": "return Math.log(2) / Math.log(1 + $$args.interestRate) * $$args.principal;\n"
      }
    },
    "returns": {
      "type": "_types.Number",
      "description": "The investment duration in years."
    },
    "tests": {
      "investmentDurationNonZeroInterestRate": {
        "description": "Calculate the investment duration with a non-zero interest rate.",
        "input": {
          "interestRate": 0.05,
          "principal": 2000
        },
        "expected": 28413.398165780924
      },
      "investmentDurationHighPrincipal": {
        "description": "Calculate the investment duration with a high initial principal.",
        "input": {
          "interestRate": 0.03,
          "principal": 10000
        },
        "expected": 234497.72250437737
      }
    },
    "examples": [
      {
        "description": "Calculate the investment duration with a low interest rate.",
        "input": {
          "interestRate": 0.01,
          "principal": 1500
        },
        "expected": 104308.03582524272
      },
      {
        "description": "Calculate the investment duration with a very high interest rate.",
        "input": {
          "interestRate": 0.1,
          "principal": 3000
        },
        "expected": 21711.276418051253
      },
      {
        "description": "Calculate the investment duration with a small principal amount.",
        "input": {
          "interestRate": 0.04,
          "principal": 500
        },
        "expected": 11609.7163119317
      }
    ]
  },
  {
    "define": "_functions.Date.IsBefore",
    "blueprint": "_blueprints.Flowgraph",
    "description": "Checks if the provided date is before a specified date.",
    "parameters": {
      "value": {
        "type": "_types.Date",
        "description": "The value to check."
      },
      "comparisonDate": {
        "type": "_types.Date",
        "description": "The date to compare against."
      }
    },
    "implementation": {
      "javascript": {
        "code": "return $$args.value < $$args.comparisonDate;\n"
      }
    },
    "returns": {
      "type": "_types.Boolean",
      "description": "True if the provided date is before the comparison date, false otherwise."
    },
    "tests": {
      "DateIsAfter": {
        "description": "Test with a date that is after the comparison date.",
        "input": {
          "value": "new Date('2022-01-01')",
          "comparisonDate": "new Date('2021-01-01')"
        },
        "expected": false
      }
    },
    "examples": [
      {
        "description": "Compare two dates in the same year.",
        "input": {
          "value": "new Date('2021-06-15')",
          "comparisonDate": "new Date('2021-12-31')"
        },
        "expected": true
      },
      {
        "description": "Compare two dates where one is in a different year.",
        "input": {
          "value": "new Date('2020-01-01')",
          "comparisonDate": "new Date('2021-01-01')"
        },
        "expected": true
      },
      {
        "description": "Compare two date strings in ISO format.",
        "input": {
          "value": "new Date('2021-12-15T12:00:00Z')",
          "comparisonDate": "new Date('2021-12-15T13:00:00Z')"
        },
        "expected": true
      }
    ]
  },
  {
    "define": "_functions.Date.IsDate",
    "blueprint": "_blueprints.Flowgraph",
    "description": "Checks if the provided value is a date.",
    "parameters": {
      "value": {
        "type": "_types.Date",
        "description": "The value to check."
      }
    },
    "implementation": {
      "javascript": {
        "code": "return $$args.value instanceof Date && !isNaN($$args.value.valueOf());\n"
      }
    },
    "returns": {
      "type": "_types.Boolean",
      "description": "True if the value is a date, false otherwise."
    },
    "tests": {
      "InvalidDate": {
        "description": "Test with an invalid date.",
        "input": {
          "value": "Hello, World!"
        },
        "expected": false
      }
    },
    "examples": [
      {
        "description": "Test with a valid date string.",
        "input": {
          "value": "2021-10-05T14:48:00.000Z"
        },
        "expected": true
      },
      {
        "description": "Test with an empty string.",
        "input": {
          "value": ""
        },
        "expected": false
      },
      {
        "description": "Test with a number.",
        "input": {
          "value": 1633446000000
        },
        "expected": false
      }
    ]
  },
  {
    "define": "_functions.Logical.IsDatetime",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Checks if a given input is a valid datetime.",
    "parameters": {
      "input": {
        "type": "_types.Any",
        "description": "The input to check for being a datetime."
      }
    },
    "implementation": {
      "javascript": {
        "code": "if (typeof $$args.input !== 'string') {\n  return false;\n}\nconst date = new Date($$args.input);\nreturn !isNaN(date.getTime()) && $$args.input === date.toISOString();\n"
      }
    },
    "returns": {
      "type": "_types.Boolean",
      "description": "Whether the input is a valid datetime."
    },
    "tests": {
      "isDatetimeString": {
        "description": "Check if an ISO date string is a datetime.",
        "input": {
          "input": "2022-01-01T00:00:00.000Z"
        },
        "expected": true
      },
      "isDatetimeStringWithMilliseconds": {
        "description": "Check if an ISO date string with milliseconds is a datetime.",
        "input": {
          "input": "2022-01-01T00:00:00.123Z"
        },
        "expected": true
      },
      "isNotDatetimeString": {
        "description": "Check if a non-date string is not a datetime.",
        "input": {
          "input": "not a date"
        },
        "expected": false
      },
      "isNotDatetimeNumber": {
        "description": "Check if a number is not a datetime.",
        "input": {
          "input": 123456
        },
        "expected": false
      },
      "isNotDatetimeNull": {
        "description": "Check if null is not a datetime.",
        "input": {
          "input": null
        },
        "expected": false
      },
      "isNotDatetimeInvalidString": {
        "description": "Check if an invalid ISO date string is not a datetime.",
        "input": {
          "input": "2022-13-01T00:00:00.000Z"
        },
        "expected": false
      }
    },
    "examples": [
      {
        "description": "Check if a date string without time is a datetime.",
        "input": {
          "input": "2022-01-01"
        },
        "expected": false
      },
      {
        "description": "Check if a valid ISO date string with a different timezone is a datetime.",
        "input": {
          "input": "2022-01-01T00:00:00.000+01:00"
        },
        "expected": false
      },
      {
        "description": "Check if a boolean value is not a datetime.",
        "input": {
          "input": true
        },
        "expected": false
      }
    ]
  },
  {
    "define": "_functions.Math.IsEven",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Returns whether the given number is even.",
    "parameters": {
      "num": {
        "type": "_types.Number",
        "description": "The number to check if it's even."
      }
    },
    "implementation": {
      "javascript": {
        "code": "return ($$args.num) % 2 === 0;\n"
      }
    },
    "returns": {
      "type": "_types.Boolean",
      "description": "Whether the number is even."
    },
    "tests": {
      "isEvenZero": {
        "description": "Check if 0 is even.",
        "input": {
          "num": 0
        },
        "expected": true
      },
      "isEvenOne": {
        "description": "Check if 1 is even.",
        "input": {
          "num": 1
        },
        "expected": false
      },
      "isEvenTwo": {
        "description": "Check if 2 is even.",
        "input": {
          "num": 2
        },
        "expected": true
      }
    },
    "examples": [
      {
        "description": "Check if 10 is even.",
        "input": {
          "num": 10
        },
        "expected": true
      },
      {
        "description": "Check if 15 is even.",
        "input": {
          "num": 15
        },
        "expected": false
      },
      {
        "description": "Check if -4 is even.",
        "input": {
          "num": -4
        },
        "expected": true
      }
    ]
  },
  {
    "define": "_functions.Boolean.IsFunction",
    "blueprint": "_blueprints.Function",
    "description": "Checks if the provided value is a function.",
    "parameters": {
      "value": {
        "type": "_types.Any",
        "description": "The value to check."
      }
    },
    "implementation": {
      "javascript": {
        "code": "return typeof $$args.value === 'function';\n"
      }
    },
    "returns": {
      "type": "_types.Boolean",
      "description": "True if the value is a function, false otherwise."
    },
    "tests": null,
    "examples": [
      {
        "description": "Check with an arrow function.",
        "input": {
          "value": "() => {}"
        },
        "expected": true
      },
      {
        "description": "Check with a number.",
        "input": {
          "value": 123
        },
        "expected": false
      },
      {
        "description": "Check with an array.",
        "input": {
          "value": [1, 2, 3]
        },
        "expected": false
      }
    ]
  },
  {
    "define": "_functions.Math.IsInArray",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Checks if the given value is present in the array.",
    "parameters": {
      "array": {
        "type": "_types.List",
        "description": "The array to search."
      },
      "value": {
        "type": "_types.Any",
        "description": "The value to check for presence in the array."
      }
    },
    "implementation": {
      "javascript": {
        "code": "return $$args.array.includes($$args.value);\n"
      }
    },
    "returns": {
      "type": "_types.Boolean",
      "description": "True if the value is present, false otherwise."
    },
    "tests": {
      "isInArrayTrue": {
        "description": "Check if a value is present in an array.",
        "input": {
          "array": ["a", "b", "c"],
          "value": "b"
        },
        "expected": true
      },
      "isInArrayFalse": {
        "description": "Check if a value is not present in an array.",
        "input": {
          "array": ["a", "b", "c"],
          "value": "d"
        },
        "expected": false
      },
      "isInArrayNumber": {
        "description": "Check if a number is present in an array of numbers.",
        "input": {
          "array": [1, 2, 3],
          "value": 2
        },
        "expected": true
      },
      "isInArrayMixedTypes": {
        "description": "Check if a value is present in an array with mixed types.",
        "input": {
          "array": [1, "2", true, null],
          "value": "2"
        },
        "expected": true
      }
    },
    "examples": [
      {
        "description": "Check if a boolean value is present in an array with different types.",
        "input": {
          "array": [true, "hello", 42],
          "value": true
        },
        "expected": true
      },
      {
        "description": "Check if a string is present in an array of numbers and strings.",
        "input": {
          "array": [1, "1", 2, "2"],
          "value": "1"
        },
        "expected": true
      },
      {
        "description": "Check if null is present in an array.",
        "input": {
          "array": [1, "2", null, false],
          "value": null
        },
        "expected": true
      }
    ]
  },
  {
    "define": "_functions.List.IsInArrayByKey",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Returns true if the given key exists in any of the dictionaries in the input list and has the expected value.",
    "parameters": {
      "arrs": {
        "type": "_types.List[Dictionary]",
        "description": "The list of dictionaries to search."
      },
      "key": {
        "type": "_types.String",
        "description": "The key to look for in each dictionary."
      },
      "value": {
        "type": "_types.Any",
        "description": "The expected value associated with the given key."
      }
    },
    "implementation": {
      "javascript": {
        "code": "return $$args.arrs.some((dict) => dict[$$args.key] === $$args.value);\n"
      }
    },
    "returns": {
      "type": "_types.Boolean",
      "description": "Whether the given key exists in any of the dictionaries and has the expected value."
    },
    "tests": {
      "isInArrayByKeySimple": {
        "description": "Search for a simple key-value pair.",
        "input": {
          "arrs": [
            {
              "a": "1"
            },
            {
              "b": "2"
            }
          ],
          "key": "a",
          "value": "1"
        },
        "expected": true
      },
      "isInArrayByKeyNotFound": {
        "description": "Search for a key that does not exist in any of the dictionaries.",
        "input": {
          "arrs": [
            {
              "b": "2"
            }
          ],
          "key": "a",
          "value": "3"
        },
        "expected": false
      },
      "isInArrayByKeyDifferentValue": {
        "description": "Search for a key with a different value.",
        "input": {
          "arrs": [
            {
              "a": "1"
            },
            {
              "b": "2"
            }
          ],
          "key": "a",
          "value": "2"
        },
        "expected": false
      },
      "isInArrayByKeyNumber": {
        "description": "Search for a key with a number value.",
        "input": {
          "arrs": [
            {
              "a": 1
            },
            {
              "b": 2
            }
          ],
          "key": "a",
          "value": 1
        },
        "expected": true
      }
    },
    "examples": [
      {
        "description": "Find a key-value pair in a mixed-type dictionary.",
        "input": {
          "arrs": [
            {
              "c": 3
            },
            {
              "d": "hello"
            },
            {
              "e": false
            }
          ],
          "key": "d",
          "value": "hello"
        },
        "expected": true
      },
      {
        "description": "Search for a boolean value in the dictionary.",
        "input": {
          "arrs": [
            {
              "f": true
            },
            {
              "g": false
            }
          ],
          "key": "f",
          "value": true
        },
        "expected": true
      },
      {
        "description": "Check if the key exists but with a different case (should be case-sensitive).",
        "input": {
          "arrs": [
            {
              "h": "value"
            }
          ],
          "key": "H",
          "value": "value"
        },
        "expected": false
      }
    ]
  },
  {
    "define": "_functions.Math.IsInteger",
    "blueprint": "_blueprints.Flowgraph",
    "description": "Checks if the input value is an integer.",
    "parameters": {
      "value": {
        "type": "_types.Number",
        "description": "The value to check."
      }
    },
    "implementation": {
      "javascript": {
        "code": "return Number.isInteger($$args.value);\n"
      }
    },
    "returns": {
      "type": "_types.Boolean",
      "description": "True if the value is an integer, false otherwise."
    },
    "tests": {
      "IntegerNumber": {
        "description": "The input value is an integer.",
        "input": {
          "value": 2
        },
        "expected": true
      },
      "NonIntegerNumber": {
        "description": "The input value is not an integer.",
        "input": {
          "value": 2.5
        },
        "expected": false
      },
      "NegativeIntegerNumber": {
        "description": "The input value is a negative integer.",
        "input": {
          "value": -2
        },
        "expected": true
      },
      "NegativeNonIntegerNumber": {
        "description": "The input value is a negative non-integer.",
        "input": {
          "value": -2.5
        },
        "expected": false
      }
    },
    "examples": [
      {
        "description": "Check if zero is an integer.",
        "input": {
          "value": 0
        },
        "expected": true
      },
      {
        "description": "Check if a large integer is an integer.",
        "input": {
          "value": 1234567890
        },
        "expected": true
      },
      {
        "description": "Check if a positive floating-point number is an integer.",
        "input": {
          "value": 45.67
        },
        "expected": false
      }
    ]
  },
  {
    "define": "_functions.List.IsList",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Checks if the provided value is a list.",
    "parameters": {
      "value": {
        "type": "_types.List",
        "description": "The value to check."
      }
    },
    "implementation": {
      "javascript": {
        "code": "return Array.isArray($$args.value);\n"
      }
    },
    "returns": {
      "type": "_types.Boolean",
      "description": "True if the value is a list, false otherwise."
    },
    "tests": {
      "ValidList": {
        "description": "Test with a valid list.",
        "input": {
          "value": [1, 2, 3]
        },
        "expected": true
      },
      "InvalidList": {
        "description": "Test with an invalid list.",
        "input": {
          "value": "Not a list"
        },
        "expected": false
      }
    },
    "examples": [
      {
        "description": "Check an empty list.",
        "input": {
          "value": []
        },
        "expected": true
      },
      {
        "description": "Check a nested list.",
        "input": {
          "value": [
            [1, 2],
            [3, 4]
          ]
        },
        "expected": true
      },
      {
        "description": "Check a list with different data types.",
        "input": {
          "value": [1, "two", true, 4.5]
        },
        "expected": true
      }
    ]
  },
  {
    "define": "_functions.Number.IsNan",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Returns true if the given number is Not a Number (NaN), and false otherwise.",
    "parameters": {
      "value": {
        "type": "_types.Number",
        "description": "The value to check for NaN-ness."
      }
    },
    "implementation": {
      "javascript": {
        "code": "return isNaN($$args.value);\n"
      }
    },
    "returns": {
      "type": "_types.Boolean",
      "description": "Whether the input value is NaN or not."
    },
    "tests": {
      "isNanTrue": {
        "description": "Check a NaN value.",
        "input": {
          "value": "NaN"
        },
        "expected": true
      },
      "isNanFalse": {
        "description": "Check a non-NaN value.",
        "input": {
          "value": 42
        },
        "expected": false
      }
    },
    "examples": [
      {
        "description": "Check a positive infinity value.",
        "input": {
          "value": "Infinity"
        },
        "expected": false
      },
      {
        "description": "Check a value resulting from 0 divided by 0.",
        "input": {
          "value": "0/0"
        },
        "expected": true
      },
      {
        "description": "Check a string value.",
        "input": {
          "value": "NaN"
        },
        "expected": true
      }
    ]
  },
  {
    "define": "_functions.Number.IsNegative",
    "blueprint": "_blueprints.Flowgraph",
    "description": "Checks if the input value is negative.",
    "parameters": {
      "value": {
        "type": "_types.Number",
        "description": "The value to check."
      }
    },
    "implementation": {
      "javascript": {
        "code": "return $$args.value < 0;\n"
      }
    },
    "returns": {
      "type": "_types.Boolean",
      "description": "True if the value is negative, false otherwise."
    },
    "tests": {
      "NegativeNumber": {
        "description": "The input value is a negative number.",
        "input": {
          "value": -1
        },
        "expected": true
      },
      "PositiveNumber": {
        "description": "The input value is a positive number.",
        "input": {
          "value": 1
        },
        "expected": false
      }
    },
    "examples": [
      {
        "description": "Check if zero is negative.",
        "input": {
          "value": 0
        },
        "expected": false
      },
      {
        "description": "Check if a large positive number is negative.",
        "input": {
          "value": 1000000
        },
        "expected": false
      },
      {
        "description": "Check if a small negative number is negative.",
        "input": {
          "value": -0.0001
        },
        "expected": true
      }
    ]
  },
  {
    "define": "_functions.Math.IsNumber",
    "blueprint": "_blueprints.Flowgraph",
    "description": "Checks if the provided value is a number.",
    "parameters": {
      "value": {
        "type": "_types.Any",
        "description": "The value to check."
      }
    },
    "implementation": {
      "javascript": {
        "code": "return typeof $$args.value === 'number';\n"
      }
    },
    "returns": {
      "type": "_types.Boolean",
      "description": "True if the value is a number, false otherwise."
    },
    "tests": {
      "ValidNumber": {
        "description": "Test with a valid number.",
        "input": {
          "value": 42
        },
        "expected": true
      },
      "InvalidNumber": {
        "description": "Test with an invalid number.",
        "input": {
          "value": "Hello, World!"
        },
        "expected": false
      }
    },
    "examples": [
      {
        "description": "Test with a floating point number.",
        "input": {
          "value": 3.14
        },
        "expected": true
      },
      {
        "description": "Test with a boolean value.",
        "input": {
          "value": true
        },
        "expected": false
      },
      {
        "description": "Test with an object.",
        "input": {
          "value": {
            "key": "value"
          }
        },
        "expected": false
      }
    ]
  },
  {
    "define": "_functions.Math.IsOdd",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Returns true if the given number is odd, false otherwise.",
    "parameters": {
      "input": {
        "type": "_types.Number",
        "description": "The number to check for oddness."
      }
    },
    "implementation": {
      "javascript": {
        "code": "return $$args.input % 2 !== 0;\n"
      }
    },
    "returns": {
      "type": "_types.Boolean",
      "description": "Whether the given number is odd or not."
    },
    "tests": {
      "isOddZero": {
        "description": "Check if 0 is an odd number.",
        "input": {
          "input": 0
        },
        "expected": false
      },
      "isOddOne": {
        "description": "Check if 1 is an odd number.",
        "input": {
          "input": 1
        },
        "expected": true
      },
      "isOddTwo": {
        "description": "Check if 2 is an odd number.",
        "input": {
          "input": 2
        },
        "expected": false
      },
      "isOddNegativeOne": {
        "description": "Check if -1 is an odd number.",
        "input": {
          "input": -1
        },
        "expected": true
      }
    },
    "examples": [
      {
        "description": "Check if the number 3 is odd.",
        "input": {
          "input": 3
        },
        "expected": true
      },
      {
        "description": "Check if the number -4 is odd.",
        "input": {
          "input": -4
        },
        "expected": false
      },
      {
        "description": "Check if the number 1001 is odd.",
        "input": {
          "input": 1001
        },
        "expected": true
      }
    ]
  },
  {
    "define": "_functions.String.IsString",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Checks if the provided value is a string.",
    "parameters": {
      "value": {
        "type": "_types.Any",
        "description": "The value to check."
      }
    },
    "implementation": {
      "javascript": {
        "code": "return typeof $$args.value === 'string';\n"
      }
    },
    "returns": {
      "type": "_types.Boolean",
      "description": "True if the value is a string, false otherwise."
    },
    "tests": {
      "ValidString": {
        "description": "Test with a valid string.",
        "input": {
          "value": "Hello, World!"
        },
        "expected": true
      },
      "InvalidString": {
        "description": "Test with an invalid string.",
        "input": {
          "value": 42
        },
        "expected": false
      }
    },
    "examples": [
      {
        "description": "Check a string with special characters.",
        "input": {
          "value": "@#$%^&*()_+"
        },
        "expected": true
      },
      {
        "description": "Check an empty string.",
        "input": {
          "value": ""
        },
        "expected": true
      },
      {
        "description": "Check a boolean value.",
        "input": {
          "value": true
        },
        "expected": false
      }
    ]
  },
  {
    "define": "_functions.List.Join",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Joins all elements of a list into a single string, with the specified separator between each element.",
    "parameters": {
      "list": {
        "type": "_types.List",
        "description": "The list of elements to join."
      },
      "separator": {
        "type": "_types.String",
        "description": "The separator to place between each element."
      }
    },
    "implementation": {
      "javascript": {
        "code": "return $$args.list.join($$args.separator);\n"
      }
    },
    "returns": {
      "type": "_types.String",
      "description": "The joined string."
    },
    "tests": {
      "joinWithComma": {
        "description": "Join a list of words with a comma.",
        "input": {
          "list": ["apple", "banana", "cherry"],
          "separator": ", "
        },
        "expected": "apple, banana, cherry"
      },
      "joinWithDash": {
        "description": "Join a list of words with a dash.",
        "input": {
          "list": ["2021", "12", "25"],
          "separator": "-"
        },
        "expected": "2021-12-25"
      },
      "joinWithNoSeparator": {
        "description": "Join a list of words without a separator.",
        "input": {
          "list": ["hello", "world"],
          "separator": ""
        },
        "expected": "helloworld"
      }
    },
    "examples": [
      {
        "description": "Join a list of single letters with a period.",
        "input": {
          "list": ["a", "b", "c"],
          "separator": "."
        },
        "expected": "a.b.c"
      },
      {
        "description": "Join a list of numbers with a space.",
        "input": {
          "list": ["1", "2", "3"],
          "separator": " "
        },
        "expected": "1 2 3"
      },
      {
        "description": "Join a list of words with an underscore.",
        "input": {
          "list": ["one", "two", "three"],
          "separator": "_"
        },
        "expected": "one_two_three"
      }
    ]
  },
  {
    "define": "_functions.List.LastItem",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Returns the last item in a list.",
    "parameters": {
      "input": {
        "type": "_types.List",
        "description": "The list to get the last item from."
      }
    },
    "implementation": {
      "javascript": {
        "code": "return $$args.input.length > 0 ? $$args.input[$$args.input.length - 1] : null;\n"
      }
    },
    "returns": {
      "type": "_types.Any",
      "description": "The last item in the list."
    },
    "tests": {
      "lastItemInList": {
        "description": "Get the last item in a list.",
        "input": {
          "input": ["a", "b", "c"]
        },
        "expected": "c"
      },
      "lastItemInEmptyList": {
        "description": "Attempt to get the last item from an empty list.",
        "input": {
          "input": []
        },
        "expected": null
      },
      "lastItemInSingleElementList": {
        "description": "Get the last item in a list with only one element.",
        "input": {
          "input": ["x"]
        },
        "expected": "x"
      }
    },
    "examples": [
      {
        "description": "Get the last item from a list of numbers.",
        "input": {
          "input": [1, 2, 3, 4, 5]
        },
        "expected": 5
      },
      {
        "description": "Get the last item from a list with mixed types.",
        "input": {
          "input": ["apple", 10, true, "banana"]
        },
        "expected": "banana"
      },
      {
        "description": "Get the last item from a list of boolean values.",
        "input": {
          "input": [true, false, true]
        },
        "expected": true
      }
    ]
  },
  {
    "define": "_functions.Math.LeastCommonMultiple",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Calculates the least common multiple (LCM) of two given numbers.",
    "parameters": {
      "a": {
        "type": "_types.Number",
        "description": "The first number."
      },
      "b": {
        "type": "_types.Number",
        "description": "The second number."
      }
    },
    "implementation": {
      "javascript": {
        "code": "function gcd(a, b) {\n  if (b === 0) return a;\n  return gcd(b, a % b);\n}\nfunction lcm(a, b) {\n  if (a === 0 || b === 0) return 0;\n  return Math.abs(a * b) / gcd(a, b);\n}\nreturn lcm($$args.a, $$args.b);\n"
      }
    },
    "returns": {
      "type": "_types.Number",
      "description": "The least common multiple of the two numbers."
    },
    "tests": {
      "lcmSimple": {
        "description": "Calculate the LCM of simple numbers.",
        "input": {
          "a": 4,
          "b": 6
        },
        "expected": 12
      },
      "lcmNegative": {
        "description": "Calculate the LCM of negative numbers.",
        "input": {
          "a": -8,
          "b": -12
        },
        "expected": -24
      },
      "lcmZero": {
        "description": "Calculate the LCM when one number is zero.",
        "input": {
          "a": 0,
          "b": 5
        },
        "expected": 0
      },
      "lcmBothZero": {
        "description": "Calculate the LCM when both numbers are zero.",
        "input": {
          "a": 0,
          "b": 0
        },
        "expected": 0
      }
    },
    "examples": [
      {
        "description": "Calculate the LCM of one positive and one negative number.",
        "input": {
          "a": 4,
          "b": -5
        },
        "expected": 20
      },
      {
        "description": "Calculate the LCM of two prime numbers.",
        "input": {
          "a": 7,
          "b": 11
        },
        "expected": 77
      },
      {
        "description": "Calculate the LCM of two relatively prime numbers.",
        "input": {
          "a": 9,
          "b": 28
        },
        "expected": 252
      }
    ]
  },
  {
    "define": "_functions.String.LeftPad",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Pads a string to the left with a specified filler character.",
    "parameters": {
      "text": {
        "type": "_types.String",
        "description": "The original string to be padded."
      },
      "length": {
        "type": "_types.Number",
        "description": "The desired length of the padded string."
      },
      "filler": {
        "type": "_types.String",
        "description": "The character used to pad the string."
      }
    },
    "implementation": {
      "javascript": {
        "code": "let result = $$args.text;\nif (result.length < $$args.length) {\n  for (let i = 0; i < ($$args.length - result.length); i++) {\n    result = $$args.filler + result;\n  }\n}\nreturn result;\n"
      }
    },
    "returns": {
      "type": "_types.String",
      "description": "The padded string."
    },
    "tests": {
      "leftPadSimple": {
        "description": "Pad a simple string.",
        "input": {
          "text": "hello",
          "length": 10,
          "filler": " "
        },
        "expected": "   hello"
      },
      "leftPadLongerThanText": {
        "description": "Pad the string when it's shorter than the desired length.",
        "input": {
          "text": "hi",
          "length": 20,
          "filler": "-"
        },
        "expected": "---------hi"
      },
      "leftPadEqualLength": {
        "description": "The original string is already at the desired length.",
        "input": {
          "text": "hello",
          "length": 5,
          "filler": "*"
        },
        "expected": "hello"
      }
    },
    "examples": [
      {
        "description": "Pad a numeric string to the left with zeros.",
        "input": {
          "text": "123",
          "length": 5,
          "filler": "0"
        },
        "expected": "00123"
      },
      {
        "description": "Pad a string with special characters.",
        "input": {
          "text": "test",
          "length": 10,
          "filler": "*"
        },
        "expected": "******test"
      },
      {
        "description": "Pad an empty string with asterisks.",
        "input": {
          "text": "",
          "length": 6,
          "filler": "*"
        },
        "expected": "******"
      }
    ]
  },
  {
    "define": "_functions.String.LeftStrip",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Removes leading whitespace characters from the input string.",
    "parameters": {
      "text": {
        "type": "_types.String",
        "description": "The input string to strip."
      }
    },
    "implementation": {
      "javascript": {
        "code": "return $$args.text.trimLeft().toString();\n"
      }
    },
    "returns": {
      "type": "_types.String",
      "description": "The input string with leading whitespace removed."
    },
    "tests": {
      "leftStripSimple": {
        "description": "Strip leading whitespace from a simple string.",
        "input": {
          "text": "   hello"
        },
        "expected": "hello"
      },
      "leftStripMultipleSpaces": {
        "description": "Strip multiple spaces from the beginning of a string.",
        "input": {
          "text": "     world"
        },
        "expected": "world"
      },
      "leftStripNoWhitespace": {
        "description": "Strip when there is no leading whitespace.",
        "input": {
          "text": "hello"
        },
        "expected": "hello"
      }
    },
    "examples": [
      {
        "description": "Strip leading whitespace from a string with a single space.",
        "input": {
          "text": " hello"
        },
        "expected": "hello"
      },
      {
        "description": "Strip leading whitespace from a string with tabs and spaces.",
        "input": {
          "text": " \\t  welcome"
        },
        "expected": "welcome"
      },
      {
        "description": "Strip leading whitespace from a string that has leading newlines.",
        "input": {
          "text": "\\n\\n   greetings"
        },
        "expected": "greetings"
      }
    ]
  },
  {
    "define": "_functions.Math.LessThan",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Check if a number is less than another number.",
    "parameters": {
      "a": {
        "type": "_types.Number",
        "description": "The first number to be compared."
      },
      "b": {
        "type": "_types.Number",
        "description": "The second number to be compared."
      }
    },
    "implementation": {
      "javascript": {
        "code": "return $$args.a < $$args.b;\n"
      }
    },
    "returns": {
      "type": "_types.Boolean",
      "description": "Returns true if a is less than b, and false otherwise."
    },
    "tests": {
      "lessThanTest": {
        "description": "Check if a number is less than another number.",
        "input": {
          "a": 3,
          "b": 5
        },
        "expected": true
      }
    },
    "examples": [
      {
        "description": "Compare two negative numbers.",
        "input": {
          "a": -3,
          "b": -1
        },
        "expected": true
      },
      {
        "description": "Compare two large numbers.",
        "input": {
          "a": 1000000,
          "b": 1000001
        },
        "expected": true
      },
      {
        "description": "Compare a number to itself.",
        "input": {
          "a": 7,
          "b": 7
        },
        "expected": false
      }
    ]
  },
  {
    "define": "_functions.Math.LessThanOrEqual",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Check if a number is less than or equal to another number.",
    "parameters": {
      "a": {
        "type": "_types.Number",
        "description": "The first number to be compared."
      },
      "b": {
        "type": "_types.Number",
        "description": "The second number to be compared."
      }
    },
    "implementation": {
      "javascript": {
        "code": "return $$args.a <= $$args.b;\n"
      }
    },
    "returns": {
      "type": "_types.Boolean",
      "description": "Returns true if a is less than or equal to b, and false otherwise."
    },
    "tests": {
      "lessThanOrEqualTest": {
        "description": "Check if a number is less than or equal to another number.",
        "input": {
          "a": 3,
          "b": 5
        },
        "expected": true
      }
    },
    "examples": [
      {
        "description": "Check if 10 is less than or equal to 10.",
        "input": {
          "a": 10,
          "b": 10
        },
        "expected": true
      },
      {
        "description": "Check if -2 is less than or equal to 1.",
        "input": {
          "a": -2,
          "b": 1
        },
        "expected": true
      },
      {
        "description": "Check if 15 is less than or equal to 7.",
        "input": {
          "a": 15,
          "b": 7
        },
        "expected": false
      }
    ]
  },
  {
    "define": "_functions.Math.Lighten",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Lightens a color by increasing its lightness.",
    "parameters": {
      "color": {
        "type": "_types.Dictionary",
        "description": "The color to lighten, in HSL format."
      },
      "amount": {
        "type": "_types.Number",
        "description": "The amount to lighten the color by (0-1.0)."
      }
    },
    "implementation": {
      "javascript": {
        "code": "function lighten(color, amount) {\n  const newLightness = Math.min(color.l + amount, 1.0);\n  return { h: color.h, s: color.s, l: newLightness };\n}\n\nreturn lighten($$args.color, $$args.amount);\n"
      }
    },
    "returns": {
      "type": "_types.Dictionary",
      "description": "The lightened color in HSL format."
    },
    "tests": {
      "lightenSimple": {
        "description": "Lighten a simple color.",
        "input": {
          "color": {
            "h": 120,
            "s": 1,
            "l": 0.5
          },
          "amount": 0.2
        },
        "expected": {
          "h": 120,
          "s": 1,
          "l": 0.7
        }
      },
      "lightenToMax": {
        "description": "Lighten a color to the maximum lightness.",
        "input": {
          "color": {
            "h": 240,
            "s": 1,
            "l": 0.9
          },
          "amount": 0.2
        },
        "expected": {
          "h": 240,
          "s": 1,
          "l": 1
        }
      }
    },
    "examples": [
      {
        "description": "Lighten a dark color slightly.",
        "input": {
          "color": {
            "h": 0,
            "s": 1,
            "l": 0.2
          },
          "amount": 0.1
        },
        "expected": {
          "h": 0,
          "s": 1,
          "l": 0.3
        }
      },
      {
        "description": "Lighten a light color by a small amount.",
        "input": {
          "color": {
            "h": 60,
            "s": 0.5,
            "l": 0.8
          },
          "amount": 0.05
        },
        "expected": {
          "h": 60,
          "s": 0.5,
          "l": 0.85
        }
      },
      {
        "description": "Lighten a fully saturated color to mid-lightness.",
        "input": {
          "color": {
            "h": 300,
            "s": 1,
            "l": 0.4
          },
          "amount": 0.3
        },
        "expected": {
          "h": 300,
          "s": 1,
          "l": 0.7
        }
      }
    ]
  },
  {
    "define": "_functions.Math.Lightness",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Calculates the lightness of a given color.",
    "parameters": {
      "color": {
        "type": "_types.String",
        "description": "The color to calculate the lightness of, in the format \"RRGGBB\" where RR is red, GG is green, and BB is blue."
      }
    },
    "implementation": {
      "javascript": {
        "code": "const rgb = /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/g.exec($$args.color);\nif (rgb) {\n  const r = parseInt(rgb[1], 16) / 255,\n        g = parseInt(rgb[2], 16) / 255,\n        b = parseInt(rgb[3], 16) / 255;\n  const max = Math.max(r, g, b);\n  const min = Math.min(r, g, b);\n  const lightness = (max + min) / 2;\n  return lightness;\n} else {\n  throw new Error('Invalid color');\n}\n"
      }
    },
    "returns": {
      "type": "_types.Number",
      "description": "The lightness of the color."
    },
    "tests": {
      "lightnessSimple": {
        "description": "Calculate the lightness of a simple RGB color.",
        "input": {
          "color": "#FFFFFF"
        },
        "expected": 1
      },
      "lightnessComplex": {
        "description": "Calculate the lightness of a complex RGB color.",
        "input": {
          "color": "#FF0000"
        },
        "expected": 0.5
      },
      "lightnessMid": {
        "description": "Calculate the lightness of a mid-tone RGB color.",
        "input": {
          "color": "#808080"
        },
        "expected": 0.5019607843137255
      }
    },
    "examples": [
      {
        "description": "Calculate the lightness of a dark color.",
        "input": {
          "color": "#000000"
        },
        "expected": 0
      },
      {
        "description": "Calculate the lightness of a bright color.",
        "input": {
          "color": "#00FF00"
        },
        "expected": 0.5
      },
      {
        "description": "Calculate the lightness of a gray color.",
        "input": {
          "color": "#A9A9A9"
        },
        "expected": 0.6627450980392157
      }
    ]
  },
  {
    "define": "_functions.List.Contains",
    "blueprint": "_blueprints.Function",
    "description": "Checks if a list contains a specific value",
    "parameters": {
      "list": {
        "type": "_types.List",
        "items": {
          "type": "_types.Any"
        }
      }
    },
    "implementation": {
      "javascript": {
        "code": "return $$args.list.includes($$args.value);\n"
      }
    },
    "returns": {
      "type": "_types.Boolean"
    },
    "tests": {
      "test1": {
        "description": "Should return true if the list contains the value",
        "input": {
          "list": [1, 2, 3, 4, 5],
          "value": 3
        },
        "expected": true
      },
      "test2": {
        "description": "Should return false if the list does not contain the value",
        "input": {
          "list": [1, 2, 3, 4, 5],
          "value": 6
        },
        "expected": false
      }
    },
    "examples": [
      {
        "description": "Should return true for string value in list",
        "input": {
          "list": ["apple", "banana", "cherry"],
          "value": "banana"
        },
        "expected": true
      },
      {
        "description": "Should return false for a missing string value in list",
        "input": {
          "list": ["apple", "banana", "cherry"],
          "value": "orange"
        },
        "expected": false
      },
      {
        "description": "Should return true for boolean value in list",
        "input": {
          "list": [true, false, false],
          "value": true
        },
        "expected": true
      }
    ]
  },
  {
    "define": "_functions.List.Length",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Returns length of given list",
    "parameters": {
      "list": {
        "type": "_types.List",
        "description": "The list to get the length of."
      }
    },
    "implementation": {
      "javascript": {
        "code": "return $$args.list.length\n"
      }
    },
    "returns": {
      "type": "_types.Number",
      "description": "The length of the list."
    },
    "tests": {
      "greaterThanZero": {
        "description": "Should return greater than zero",
        "input": {
          "list": [1, 2]
        },
        "expected": 2
      },
      "empty": {
        "description": "Should return 0 for empty list",
        "input": {
          "list": []
        },
        "expected": 0
      }
    },
    "examples": [
      {
        "description": "Should return 3 for a list with three elements.",
        "input": {
          "list": [1, 2, 3]
        },
        "expected": 3
      },
      {
        "description": "Should return 5 for a list with five elements.",
        "input": {
          "list": [10, 20, 30, 40, 50]
        },
        "expected": 5
      },
      {
        "description": "Should return 4 for a list with mixed types.",
        "input": {
          "list": ["a", "b", 1, true]
        },
        "expected": 4
      }
    ]
  },
  {
    "define": "_functions.Date.LocalTimezone",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Returns the local timezone information.",
    "parameters": {
      "input": {
        "type": "_types.Any",
        "description": "The input to get local timezone from."
      }
    },
    "implementation": {
      "javascript": {
        "code": "return new Date().getTimezoneOffset();\n"
      }
    },
    "returns": {
      "type": "_types.Number",
      "description": "The local timezone offset in minutes."
    },
    "tests": {
      "localTimezoneSimple": {
        "description": "Get the local timezone.",
        "input": {},
        "expected": 0
      }
    },
    "examples": [
      {
        "description": "Get local timezone offset in the morning.",
        "input": {},
        "expected": 0
      },
      {
        "description": "Get local timezone offset after changing time zones.",
        "input": {},
        "expected": 0
      },
      {
        "description": "Get local timezone offset during daylight saving time.",
        "input": {},
        "expected": 0
      }
    ]
  },
  {
    "define": "_functions.String.Log",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Logs a string",
    "parameters": {
      "messages": {
        "type": "_types.List",
        "items": {
          "type": "_types.String"
        }
      }
    },
    "implementation": {
      "javascript": {
        "code": "console.log($$args.messages.join('\\n'))\n"
      }
    },
    "tests": {
      "log1": {
        "description": "Logs a string",
        "input": {
          "messages": ["Hello Log call 1"]
        },
        "expected": null
      },
      "log2": {
        "description": "Logs multiple strings",
        "input": {
          "messages": ["Hello Log call 2", "Hello Log call 3"]
        },
        "expected": null
      }
    },
    "examples": [
      {
        "description": "Logs a single message with punctuation.",
        "input": {
          "messages": ["Hello, world!"]
        },
        "expected": null
      },
      {
        "description": "Logs multiple messages with special characters.",
        "input": {
          "messages": ["First line!", "Second line @@"]
        },
        "expected": null
      },
      {
        "description": "Logs a message with a number.",
        "input": {
          "messages": ["Number in log: 123"]
        },
        "expected": null
      }
    ]
  },
  {
    "define": "_functions.Math.Log10",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Calculates the base-10 logarithm of a given number.",
    "parameters": {
      "input": {
        "type": "_types.Number",
        "description": "The number to calculate the log of."
      }
    },
    "implementation": {
      "javascript": {
        "code": "function log10(input) {\n  if (input <= 0) {\n    return null; // Or handle it as needed for invalid inputs\n  }\n  return Math.log10(input);\n}\nreturn log10($$args.input);\n"
      }
    },
    "returns": {
      "type": "_types.Number",
      "description": "The base-10 logarithm of the input number."
    },
    "tests": {
      "log10Positive": {
        "description": "Calculate the log of a positive number.",
        "input": {
          "input": 100
        },
        "expected": 2
      },
      "log10One": {
        "description": "Calculate the log of 1.",
        "input": {
          "input": 1
        },
        "expected": 0
      },
      "log10Ten": {
        "description": "Calculate the log of 10.",
        "input": {
          "input": 10
        },
        "expected": 1
      },
      "log10Fraction": {
        "description": "Calculate the log of a fractional positive number.",
        "input": {
          "input": 0.1
        },
        "expected": -1
      }
    },
    "examples": [
      {
        "description": "Calculate the log of a large positive number.",
        "input": {
          "input": 1000
        },
        "expected": 3
      },
      {
        "description": "Calculate the log of a small positive fraction.",
        "input": {
          "input": 0.01
        },
        "expected": -2
      },
      {
        "description": "Calculate the log of a positive number that is not an integer.",
        "input": {
          "input": 5
        },
        "expected": 0.69897
      }
    ]
  },
  {
    "define": "_functions.Math.Log2",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Calculates the logarithm base 2 of a given number.",
    "parameters": {
      "input": {
        "type": "_types.Number",
        "description": "The number to calculate the log2 of."
      }
    },
    "implementation": {
      "javascript": {
        "code": "function log2(input) {\n  if (input <= 0) {\n    return null; // Or handle it as needed for invalid inputs\n  }\n  return Math.log2(input);\n}\nreturn log2($$args.input);\n"
      }
    },
    "returns": {
      "type": "_types.Number",
      "description": "The logarithm base 2 of the input number."
    },
    "tests": {
      "log2One": {
        "description": "Calculate the log2 of 1.",
        "input": {
          "input": 1
        },
        "expected": 0
      },
      "log2Two": {
        "description": "Calculate the log2 of 2.",
        "input": {
          "input": 2
        },
        "expected": 1
      },
      "log2Four": {
        "description": "Calculate the log2 of 4.",
        "input": {
          "input": 4
        },
        "expected": 2
      },
      "log2Eight": {
        "description": "Calculate the log2 of 8.",
        "input": {
          "input": 8
        },
        "expected": 3
      },
      "log2Fraction": {
        "description": "Calculate the log2 of a fractional positive number.",
        "input": {
          "input": 0.5
        },
        "expected": -1
      }
    },
    "examples": [
      {
        "description": "Calculate the log2 of 16.",
        "input": {
          "input": 16
        },
        "expected": 4
      },
      {
        "description": "Calculate the log2 of 32.",
        "input": {
          "input": 32
        },
        "expected": 5
      },
      {
        "description": "Calculate the log2 of 0.25.",
        "input": {
          "input": 0.25
        },
        "expected": -2
      }
    ]
  },
  {
    "define": "_functions.Math.Logarithm",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Calculates the logarithm of a number with a specified base.",
    "parameters": {
      "number": {
        "type": "_types.Number",
        "description": "The number to calculate the logarithm of."
      },
      "base": {
        "type": "_types.Number",
        "description": "The base of the logarithm."
      }
    },
    "implementation": {
      "javascript": {
        "code": "return Math.log($$args.number) / Math.log($$args.base);\n"
      }
    },
    "returns": {
      "type": "_types.Number",
      "description": "The logarithm of the number with the specified base."
    },
    "tests": {
      "logBase10": {
        "description": "Calculate the base-10 logarithm of a number.",
        "input": {
          "number": 100,
          "base": 10
        },
        "expected": 2
      },
      "logBase2": {
        "description": "Calculate the base-2 logarithm of a number.",
        "input": {
          "number": 8,
          "base": 2
        },
        "expected": 3
      }
    },
    "examples": [
      {
        "description": "Calculate the base-5 logarithm of 625.",
        "input": {
          "number": 625,
          "base": 5
        },
        "expected": 4
      },
      {
        "description": "Calculate the base-3 logarithm of 81.",
        "input": {
          "number": 81,
          "base": 3
        },
        "expected": 4
      },
      {
        "description": "Calculate the base-7 logarithm of 343.",
        "input": {
          "number": 343,
          "base": 7
        },
        "expected": 3
      }
    ]
  },
  {
    "define": "_functions.List.Lookup",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Finds the first item in a list that matches the given value.",
    "parameters": {
      "input": {
        "type": "_types.List",
        "description": "The list to search for the value."
      },
      "target": {
        "type": "_types.Any",
        "description": "The value to look up."
      }
    },
    "implementation": {
      "javascript": {
        "code": "return $$args.input.find((element) => element === $$args.target);\n"
      }
    },
    "returns": {
      "type": "_types.Any",
      "description": "The found item in the list, or undefined if not found."
    },
    "tests": {
      "lookupSimple": {
        "description": "Look up a simple value.",
        "input": {
          "input": ["apple", "banana", "orange"],
          "target": "banana"
        },
        "expected": "banana"
      },
      "lookupNotFound": {
        "description": "Attempt to look up when not found.",
        "input": {
          "input": ["apple", "banana", "orange"],
          "target": "grape"
        },
        "expected": null
      }
    },
    "examples": [
      {
        "description": "Look up a numeric value in a list of numbers.",
        "input": {
          "input": [1, 2, 3, 4, 5],
          "target": 3
        },
        "expected": 3
      },
      {
        "description": "Look up a boolean value in a list of mixed types.",
        "input": {
          "input": [1, "banana", true, null],
          "target": true
        },
        "expected": true
      },
      {
        "description": "Look up a null value in a list containing null.",
        "input": {
          "input": ["apple", "banana", null],
          "target": null
        },
        "expected": null
      }
    ]
  },
  {
    "define": "_functions.String.LowerCase",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Converts a string to lowercase",
    "parameters": {
      "string": {
        "type": "_types.String",
        "description": "The string to convert to lowercase"
      }
    },
    "implementation": {
      "javascript": {
        "code": "return $$args.string.toLowerCase();\n"
      }
    },
    "returns": {
      "type": "_types.String",
      "description": "The lowercase string"
    },
    "tests": {
      "fullLowercase": {
        "description": "Test with a lowercase string",
        "input": {
          "string": "hello"
        },
        "expected": "hello"
      },
      "fullUppercase": {
        "description": "Test with an uppercase string",
        "input": {
          "string": "WORLD"
        },
        "expected": "world"
      }
    },
    "examples": [
      {
        "description": "Convert a mixed-case string",
        "input": {
          "string": "HeLLo WoRLd"
        },
        "expected": "hello world"
      },
      {
        "description": "Convert a single uppercase letter",
        "input": {
          "string": "A"
        },
        "expected": "a"
      },
      {
        "description": "Convert a string with numbers and symbols",
        "input": {
          "string": "JavaScript 101!"
        },
        "expected": "javascript 101!"
      }
    ]
  },
  {
    "define": "_functions.Math.Mix",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Returns a new list that combines the elements of two lists in alternating order.",
    "parameters": {
      "list1": {
        "type": "_types.List",
        "description": "The first list to mix."
      },
      "list2": {
        "type": "_types.List",
        "description": "The second list to mix."
      }
    },
    "implementation": {
      "javascript": {
        "code": "const result = [];\nfor (let i = 0; i < $$args.list1.length || i < $$args.list2.length; i++) {\n  if (i < $$args.list1.length) {\n    result.push($$args.list1[i]);\n  }\n  if (i < $$args.list2.length) {\n    result.push($$args.list2[i]);\n  }\n}\nreturn result;\n"
      }
    },
    "returns": {
      "type": "_types.List",
      "description": "The mixed list."
    },
    "tests": {
      "mixTwoLists": {
        "description": "Mix two lists.",
        "input": {
          "list1": [1, 3],
          "list2": [2, 4]
        },
        "expected": [1, 2, 3, 4]
      }
    },
    "examples": [
      {
        "description": "Mix two lists of different lengths.",
        "input": {
          "list1": [1, 3, 5],
          "list2": [2, 4]
        },
        "expected": [1, 2, 3, 4, 5]
      },
      {
        "description": "Mix two lists with string elements.",
        "input": {
          "list1": ["a", "c"],
          "list2": ["b", "d"]
        },
        "expected": ["a", "b", "c", "d"]
      },
      {
        "description": "Mix a list with elements with an empty list.",
        "input": {
          "list1": [1, 2, 3],
          "list2": []
        },
        "expected": [1, 2, 3]
      }
    ]
  },
  {
    "define": "_functions.String.MatchesRegex",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Returns true or false if the text is matched by the given regular expression pattern.",
    "parameters": {
      "text": {
        "type": "_types.String",
        "description": "The text to test."
      },
      "pattern": {
        "type": "_types.String",
        "description": "The regular expression pattern to match against."
      }
    },
    "implementation": {
      "javascript": {
        "code": "const regex = new RegExp($$args.pattern);\nreturn regex.test($$args.text);\n"
      }
    },
    "returns": {
      "type": "_types.Boolean",
      "description": "True if the text matches the regular expression pattern, otherwise false."
    },
    "tests": {
      "matchesRegexComplexPattern": {
        "description": "Test if the text matches a complex pattern.",
        "input": {
          "text": "abc123",
          "pattern": "^[a-z]+\\d+$"
        },
        "expected": true
      },
      "matchesRegexTrue": {
        "description": "Test if the text matches the given pattern.",
        "input": {
          "text": "hello world",
          "pattern": "^hello"
        },
        "expected": true
      },
      "matchesRegexFalse": {
        "description": "Test if the text does not match the given pattern.",
        "input": {
          "text": "hello world",
          "pattern": "world$"
        },
        "expected": true
      },
      "matchesRegexCaseInsensitive": {
        "description": "Test if the text matches the given pattern with case insensitivity.",
        "input": {
          "text": "Hello World",
          "pattern": "^hello"
        },
        "expected": false
      }
    },
    "examples": [
      {
        "description": "Test if text contains only digits.",
        "input": {
          "text": "12345",
          "pattern": "^\\d+$"
        },
        "expected": true
      },
      {
        "description": "Test if text matches a pattern with whitespace.",
        "input": {
          "text": "foo bar",
          "pattern": "foo\\sbar"
        },
        "expected": true
      },
      {
        "description": "Test if text does not match a pattern with special character.",
        "input": {
          "text": "hello-world",
          "pattern": "hello world"
        },
        "expected": false
      }
    ]
  },
  {
    "define": "_functions.Math.Max",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Finds the maximum value in a list of numbers.",
    "parameters": {
      "numbers": {
        "type": "_types.List",
        "description": "The list of numbers to find the maximum value in.",
        "items": {
          "type": "_types.Number"
        }
      }
    },
    "implementation": {
      "javascript": {
        "code": "return Math.max(...$$args.numbers);\n"
      }
    },
    "returns": {
      "type": "_types.Number",
      "description": "The maximum value in the list of numbers."
    },
    "tests": {
      "maxOfNumbers": {
        "description": "Find the maximum of a list of numbers.",
        "input": {
          "numbers": [4, 2, 8, 6]
        },
        "expected": 8
      },
      "maxWithNegativeNumbers": {
        "description": "Find the maximum of a list with negative numbers.",
        "input": {
          "numbers": [-1, -5, 0, 3]
        },
        "expected": 3
      },
      "maxSingleNumber": {
        "description": "Find the maximum of a list with a single number.",
        "input": {
          "numbers": [7]
        },
        "expected": 7
      }
    },
    "examples": [
      {
        "description": "Find the maximum value with positive and negative numbers.",
        "input": {
          "numbers": [10, -10, 5, 3]
        },
        "expected": 10
      },
      {
        "description": "Find the maximum value in a list with all positive numbers.",
        "input": {
          "numbers": [5, 12, 7, 2]
        },
        "expected": 12
      },
      {
        "description": "Find the maximum value in a list with duplicate numbers.",
        "input": {
          "numbers": [3, 7, 7, 1]
        },
        "expected": 7
      }
    ]
  },
  {
    "define": "_functions.Number.Median",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Returns the middle value of a list when it is sorted.",
    "parameters": {
      "list": {
        "type": "_types.List",
        "description": "The list of numbers to calculate the median from."
      }
    },
    "implementation": {
      "javascript": {
        "code": "const sortedList = $$args.list.sort((a, b) => a - b);\nconst len = sortedList.length;\nif (len % 2 === 0) {\n  return (sortedList[len / 2 - 1] + sortedList[len / 2]) / 2;\n} else {\n  return sortedList[Math.floor(len / 2)];\n}\n"
      }
    },
    "returns": {
      "type": "_types.Number",
      "description": "The median value of the list when sorted."
    },
    "tests": {
      "medianOddLength": {
        "description": "Calculate the median of a list with odd length.",
        "input": {
          "list": [1, 2, 3, 4, 5]
        },
        "expected": 3
      },
      "medianEvenLength": {
        "description": "Calculate the median of a list with even length.",
        "input": {
          "list": [1, 2, 3, 4]
        },
        "expected": 2.5
      },
      "medianMixedValues": {
        "description": "Calculate the median of a list with mixed values.",
        "input": {
          "list": [10, 5, 8, 2, 3, 7, 1]
        },
        "expected": 5
      },
      "medianRepeatedValues": {
        "description": "Calculate the median of a list with repeated values.",
        "input": {
          "list": [2, 2, 3, 3, 4, 4, 5, 5]
        },
        "expected": 3.5
      }
    },
    "examples": [
      {
        "description": "Calculate the median of a list with negative values.",
        "input": {
          "list": [-5, -1, -3]
        },
        "expected": -3
      },
      {
        "description": "Calculate the median of a list with large numbers.",
        "input": {
          "list": [1001, 2002, 3003, 4004, 5005]
        },
        "expected": 3003
      },
      {
        "description": "Calculate the median of a list with floating-point numbers.",
        "input": {
          "list": [1.1, 2.2, 3.3]
        },
        "expected": 2.2
      }
    ]
  },
  {
    "define": "_functions.List.Merge",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Merges multiple lists into one.",
    "parameters": {
      "lists": {
        "type": "_types.List",
        "description": "The list(s) to merge."
      },
      "from": {
        "type": "_types.Number",
        "description": "The index at which the merging starts. If omitted, all items are merged."
      }
    },
    "implementation": {
      "javascript": {
        "code": "let result = [...$$args.lists];\nif ($$args.from !== undefined) {\n  result = result.slice($$args.from);\n}\nreturn result;\n"
      }
    },
    "returns": {
      "type": "_types.List",
      "description": "The merged list(s)."
    },
    "tests": {
      "mergeSimple": {
        "description": "Merge two lists.",
        "input": {
          "lists": ["a", "b"],
          "from": 0
        },
        "expected": ["a", "b"]
      },
      "mergeThreeLists": {
        "description": "Merge three lists.",
        "input": {
          "lists": ["a", "b", "c", "d", "e", "f", "g"],
          "from": 2
        },
        "expected": ["c", "d", "e", "f", "g"]
      },
      "mergeOneList": {
        "description": "Merge a single list.",
        "input": {
          "lists": ["a", "b", "c"],
          "from": 0
        },
        "expected": ["a", "b", "c"]
      }
    },
    "examples": [
      {
        "description": "Merge two lists starting from a specific index.",
        "input": {
          "lists": ["x", "y", "z", "a", "b", "c"],
          "from": 3
        },
        "expected": ["a", "b", "c"]
      },
      {
        "description": "Merge a list starting from the beginning.",
        "input": {
          "lists": ["1", "2", "3", "4"],
          "from": 0
        },
        "expected": ["1", "2", "3", "4"]
      },
      {
        "description": "Merge a list with no starting index.",
        "input": {
          "lists": ["apple", "banana", "cherry"]
        },
        "expected": ["apple", "banana", "cherry"]
      }
    ]
  },
  {
    "define": "_functions.String.MimeType",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Returns the MIME type of a given file extension.",
    "parameters": {
      "extension": {
        "type": "_types.String",
        "description": "The file extension to determine the MIME type for."
      }
    },
    "implementation": {
      "javascript": {
        "code": "const mimeTypes = {\n  \"txt\": \"text/plain\",\n  \"html\": \"text/html\",\n  \"css\": \"text/css\",\n  \"js\": \"application/javascript\",\n  \"json\": \"application/json\"\n};\nreturn mimeTypes[$$args.extension] || \"application/octet-stream\";\n"
      }
    },
    "returns": {
      "type": "_types.String",
      "description": "The MIME type of the given file extension."
    },
    "tests": {
      "mimeTypeText": {
        "description": "Determine the MIME type for a text file.",
        "input": {
          "extension": "txt"
        },
        "expected": "text/plain"
      },
      "mimeTypeHtml": {
        "description": "Determine the MIME type for an HTML file.",
        "input": {
          "extension": "html"
        },
        "expected": "text/html"
      },
      "mimeTypeUnknown": {
        "description": "Determine the MIME type for an unknown file extension.",
        "input": {
          "extension": "xlr"
        },
        "expected": "application/octet-stream"
      }
    },
    "examples": [
      {
        "description": "Determine the MIME type for a CSS file.",
        "input": {
          "extension": "css"
        },
        "expected": "text/css"
      },
      {
        "description": "Determine the MIME type for a JavaScript file.",
        "input": {
          "extension": "js"
        },
        "expected": "application/javascript"
      },
      {
        "description": "Determine the MIME type for a JSON file.",
        "input": {
          "extension": "json"
        },
        "expected": "application/json"
      }
    ]
  },
  {
    "define": "_functions.Math.Min",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Finds the minimum value in a list of numbers.",
    "parameters": {
      "numbers": {
        "type": "_types.List",
        "description": "The list of numbers to find the minimum value in.",
        "items": {
          "type": "_types.Number"
        }
      }
    },
    "implementation": {
      "javascript": {
        "code": "return Math.min(...$$args.numbers);\n"
      }
    },
    "returns": {
      "type": "_types.Number",
      "description": "The minimum value in the list of numbers."
    },
    "tests": {
      "minOfNumbers": {
        "description": "Find the minimum of a list of numbers.",
        "input": {
          "numbers": [4, 2, 8, 6]
        },
        "expected": 2
      },
      "minWithNegativeNumbers": {
        "description": "Find the minimum of a list with negative numbers.",
        "input": {
          "numbers": [-1, -5, 0, 3]
        },
        "expected": -5
      },
      "minSingleNumber": {
        "description": "Find the minimum of a list with a single number.",
        "input": {
          "numbers": [7]
        },
        "expected": 7
      }
    },
    "examples": [
      {
        "description": "Find the minimum in a sorted list of positive numbers.",
        "input": {
          "numbers": [10, 20, 30, 40]
        },
        "expected": 10
      },
      {
        "description": "Find the minimum in a list with decimal numbers.",
        "input": {
          "numbers": [2.5, 3.1, 1.4, 4.8]
        },
        "expected": 1.4
      },
      {
        "description": "Find the minimum in a list with repeating numbers.",
        "input": {
          "numbers": [5, 3, 5, 3]
        },
        "expected": 3
      }
    ]
  },
  {
    "define": "_functions.String.Mirr",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Creates a mirrored string from the given input.",
    "parameters": {
      "input": {
        "type": "_types.String",
        "description": "The input string to create a mirrored string from."
      }
    },
    "implementation": {
      "javascript": {
        "code": "return $$args.input + $$args.input.split('').reverse().join('');\n"
      }
    },
    "returns": {
      "type": "_types.String",
      "description": "The mirrored string."
    },
    "tests": {
      "mirrSimple": {
        "description": "Create a mirrored string from a simple input.",
        "input": {
          "input": "hello"
        },
        "expected": "helloolleh"
      },
      "mirrEmpty": {
        "description": "Create a mirrored string from an empty input.",
        "input": {
          "input": ""
        },
        "expected": ""
      },
      "mirrNumbers": {
        "description": "Create a mirrored string from a numeric input.",
        "input": {
          "input": "12345"
        },
        "expected": "1234554321"
      }
    },
    "examples": [
      {
        "description": "Create a mirrored string from a single character.",
        "input": {
          "input": "a"
        },
        "expected": "aa"
      },
      {
        "description": "Create a mirrored string from multiple words.",
        "input": {
          "input": "hello world"
        },
        "expected": "hello worlddlrow olleh"
      },
      {
        "description": "Create a mirrored string from a string with special characters.",
        "input": {
          "input": "!@#$$#@!"
        },
        "expected": "!@#$$#@!!@#$$#@!"
      }
    ]
  },
  {
    "define": "_functions.Math.Mod",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Returns the remainder of the division of the input number by the given divisor.",
    "parameters": {
      "dividend": {
        "type": "_types.Number",
        "description": "The number to divide and find the remainder."
      },
      "divisor": {
        "type": "_types.Number",
        "description": "The number to divide by."
      }
    },
    "implementation": {
      "javascript": {
        "code": "return $$args.dividend % $$args.divisor;\n"
      }
    },
    "returns": {
      "type": "_types.Number",
      "description": "The remainder of the division."
    },
    "tests": {
      "modSimple": {
        "description": "Calculate the modulus of a simple integer.",
        "input": {
          "dividend": 10,
          "divisor": 3
        },
        "expected": 1
      },
      "modDecimal": {
        "description": "Calculate the modulus of a decimal number.",
        "input": {
          "dividend": -0.5,
          "divisor": 2
        },
        "expected": -0.5
      },
      "modNegative": {
        "description": "Calculate the modulus of negative numbers.",
        "input": {
          "dividend": -10,
          "divisor": 3
        },
        "expected": -1
      }
    },
    "examples": [
      {
        "description": "Modulus with positive dividend and divisor.",
        "input": {
          "dividend": 25,
          "divisor": 4
        },
        "expected": 1
      },
      {
        "description": "Modulus with positive dividend and negative divisor.",
        "input": {
          "dividend": 25,
          "divisor": -4
        },
        "expected": 1
      },
      {
        "description": "Modulus with zero dividend.",
        "input": {
          "dividend": 0,
          "divisor": 7
        },
        "expected": 0
      }
    ]
  },
  {
    "define": "_functions.Any.Mode",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Determines whether the given input is a number, string, or list.",
    "parameters": {
      "input": {
        "type": "_types.Any",
        "description": "The input to determine the mode of."
      }
    },
    "implementation": {
      "javascript": {
        "code": "if (typeof $$args.input === \"number\") {\n  return \"Number\";\n} else if (typeof $$args.input === \"string\") {\n  return \"String\";\n} else if (Array.isArray($$args.input)) {\n  return \"List\";\n} else {\n  throw new Error(\"Unsupported input type.\");\n}\n"
      }
    },
    "returns": {
      "type": "_types.String",
      "description": "The mode of the input (Number, String, List)."
    },
    "tests": {
      "modeNumber": {
        "description": "Check the mode of a number input.",
        "input": {
          "input": 42
        },
        "expected": "Number"
      },
      "modeString": {
        "description": "Check the mode of a string input.",
        "input": {
          "input": "hello"
        },
        "expected": "String"
      },
      "modeList": {
        "description": "Check the mode of a list input.",
        "input": {
          "input": [1, 2, 3]
        },
        "expected": "List"
      }
    },
    "examples": [
      {
        "description": "Check the mode of a boolean input.",
        "input": {
          "input": true
        },
        "expected": "Unsupported input type."
      },
      {
        "description": "Check the mode of a floating-point number.",
        "input": {
          "input": 3.14
        },
        "expected": "Number"
      },
      {
        "description": "Check the mode of an empty string.",
        "input": {
          "input": ""
        },
        "expected": "String"
      }
    ]
  },
  {
    "define": "_functions.Math.Modulo",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Returns the remainder of dividing the given number by a specified divisor.",
    "parameters": {
      "dividend": {
        "type": "_types.Number",
        "description": "The number to be divided."
      },
      "divisor": {
        "type": "_types.Number",
        "description": "The divisor."
      }
    },
    "implementation": {
      "javascript": {
        "code": "if ($$args.divisor === 0) {\n  throw new Error(\"Division by zero\");\n}\nreturn $$args.dividend % $$args.divisor;\n"
      }
    },
    "returns": {
      "type": "_types.Number",
      "description": "The remainder of the division."
    },
    "tests": {
      "moduloOne": {
        "description": "Calculate the remainder when dividing by 1.",
        "input": {
          "dividend": 5,
          "divisor": 1
        },
        "expected": 0
      },
      "moduloTwo": {
        "description": "Calculate the remainder when dividing by 2.",
        "input": {
          "dividend": 5,
          "divisor": 2
        },
        "expected": 1
      }
    },
    "examples": [
      {
        "description": "Calculate the remainder when dividing by 3.",
        "input": {
          "dividend": 10,
          "divisor": 3
        },
        "expected": 1
      },
      {
        "description": "Calculate the remainder when dividing by a negative divisor.",
        "input": {
          "dividend": 10,
          "divisor": -3
        },
        "expected": 1
      },
      {
        "description": "Calculate the remainder when the dividend is a negative number.",
        "input": {
          "dividend": -10,
          "divisor": 3
        },
        "expected": -1
      }
    ]
  },
  {
    "define": "_functions.Math.Multinomial",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Calculates the multinomial coefficient of a given vector.",
    "parameters": {
      "vector": {
        "type": "_types.List<Number>",
        "description": "The input vector."
      }
    },
    "implementation": {
      "javascript": {
        "code": "function factorial(n) {\n  if (n === 0 || n === 1) return 1;\n  let result = 1;\n  for (let i = 2; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n}\n\nconst sum = (arr) => arr.reduce((a, b) => a + b, 0);\nconst numerator = factorial(sum($$args.vector));\nconst denominator = $$args.vector.reduce((acc, val) => acc * factorial(val), 1);\nreturn numerator / denominator;\n"
      }
    },
    "returns": {
      "type": "_types.Number",
      "description": "The multinomial coefficient."
    },
    "tests": {
      "multinomialSimple": {
        "description": "Calculate the simple multinomial coefficient.",
        "input": {
          "vector": [2, 3]
        },
        "expected": 10
      },
      "multinomialComplex": {
        "description": "Calculate the multinomial coefficient for a more complex vector.",
        "input": {
          "vector": [1, 2, 3]
        },
        "expected": 60
      }
    },
    "examples": [
      {
        "description": "Calculate the multinomial coefficient of a vector with three 1s.",
        "input": {
          "vector": [1, 1, 1]
        },
        "expected": 6
      },
      {
        "description": "Multinomial coefficient for a vector with repeating elements.",
        "input": {
          "vector": [2, 2, 2]
        },
        "expected": 90
      },
      {
        "description": "Multinomial coefficient of a vector with a single high number.",
        "input": {
          "vector": [5, 0, 0]
        },
        "expected": 1
      }
    ]
  },
  {
    "define": "_functions.Math.Multiply",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Multiply two numbers.",
    "parameters": {
      "a": {
        "type": "_types.Number",
        "description": "The first number."
      },
      "b": {
        "type": "_types.Number",
        "description": "The second number."
      }
    },
    "implementation": {
      "javascript": {
        "code": "return $$args.a * $$args.b;\n"
      }
    },
    "returns": {
      "type": "_types.Number",
      "description": "The product of the two numbers."
    },
    "tests": {
      "multiplyTwo": {
        "description": "Multiply two numbers.",
        "input": {
          "a": 3,
          "b": 2
        },
        "expected": 6
      }
    },
    "examples": [
      {
        "description": "Multiply a positive and a negative number.",
        "input": {
          "a": 5,
          "b": -4
        },
        "expected": -20
      },
      {
        "description": "Multiply two decimal numbers.",
        "input": {
          "a": 1.5,
          "b": 2.5
        },
        "expected": 3.75
      },
      {
        "description": "Multiply a number by zero.",
        "input": {
          "a": 7,
          "b": 0
        },
        "expected": 0
      }
    ]
  },
  {
    "define": "_functions.Logical.NOT",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Returns the logical negation of a boolean value.",
    "parameters": {
      "input": {
        "type": "_types.Boolean",
        "description": "The boolean value to negate."
      }
    },
    "implementation": {
      "javascript": {
        "code": "return !$$args.input;\n"
      }
    },
    "returns": {
      "type": "_types.Boolean",
      "description": "The negated boolean value."
    },
    "tests": {
      "notTrue": {
        "description": "Negate a true boolean value.",
        "input": {
          "input": true
        },
        "expected": false
      },
      "notFalse": {
        "description": "Negate a false boolean value.",
        "input": {
          "input": false
        },
        "expected": true
      }
    },
    "examples": [
      {
        "description": "Negate a boolean value in an if statement.",
        "input": {
          "input": true
        },
        "expected": false
      },
      {
        "description": "Double negation of a boolean value.",
        "input": {
          "input": false
        },
        "expected": true
      },
      {
        "description": "Negate the result of a boolean comparison.",
        "input": {
          "input": true
        },
        "expected": false
      }
    ]
  },
  {
    "define": "_functions.Number.NTHLargest",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Returns the Nth largest value in a list.",
    "parameters": {
      "list": {
        "type": "_types.List",
        "description": "The list from which to find the Nth largest value."
      },
      "n": {
        "type": "_types.Number",
        "description": "The Nth position of the largest value to find."
      }
    },
    "implementation": {
      "javascript": {
        "code": "const sortedList = $$args.list.sort((a, b) => b - a);\nreturn sortedList[$$args.n - 1];\n"
      }
    },
    "returns": {
      "type": "_types.Number",
      "description": "The Nth largest value in the list."
    },
    "tests": {
      "nthLargestSimple": {
        "description": "Find the 2nd largest value in a simple list.",
        "input": {
          "list": [10, 5, 20, 15],
          "n": 2
        },
        "expected": 15
      },
      "nthLargestNegative": {
        "description": "Find the 3rd largest value in a list including negative numbers.",
        "input": {
          "list": [-10, -5, 0],
          "n": 3
        },
        "expected": -10
      },
      "nthLargestDuplicate": {
        "description": "Find the 1st largest value in a list with duplicate numbers.",
        "input": {
          "list": [5, 5, 5],
          "n": 1
        },
        "expected": 5
      },
      "nthLargestMixed": {
        "description": "Find the 5th largest value in a list with positive and negative numbers.",
        "input": {
          "list": [10, -5, 20, -15, 30, 5, -25],
          "n": 5
        },
        "expected": -5
      }
    },
    "examples": [
      {
        "description": "Find the 4th largest value in a list of mixed numbers.",
        "input": {
          "list": [3, 6, 8, 2, 9, 1],
          "n": 4
        },
        "expected": 3
      },
      {
        "description": "Find the largest value in a single-element list.",
        "input": {
          "list": [42],
          "n": 1
        },
        "expected": 42
      },
      {
        "description": "Find the 2nd largest value in a list with repeated elements.",
        "input": {
          "list": [15, 15, 10, 20, 25],
          "n": 2
        },
        "expected": 20
      }
    ]
  },
  {
    "define": "_functions.Number.NTHSmallest",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Returns the nth smallest item in a list.",
    "parameters": {
      "list": {
        "type": "_types.List",
        "description": "The list from which to find the nth smallest item."
      },
      "n": {
        "type": "_types.Number",
        "description": "The position of the smallest item to find counting from 1."
      }
    },
    "implementation": {
      "javascript": {
        "code": "return $$args.list.sort((a, b) => a - b)[$$args.n - 1];\n"
      }
    },
    "returns": {
      "type": "_types.Number",
      "description": "The nth smallest item in the list."
    },
    "tests": {
      "nthSmallestSimple": {
        "description": "Find the second smallest item in a simple list.",
        "input": {
          "list": [5, 3, 8, 1, 7],
          "n": 2
        },
        "expected": 3
      },
      "nthSmallestNegative": {
        "description": "Find the fourth smallest item in a list with negative numbers.",
        "input": {
          "list": [-5, -8, 0, 3, -2],
          "n": 4
        },
        "expected": 0
      },
      "nthSmallestRepeated": {
        "description": "Find the third smallest item in a list with repeated numbers.",
        "input": {
          "list": [2, 2, 1, 3, 4],
          "n": 3
        },
        "expected": 2
      },
      "nthSmallestEdge": {
        "description": "Find the smallest item in a list with only one element.",
        "input": {
          "list": [99],
          "n": 1
        },
        "expected": 99
      }
    },
    "examples": [
      {
        "description": "Find the fifth smallest item in a list with mixed positive and negative numbers.",
        "input": {
          "list": [1, -2, 5, 0, 3, -1],
          "n": 5
        },
        "expected": 3
      },
      {
        "description": "Find the first smallest item in a list with two elements.",
        "input": {
          "list": [6, 2],
          "n": 1
        },
        "expected": 2
      },
      {
        "description": "Find the second smallest item in a list with floating point numbers.",
        "input": {
          "list": [2.2, 3.5, 1.1],
          "n": 2
        },
        "expected": 2.2
      }
    ]
  },
  {
    "define": "_functions.Math.Base",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Provides the base of a numeric system.",
    "parameters": {
      "value": {
        "type": "_types.Number",
        "description": "The number to get the base from."
      }
    },
    "implementation": {
      "javascript": {
        "code": "return $$args.value;\n"
      }
    },
    "returns": {
      "type": "_types.Number",
      "description": "The base of the numeric system."
    },
    "tests": {
      "baseValue": {
        "description": "Test the base with a simple value.",
        "input": {
          "value": 10
        },
        "expected": 10
      }
    },
    "examples": [
      {
        "description": "Test the base with a large number.",
        "input": {
          "value": 1000
        },
        "expected": 1000
      },
      {
        "description": "Test the base with a negative number.",
        "input": {
          "value": -256
        },
        "expected": -256
      },
      {
        "description": "Test the base with zero.",
        "input": {
          "value": 0
        },
        "expected": 0
      }
    ]
  },
  {
    "define": "_functions.Math.Odd",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Returns true if the given number is odd, false otherwise.",
    "parameters": {
      "input": {
        "type": "_types.Number",
        "description": "The number to check for being odd."
      }
    },
    "implementation": {
      "javascript": {
        "code": "return $$args.input % 2 !== 0;\n"
      }
    },
    "returns": {
      "type": "_types.Boolean",
      "description": "Whether the given number is odd or not."
    },
    "tests": {
      "oddTrue": {
        "description": "Check if a positive odd number is returned as true.",
        "input": {
          "input": 3
        },
        "expected": true
      },
      "oddFalse": {
        "description": "Check if an even number is returned as false.",
        "input": {
          "input": 4
        },
        "expected": false
      },
      "oddZero": {
        "description": "Check if zero is not considered an odd number.",
        "input": {
          "input": 0
        },
        "expected": false
      }
    },
    "examples": [
      {
        "description": "Check if a large odd number is returned as true.",
        "input": {
          "input": 999999
        },
        "expected": true
      },
      {
        "description": "Check if a negative odd number is returned as true.",
        "input": {
          "input": -7
        },
        "expected": true
      },
      {
        "description": "Check if a negative even number is returned as false.",
        "input": {
          "input": -10
        },
        "expected": false
      }
    ]
  },
  {
    "define": "_functions.Dictionary.OmitKeys",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Returns a new dictionary that contains all the key-value pairs from the input dictionary, except for those with keys specified in the omit list.",
    "parameters": {
      "input": {
        "type": "_types.Dictionary",
        "description": "The input dictionary."
      },
      "omit": {
        "type": "_types.List",
        "description": "A list of keys to be omitted."
      }
    },
    "implementation": {
      "javascript": {
        "code": "const result = {};\nfor (const key in $$args.input) {\n  if (!$$args.omit.includes(key)) {\n   result[key] = $$args.input[key];\n  }\n}\nreturn result;\n"
      }
    },
    "returns": {
      "type": "_types.Dictionary",
      "description": "The new dictionary with the omitted keys removed."
    },
    "tests": {
      "omitKeysSimple": {
        "description": "Omit a few simple keys.",
        "input": {
          "input": {
            "a": 1,
            "b": 2,
            "c": 3
          },
          "omit": ["b", "c"]
        },
        "expected": {
          "a": 1
        }
      },
      "omitKeysMultiple": {
        "description": "Omit multiple keys from the dictionary.",
        "input": {
          "input": {
            "a": 1,
            "b": 2,
            "c": 3,
            "d": 4
          },
          "omit": ["b", "c", "d"]
        },
        "expected": {
          "a": 1
        }
      },
      "omitKeysNoOmission": {
        "description": "Omit no keys from the dictionary.",
        "input": {
          "input": {
            "a": 1,
            "b": 2,
            "c": 3
          },
          "omit": []
        },
        "expected": {
          "a": 1,
          "b": 2,
          "c": 3
        }
      }
    },
    "examples": [
      {
        "description": "Omit a non-existent key from the dictionary.",
        "input": {
          "input": {
            "a": 1,
            "b": 2
          },
          "omit": ["c"]
        },
        "expected": {
          "a": 1,
          "b": 2
        }
      },
      {
        "description": "Omit all keys from the dictionary.",
        "input": {
          "input": {
            "a": 1,
            "b": 2,
            "c": 3
          },
          "omit": ["a", "b", "c"]
        },
        "expected": {}
      },
      {
        "description": "Omit a key from a dictionary with nested dictionaries.",
        "input": {
          "input": {
            "a": 1,
            "b": {
              "nestedKey": "nestedValue"
            },
            "c": 3
          },
          "omit": ["b"]
        },
        "expected": {
          "a": 1,
          "c": 3
        }
      }
    ]
  },
  {
    "define": "_functions.List.Order",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Returns a new list where the elements are reordered according to the given order.",
    "parameters": {
      "input": {
        "type": "_types.List",
        "description": "The original list."
      },
      "order": {
        "type": "_types.List",
        "description": "The desired order of the elements."
      }
    },
    "implementation": {
      "javascript": {
        "code": "const result = [];\nfor (let i = 0; i < $$args.order.length; i++) {\n  if ($$args.order[i] < $$args.input.length) {\n    result.push($$args.input[$$args.order[i]]);\n  }\n}\nreturn result;\n"
      }
    },
    "returns": {
      "type": "_types.List",
      "description": "The reordered list."
    },
    "tests": {
      "orderSimple": {
        "description": "Reorder a simple list.",
        "input": {
          "input": ["a", "b", "c"],
          "order": [1, 0, 2]
        },
        "expected": ["b", "a", "c"]
      },
      "orderMultiple": {
        "description": "Reorder a longer list.",
        "input": {
          "input": ["x", "y", "z", "w", "v", "u"],
          "order": [3, 5, 1, 4, 2]
        },
        "expected": ["w", "u", "y", "v", "z"]
      },
      "orderAllItems": {
        "description": "Reorder a list where all items match the order.",
        "input": {
          "input": ["a", "b", "c"],
          "order": [0, 1, 2]
        },
        "expected": ["a", "b", "c"]
      },
      "orderPartial": {
        "description": "Reorder a list where the order array does not cover all indices.",
        "input": {
          "input": ["a", "b", "c", "d"],
          "order": [2, 1]
        },
        "expected": ["c", "b"]
      }
    },
    "examples": [
      {
        "description": "Reorder list with elements in reverse order.",
        "input": {
          "input": [10, 20, 30, 40, 50],
          "order": [4, 3, 2, 1, 0]
        },
        "expected": [50, 40, 30, 20, 10]
      },
      {
        "description": "Reorder list with a single element.",
        "input": {
          "input": ["apple"],
          "order": [0]
        },
        "expected": ["apple"]
      },
      {
        "description": "Reorder list ignoring out of range indexes.",
        "input": {
          "input": ["alpha", "beta", "gamma"],
          "order": [2, 1, 3]
        },
        "expected": ["gamma", "beta"]
      }
    ]
  },
  {
    "define": "_functions.Number.PHI",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Returns the golden ratio (phi).",
    "implementation": {
      "javascript": {
        "code": "return (1 + Math.sqrt(5)) / 2;\n"
      }
    },
    "returns": {
      "type": "_types.Number",
      "description": "The golden ratio (phi)."
    },
    "tests": {
      "phiSimple": {
        "description": "Check the calculation of the golden ratio (phi).",
        "input": {},
        "expected": 1.618033988749895
      }
    },
    "examples": [
      {
        "description": "Use PHI to calculate based on the golden ratio.",
        "input": {},
        "expected": 1.618033988749895
      },
      {
        "description": "Verify PHI as a constant in a mathematical operation.",
        "input": {},
        "expected": 1.618033988749895
      },
      {
        "description": "Use PHI to demonstrate the use in ratio calculations.",
        "input": {},
        "expected": 1.618033988749895
      }
    ]
  },
  {
    "define": "_functions.String.PadLeft",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Pads a string on the left with a specified character until it reaches a certain length.",
    "parameters": {
      "string": {
        "type": "_types.String",
        "description": "The string to pad."
      },
      "length": {
        "type": "_types.Number",
        "description": "The total length of the resulting string after padding."
      },
      "char": {
        "type": "_types.String",
        "description": "The character to pad with."
      }
    },
    "implementation": {
      "javascript": {
        "code": "return $$args.string.padStart($$args.length, $$args.char);\n"
      }
    },
    "returns": {
      "type": "_types.String",
      "description": "The padded string."
    },
    "tests": {
      "padLeftWithSpaces": {
        "description": "Pad a string with spaces on the left.",
        "input": {
          "string": "hello",
          "length": 10,
          "char": " "
        },
        "expected": "     hello"
      },
      "padLeftWithZeros": {
        "description": "Pad a string with zeros on the left.",
        "input": {
          "string": "123",
          "length": 6,
          "char": "0"
        },
        "expected": "000123"
      },
      "padLeftEmptyString": {
        "description": "Pad an empty string with a specified character.",
        "input": {
          "string": "",
          "length": 5,
          "char": "*"
        },
        "expected": "*****"
      },
      "padLeftNoPaddingNeeded": {
        "description": "Pad a string where no padding is needed.",
        "input": {
          "string": "hello",
          "length": 3,
          "char": " "
        },
        "expected": "hello"
      }
    },
    "examples": [
      {
        "description": "Pad a string with dashes on the left.",
        "input": {
          "string": "test",
          "length": 8,
          "char": "-"
        },
        "expected": "----test"
      },
      {
        "description": "Pad a single character string.",
        "input": {
          "string": "A",
          "length": 5,
          "char": "B"
        },
        "expected": "BBBBA"
      },
      {
        "description": "Pad a string that includes spaces.",
        "input": {
          "string": "pad this",
          "length": 12,
          "char": "."
        },
        "expected": "....pad this"
      }
    ]
  },
  {
    "define": "_functions.String.PadRight",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Pads a string on the right with a specified character until it reaches a certain length.",
    "parameters": {
      "string": {
        "type": "_types.String",
        "description": "The string to pad."
      },
      "length": {
        "type": "_types.Number",
        "description": "The total length of the resulting string after padding."
      },
      "char": {
        "type": "_types.String",
        "description": "The character to pad with."
      }
    },
    "implementation": {
      "javascript": {
        "code": "return $$args.string.padEnd($$args.length, $$args.char);\n"
      }
    },
    "returns": {
      "type": "_types.String",
      "description": "The padded string."
    },
    "tests": {
      "padRightWithSpaces": {
        "description": "Pad a string with spaces on the right.",
        "input": {
          "string": "hello",
          "length": 10,
          "char": " "
        },
        "expected": "hello     "
      },
      "padRightWithZeros": {
        "description": "Pad a string with zeros on the right.",
        "input": {
          "string": "123",
          "length": 6,
          "char": "0"
        },
        "expected": "123000"
      },
      "padRightEmptyString": {
        "description": "Pad an empty string with a specified character.",
        "input": {
          "string": "",
          "length": 5,
          "char": "*"
        },
        "expected": "*****"
      },
      "padRightNoPaddingNeeded": {
        "description": "Pad a string where no padding is needed.",
        "input": {
          "string": "hello",
          "length": 3,
          "char": " "
        },
        "expected": "hello"
      }
    },
    "examples": [
      {
        "description": "Pad a word with hyphens on the right.",
        "input": {
          "string": "test",
          "length": 8,
          "char": "-"
        },
        "expected": "test----"
      },
      {
        "description": "Pad a numeric string with asterisks on the right.",
        "input": {
          "string": "42",
          "length": 5,
          "char": "*"
        },
        "expected": "42***"
      },
      {
        "description": "Pad a string with different character on the right.",
        "input": {
          "string": "data",
          "length": 6,
          "char": "%"
        },
        "expected": "data%%"
      }
    ]
  },
  {
    "define": "_functions.Number.PercentRank",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Calculates the percentile rank of a value in a list.",
    "parameters": {
      "value": {
        "type": "_types.Number",
        "description": "The value for which to calculate the percentile rank."
      },
      "list": {
        "type": "_types.List",
        "description": "The list of values to use for calculating the percentile rank."
      }
    },
    "implementation": {
      "javascript": {
        "code": "let count = 0;\nfor (let i = 0; i < $$args.list.length; i++) {\n  if ($$args.list[i] < $$args.value) {\n    count++;\n  }\n}\nreturn count / $$args.list.length;\n"
      }
    },
    "returns": {
      "type": "_types.Number",
      "description": "The percentile rank of the value in the list."
    },
    "tests": {
      "percentRankNormal": {
        "description": "Calculate the percentile rank of a value in a normal list.",
        "input": {
          "value": 25,
          "list": [10, 20, 30, 40, 50]
        },
        "expected": 0.4
      },
      "percentRankRepeatedValues": {
        "description": "Calculate the percentile rank of a value in a list with repeated values.",
        "input": {
          "value": 30,
          "list": [10, 20, 30, 30, 40, 50]
        },
        "expected": 0.3333333333333333
      },
      "percentRankEdgeCases": {
        "description": "Calculate the percentile rank of a value for edge cases.",
        "input": {
          "value": 15,
          "list": [10, 20, 30, 40]
        },
        "expected": 0.25
      }
    },
    "examples": [
      {
        "description": "Calculate the percentile rank of a value in a list with negative numbers.",
        "input": {
          "value": -10,
          "list": [-20, -15, -10, -5]
        },
        "expected": 0.5
      },
      {
        "description": "Calculate the percentile rank of the smallest value in a list.",
        "input": {
          "value": 5,
          "list": [5, 10, 15, 20]
        },
        "expected": 0
      },
      {
        "description": "Calculate the percentile rank of the largest value in a list.",
        "input": {
          "value": 25,
          "list": [5, 10, 15, 20, 25]
        },
        "expected": 0.8
      }
    ]
  },
  {
    "define": "_functions.Number.Percentile",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Calculates the specified percentile of a given list of numbers.",
    "parameters": {
      "numbers": {
        "type": "_types.List",
        "description": "The list of numbers to calculate the percentile from."
      },
      "percentile": {
        "type": "_types.Number",
        "description": "The percentile value to calculate (value between 0 and 100)."
      }
    },
    "implementation": {
      "javascript": {
        "code": "const sortedNumbers = $$args.numbers.sort((a, b) => a - b);\nconst index = Math.ceil((($$args.percentile / 100) * (sortedNumbers.length - 1)) + 1);\nif (index === 1) {\n  return sortedNumbers[0];\n} else if (index === sortedNumbers.length) {\n  return sortedNumbers[sortedNumbers.length - 1];\n} else {\n  const lowerNumber = sortedNumbers[Math.floor(index) - 1];\n  const upperNumber = sortedNumbers[Math.ceil(index) - 1];\n  return lowerNumber + ((index - Math.floor(index)) * (upperNumber - lowerNumber));\n}\n"
      }
    },
    "returns": {
      "type": "_types.Number",
      "description": "The calculated percentile value."
    },
    "tests": {
      "percentileSimple": {
        "description": "Calculate the percentile of a simple list.",
        "input": {
          "numbers": [10, 20, 30, 40, 50],
          "percentile": 50
        },
        "expected": 30
      },
      "percentileLowerBound": {
        "description": "Calculate the percentile for the smallest value.",
        "input": {
          "numbers": [5, 10, 15, 20, 25],
          "percentile": 0
        },
        "expected": 5
      },
      "percentileUpperBound": {
        "description": "Calculate the percentile for the largest value.",
        "input": {
          "numbers": [5, 10, 15, 20, 25],
          "percentile": 100
        },
        "expected": 25
      },
      "percentileFractionalIndex": {
        "description": "Calculate the percentile with a fractional index.",
        "input": {
          "numbers": [1, 2, 3, 4, 5],
          "percentile": 70
        },
        "expected": 4
      }
    },
    "examples": [
      {
        "description": "Calculate the 25th percentile of a list.",
        "input": {
          "numbers": [5, 10, 15, 20, 25, 30],
          "percentile": 25
        },
        "expected": 10
      },
      {
        "description": "Calculate the 75th percentile of a list with negative numbers.",
        "input": {
          "numbers": [-20, -10, 0, 10, 20],
          "percentile": 75
        },
        "expected": 10
      },
      {
        "description": "Calculate the 90th percentile of a large list.",
        "input": {
          "numbers": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
          "percentile": 90
        },
        "expected": 9
      }
    ]
  },
  {
    "define": "_functions.List.Permutation",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Returns all possible permutations of the given list.",
    "parameters": {
      "list": {
        "type": "_types.List",
        "description": "The list for which to calculate all possible permutations."
      }
    },
    "implementation": {
      "javascript": {
        "code": "function permute(list) {\n  if (list.length === 0) {\n    return [[]];\n  }\n  const result = [];\n  for (let i = 0; i < list.length; i++) {\n    const rest = [...list.slice(0, i), ...list.slice(i + 1)];\n    const permutationsOfRest = permute(rest);\n    for (const perm of permutationsOfRest) {\n      result.push([list[i], ...perm]);\n    }\n  }\n  return result;\n}\n\nreturn permute($$args.list);\n"
      }
    },
    "returns": {
      "type": "_types.List",
      "description": "All possible permutations of the input list."
    },
    "tests": {
      "permutationsEmptyList": {
        "description": "Calculate permutations of an empty list.",
        "input": {
          "list": []
        },
        "expected": [[]]
      },
      "permutationsSingleElementList": {
        "description": "Calculate permutations of a list with a single element.",
        "input": {
          "list": ["a"]
        },
        "expected": [["a"]]
      },
      "permutationsThreeElementList": {
        "description": "Calculate permutations of a list with three elements.",
        "input": {
          "list": ["a", "b", "c"]
        },
        "expected": [
          ["a", "b", "c"],
          ["a", "c", "b"],
          ["b", "a", "c"],
          ["b", "c", "a"],
          ["c", "a", "b"],
          ["c", "b", "a"]
        ]
      }
    },
    "examples": [
      {
        "description": "Calculate permutations of a list with two elements.",
        "input": {
          "list": ["x", "y"]
        },
        "expected": [
          ["x", "y"],
          ["y", "x"]
        ]
      },
      {
        "description": "Calculate permutations of a list with four elements.",
        "input": {
          "list": [1, 2, 3, 4]
        },
        "expected": [
          [1, 2, 3, 4],
          [1, 2, 4, 3],
          [1, 3, 2, 4],
          [1, 3, 4, 2],
          [1, 4, 2, 3],
          [1, 4, 3, 2],
          [2, 1, 3, 4],
          [2, 1, 4, 3],
          [2, 3, 1, 4],
          [2, 3, 4, 1],
          [2, 4, 1, 3],
          [2, 4, 3, 1],
          [3, 1, 2, 4],
          [3, 1, 4, 2],
          [3, 2, 1, 4],
          [3, 2, 4, 1],
          [3, 4, 1, 2],
          [3, 4, 2, 1],
          [4, 1, 2, 3],
          [4, 1, 3, 2],
          [4, 2, 1, 3],
          [4, 2, 3, 1],
          [4, 3, 1, 2],
          [4, 3, 2, 1]
        ]
      },
      {
        "description": "Calculate permutations of a list with repeated elements.",
        "input": {
          "list": ["a", "a", "b"]
        },
        "expected": [
          ["a", "a", "b"],
          ["a", "b", "a"],
          ["b", "a", "a"]
        ]
      }
    ]
  },
  {
    "define": "_functions.Math.Pi",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Returns the value of pi.",
    "parameters": {
      "none": {
        "type": "_types.Any",
        "description": "No parameters needed."
      }
    },
    "implementation": {
      "javascript": {
        "code": "return Math.PI;\n"
      }
    },
    "returns": {
      "type": "_types.Number",
      "description": "The value of pi."
    },
    "tests": {
      "pi": {
        "description": "Get the value of pi.",
        "expected": 3.141592653589793
      }
    },
    "examples": [
      {
        "description": "Check the value of pi multiplied by 2.",
        "input": {},
        "expected": 6.283185307179586
      },
      {
        "description": "Check the square of pi.",
        "input": {},
        "expected": 9.869604401089358
      },
      {
        "description": "Check the value of pi multiplied by 0.5.",
        "input": {},
        "expected": 1.5707963267948966
      }
    ]
  },
  {
    "define": "_functions.List.PickItem",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Selects the item at the given index from a list.",
    "parameters": {
      "input": {
        "type": "_types.List",
        "description": "The list to select an item from."
      },
      "index": {
        "type": "_types.Number",
        "description": "The index of the item to select."
      }
    },
    "implementation": {
      "javascript": {
        "code": "const idx = $$args.index < 0 ? $$args.input.length + $$args.index : $$args.index;\nreturn $$args.input[idx];\n"
      }
    },
    "returns": {
      "type": "_types.Dictionary",
      "description": "The selected item."
    },
    "tests": {
      "pickItemSimple": {
        "description": "Select a simple item.",
        "input": {
          "input": ["a", "b", "c"],
          "index": 1
        },
        "expected": "b"
      },
      "pickItemNegativeIndex": {
        "description": "Select an item by negative index from the end of the list.",
        "input": {
          "input": ["a", "b", "c", "d"],
          "index": -2
        },
        "expected": "c"
      },
      "pickItemOutOfRange": {
        "description": "Attempt to select an item with an out-of-range index.",
        "input": {
          "input": ["a", "b", "c"],
          "index": 5
        },
        "expected": null
      },
      "pickItemNegativeOutOfRange": {
        "description": "Attempt to select an item with a negative out-of-range index.",
        "input": {
          "input": ["a", "b", "c"],
          "index": -5
        },
        "expected": null
      }
    },
    "examples": [
      {
        "description": "Select the first item.",
        "input": {
          "input": [1, 2, 3, 4],
          "index": 0
        },
        "expected": 1
      },
      {
        "description": "Select the last item using a negative index.",
        "input": {
          "input": ["apple", "banana", "cherry"],
          "index": -1
        },
        "expected": "cherry"
      },
      {
        "description": "Select an item from a list of mixed data types.",
        "input": {
          "input": ["text", 42, true, null],
          "index": 2
        },
        "expected": true
      }
    ]
  },
  {
    "define": "_functions.Dictionary.PickKeys",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Returns a new dictionary containing only the key-value pairs that have keys from the given list of keys.",
    "parameters": {
      "dict": {
        "type": "_types.Dictionary",
        "description": "The input dictionary to pick keys from."
      },
      "keys": {
        "type": "_types.List[String]",
        "description": "The list of keys to pick from the dictionary."
      }
    },
    "implementation": {
      "javascript": {
        "code": "const result = {};\nfor (const key in $$args.dict) {\n  if ($$args.keys.includes(key)) {\n    result[key] = $$args.dict[key];\n  }\n}\nreturn result;\n"
      }
    },
    "returns": {
      "type": "_types.Dictionary",
      "description": "The new dictionary containing the picked key-value pairs."
    },
    "tests": {
      "pickKeysSimple": {
        "description": "Pick all keys from a simple dictionary.",
        "input": {
          "dict": {
            "a": 1,
            "b": 2,
            "c": 3
          },
          "keys": ["a", "b"]
        },
        "expected": {
          "a": 1,
          "b": 2
        }
      },
      "pickKeysMultiple": {
        "description": "Pick multiple keys from a dictionary with duplicate keys.",
        "input": {
          "dict": {
            "a": 1,
            "b": 2,
            "c": 3,
            "d": 4,
            "e": 5
          },
          "keys": ["a", "c", "e"]
        },
        "expected": {
          "a": 1,
          "c": 3,
          "e": 5
        }
      },
      "pickKeysNoMatch": {
        "description": "Attempt to pick keys that are not in the dictionary.",
        "input": {
          "dict": {},
          "keys": ["a", "b", "c"]
        },
        "expected": {}
      }
    },
    "examples": [
      {
        "description": "Pick a key from a dictionary with nested objects.",
        "input": {
          "dict": {
            "a": 1,
            "b": {
              "c": 2,
              "d": 3
            }
          },
          "keys": ["b"]
        },
        "expected": {
          "b": {
            "c": 2,
            "d": 3
          }
        }
      },
      {
        "description": "Pick no keys from the dictionary.",
        "input": {
          "dict": {
            "x": 42,
            "y": 84
          },
          "keys": []
        },
        "expected": {}
      },
      {
        "description": "Pick a single key from the dictionary with numeric values.",
        "input": {
          "dict": {
            "a": 100,
            "b": 200,
            "c": 300
          },
          "keys": ["b"]
        },
        "expected": {
          "b": 200
        }
      }
    ]
  },
  {
    "define": "_functions.Any.Pluck",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Returns the values from a Dictionary (Object) based on the provided keys.",
    "parameters": {
      "dictionary": {
        "type": "_types.Dictionary",
        "description": "The object to retrieve values from."
      },
      "keys": {
        "type": "_types.List",
        "description": "A list of keys to retrieve values for."
      }
    },
    "implementation": {
      "javascript": {
        "code": "const result = {};\n$$args.keys.forEach(key => {\n  if (Object.prototype.hasOwnProperty.call($$args.dictionary, key)) {\n    result[key] = $$args.dictionary[key];\n  }\n});\nreturn result;\n"
      }
    },
    "returns": {
      "type": "_types.Dictionary",
      "description": "A new dictionary containing the values from the provided keys."
    },
    "tests": {
      "pluckSimple": {
        "description": "Retrieve a simple value.",
        "input": {
          "dictionary": {
            "name": "John",
            "age": 30,
            "occupation": "Software Engineer"
          },
          "keys": ["name"]
        },
        "expected": {
          "name": "John"
        }
      },
      "pluckMultiple": {
        "description": "Retrieve multiple values.",
        "input": {
          "dictionary": {
            "name": "John",
            "age": 30,
            "occupation": "Software Engineer",
            "hobbies": ["reading", "coding"]
          },
          "keys": ["name", "age", "hobbies"]
        },
        "expected": {
          "name": "John",
          "age": 30,
          "hobbies": ["reading", "coding"]
        }
      },
      "pluckNonExistingKey": {
        "description": "Attempt to retrieve a value for a non-existent key.",
        "input": {
          "dictionary": {
            "name": "John",
            "age": 30,
            "occupation": "Software Engineer"
          },
          "keys": ["nonExistentKey"]
        },
        "expected": {}
      },
      "pluckEmptyKeysList": {
        "description": "Retrieve values from an empty list of keys.",
        "input": {
          "dictionary": {
            "name": "John",
            "age": 30,
            "occupation": "Software Engineer"
          },
          "keys": []
        },
        "expected": {}
      }
    },
    "examples": [
      {
        "description": "Retrieve a value for a key with a space in the name.",
        "input": {
          "dictionary": {
            "first name": "John",
            "age": 30
          },
          "keys": ["first name"]
        },
        "expected": {
          "first name": "John"
        }
      },
      {
        "description": "Retrieve values when one key does not exist in the dictionary.",
        "input": {
          "dictionary": {
            "name": "John",
            "age": 30
          },
          "keys": ["name", "occupation"]
        },
        "expected": {
          "name": "John"
        }
      },
      {
        "description": "Retrieve values from a nested dictionary.",
        "input": {
          "dictionary": {
            "person": {
              "name": "John",
              "age": 30,
              "occupation": "Software Engineer"
            }
          },
          "keys": ["person"]
        },
        "expected": {
          "person": {
            "name": "John",
            "age": 30,
            "occupation": "Software Engineer"
          }
        }
      }
    ]
  },
  {
    "define": "_functions.Math.Polynomial",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Evaluates a polynomial function given coefficients and an input value.",
    "parameters": {
      "coefficients": {
        "type": "_types.List(Number)",
        "description": "The coefficients of the polynomial, in order from highest to lowest degree."
      },
      "x": {
        "type": "_types.Number",
        "description": "The input value for which to evaluate the polynomial."
      }
    },
    "implementation": {
      "javascript": {
        "code": "let result = 0;\nconst n = $$args.coefficients.length;\nfor (let i = 0; i < n; i++) {\n  result += $$args.coefficients[i] * Math.pow($$args.x, n - 1 - i);\n}\nreturn result;\n"
      }
    },
    "returns": {
      "type": "_types.Number",
      "description": "The evaluated polynomial at the given input value."
    },
    "tests": {
      "polySimple": {
        "description": "Evaluate a simple polynomial.",
        "input": {
          "coefficients": [1, -2, 3],
          "x": 1
        },
        "expected": 2
      },
      "polyComplex": {
        "description": "Evaluate a more complex polynomial.",
        "input": {
          "coefficients": [-3, 2, -1, 0.5],
          "x": 2
        },
        "expected": -17.5
      }
    },
    "examples": [
      {
        "description": "Evaluate polynomial with zero coefficients.",
        "input": {
          "coefficients": [0, 0, 0],
          "x": 5
        },
        "expected": 0
      },
      {
        "description": "Evaluate polynomial with constant term only.",
        "input": {
          "coefficients": [4],
          "x": 7
        },
        "expected": 4
      },
      {
        "description": "Evaluate a polynomial of degree 2.",
        "input": {
          "coefficients": [1, 0, -4],
          "x": 2
        },
        "expected": 0
      }
    ]
  },
  {
    "define": "_functions.Math.Power",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Raise a number to a power.",
    "parameters": {
      "base": {
        "type": "_types.Number",
        "description": "The base number."
      },
      "exponent": {
        "type": "_types.Number",
        "description": "The exponent."
      }
    },
    "implementation": {
      "javascript": {
        "code": "return Math.pow($$args.base, $$args.exponent);\n"
      }
    },
    "returns": {
      "type": "_types.Number",
      "description": "The base raised to the power of the exponent."
    },
    "tests": {
      "powerTwo": {
        "description": "Raise a number to a power.",
        "input": {
          "base": 2,
          "exponent": 3
        },
        "expected": 8
      }
    },
    "examples": [
      {
        "description": "Raise 4 to the power of 0.",
        "input": {
          "base": 4,
          "exponent": 0
        },
        "expected": 1
      },
      {
        "description": "Raise 10 to the power of 2.",
        "input": {
          "base": 10,
          "exponent": 2
        },
        "expected": 100
      },
      {
        "description": "Raise 5 to the power of 3.",
        "input": {
          "base": 5,
          "exponent": 3
        },
        "expected": 125
      }
    ]
  },
  {
    "define": "_functions.Number.Price",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Calculates the price based on the given cost, tax rate, and rounding level.",
    "parameters": {
      "cost": {
        "type": "_types.Number",
        "description": "The cost of the item before tax."
      },
      "taxRate": {
        "type": "_types.Number",
        "description": "The tax rate as a decimal value (e.g., 0.15 for 15% tax)."
      },
      "roundingLevel": {
        "type": "_types.Number",
        "description": "The number of decimal places to round the final price to."
      }
    },
    "implementation": {
      "javascript": {
        "code": "const taxedAmount = $$args.cost * (1 + $$args.taxRate);\nconst roundedPrice = Math.round(taxedAmount * Math.pow(10, $$args.roundingLevel)) / Math.pow(10, $$args.roundingLevel);\nreturn roundedPrice;\n"
      }
    },
    "returns": {
      "type": "_types.Number",
      "description": "The calculated price including tax."
    },
    "tests": {
      "priceWithoutTax": {
        "description": "Calculate the price without any tax.",
        "input": {
          "cost": 100,
          "taxRate": 0,
          "roundingLevel": 2
        },
        "expected": 100
      },
      "priceWithTax": {
        "description": "Calculate the price with added tax.",
        "input": {
          "cost": 50,
          "taxRate": 0.15,
          "roundingLevel": 2
        },
        "expected": 57.5
      },
      "priceWithDifferentTax": {
        "description": "Calculate the price with a different tax rate.",
        "input": {
          "cost": 120,
          "taxRate": 0.1,
          "roundingLevel": 1
        },
        "expected": 132
      }
    },
    "examples": [
      {
        "description": "Calculate the price with zero rounding level.",
        "input": {
          "cost": 200,
          "taxRate": 0.25,
          "roundingLevel": 0
        },
        "expected": 250
      },
      {
        "description": "Calculate the price with multiple decimal places.",
        "input": {
          "cost": 75.5,
          "taxRate": 0.075,
          "roundingLevel": 3
        },
        "expected": 81.162
      },
      {
        "description": "Calculate the price with a very small tax rate.",
        "input": {
          "cost": 100,
          "taxRate": 0.001,
          "roundingLevel": 2
        },
        "expected": 100.1
      }
    ]
  },
  {
    "define": "_functions.Number.Probability",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Calculates the probability of a given event.",
    "parameters": {
      "eventOccurred": {
        "type": "_types.Number",
        "description": "The number of times the event occurred."
      },
      "totalEvents": {
        "type": "_types.Number",
        "description": "The total number of events."
      }
    },
    "implementation": {
      "javascript": {
        "code": "return $$args.eventOccurred / $$args.totalEvents;\n"
      }
    },
    "returns": {
      "type": "_types.Number",
      "description": "The probability of the given event occurring."
    },
    "tests": {
      "probZeroEvent": {
        "description": "Calculate the probability of an event when it did not occur.",
        "input": {
          "eventOccurred": 0,
          "totalEvents": 10
        },
        "expected": 0
      },
      "probHalfEvent": {
        "description": "Calculate the probability of an event occurring half the time.",
        "input": {
          "eventOccurred": 5,
          "totalEvents": 10
        },
        "expected": 0.5
      },
      "probAllEvents": {
        "description": "Calculate the probability of an event occurring all the time.",
        "input": {
          "eventOccurred": 10,
          "totalEvents": 10
        },
        "expected": 1
      }
    },
    "examples": [
      {
        "description": "Calculate the probability of an event when it occurred 3 out of 15 times.",
        "input": {
          "eventOccurred": 3,
          "totalEvents": 15
        },
        "expected": 0.2
      },
      {
        "description": "Calculate the probability of an event when it occurred 7 out of 20 times.",
        "input": {
          "eventOccurred": 7,
          "totalEvents": 20
        },
        "expected": 0.35
      },
      {
        "description": "Calculate the probability of an event when it occurred 4 out of 8 times.",
        "input": {
          "eventOccurred": 4,
          "totalEvents": 8
        },
        "expected": 0.5
      }
    ]
  },
  {
    "define": "_functions.Math.Product",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Calculates the product of all input numbers.",
    "parameters": {
      "numbers": {
        "type": "_types.List(Number)",
        "description": "The list of numbers to multiply together."
      }
    },
    "implementation": {
      "javascript": {
        "code": "return $$args.numbers.reduce((acc, current) => acc * current, 1);\n"
      }
    },
    "returns": {
      "type": "_types.Number",
      "description": "The product of the input numbers."
    },
    "tests": {
      "productSingle": {
        "description": "Calculate the product of a single number.",
        "input": {
          "numbers": [4]
        },
        "expected": 4
      },
      "productTwo": {
        "description": "Calculate the product of two numbers.",
        "input": {
          "numbers": [2, 3]
        },
        "expected": 6
      },
      "productThree": {
        "description": "Calculate the product of three numbers.",
        "input": {
          "numbers": [1, 2, 3]
        },
        "expected": 6
      },
      "productNegative": {
        "description": "Calculate the product of negative numbers.",
        "input": {
          "numbers": [-1, -2, -3]
        },
        "expected": -6
      }
    },
    "examples": [
      {
        "description": "Calculate the product of mixed positive and negative numbers.",
        "input": {
          "numbers": [2, -3, 4]
        },
        "expected": -24
      },
      {
        "description": "Calculate the product of numbers including zero.",
        "input": {
          "numbers": [3, 0, 5]
        },
        "expected": 0
      },
      {
        "description": "Calculate the product of multiple positive numbers.",
        "input": {
          "numbers": [1, 2, 3, 4]
        },
        "expected": 24
      }
    ]
  },
  {
    "define": "_functions.List.QueryParametersArray",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Returns an array of query parameters.",
    "parameters": {
      "array": {
        "type": "_types.List",
        "description": "The input list to process."
      }
    },
    "implementation": {
      "javascript": {
        "code": "return $$args.array;\n"
      }
    },
    "returns": {
      "type": "_types.List",
      "description": "An array of query parameters."
    },
    "tests": {
      "queryParametersArraySimple": {
        "description": "Process a simple list.",
        "input": {
          "array": ["a", "b", "c"]
        },
        "expected": ["a", "b", "c"]
      }
    },
    "examples": [
      {
        "description": "Process a list of numbers.",
        "input": {
          "array": [1, 2, 3, 4]
        },
        "expected": [1, 2, 3, 4]
      },
      {
        "description": "Process a mixed list of strings and numbers.",
        "input": {
          "array": ["a", 1, "b", 2]
        },
        "expected": ["a", 1, "b", 2]
      },
      {
        "description": "Process an empty list.",
        "input": {
          "array": []
        },
        "expected": []
      }
    ]
  },
  {
    "define": "_functions.Dictionary.QueryParametersObject",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Returns a new object containing the query parameters.",
    "parameters": {
      "input": {
        "type": "_types.Dictionary",
        "description": "The input dictionary to extract query parameters from."
      },
      "param": {
        "type": "_types.String",
        "description": "The parameter name."
      },
      "value": {
        "type": "_types.Any",
        "description": "The parameter value."
      }
    },
    "implementation": {
      "javascript": {
        "code": "const queryParams = {};\nfor (const [key, val] of Object.entries($$args.input)) {\n  if ($$args.param === key) {\n    queryParams[$$args.param] = $$args.value;\n  }\n}\nreturn queryParams;\n"
      }
    },
    "returns": {
      "type": "_types.Dictionary",
      "description": "The query parameters object."
    },
    "tests": {
      "queryParametersObjectSimple": {
        "description": "Extract a single query parameter.",
        "input": {
          "input": {
            "a": "1",
            "b": "2"
          },
          "param": "a",
          "value": 1
        },
        "expected": {
          "a": 1
        }
      },
      "queryParametersObjectMultiple": {
        "description": "Extract multiple query parameters.",
        "input": {
          "input": {
            "a": "1",
            "b": "2",
            "c": "3"
          },
          "param": "b",
          "value": 2
        },
        "expected": {
          "b": 2
        }
      }
    },
    "examples": [
      {
        "description": "Extract a non-existing query parameter.",
        "input": {
          "input": {
            "x": "10",
            "y": "20"
          },
          "param": "z",
          "value": 0
        },
        "expected": {}
      },
      {
        "description": "Extract a query parameter with a string value.",
        "input": {
          "input": {
            "key1": "value1",
            "key2": "value2"
          },
          "param": "key1",
          "value": "newValue1"
        },
        "expected": {
          "key1": "newValue1"
        }
      },
      {
        "description": "Extract a query parameter with a boolean value.",
        "input": {
          "input": {
            "isTrue": "true",
            "isFalse": "false"
          },
          "param": "isTrue",
          "value": true
        },
        "expected": {
          "isTrue": true
        }
      }
    ]
  },
  {
    "define": "_functions.Math.RGB",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Returns a string representing the RGB color from given red, green and blue components.",
    "parameters": {
      "r": {
        "type": "_types.Number",
        "description": "The value of the red component."
      },
      "g": {
        "type": "_types.Number",
        "description": "The value of the green component."
      },
      "b": {
        "type": "_types.Number",
        "description": "The value of the blue component."
      }
    },
    "implementation": {
      "javascript": {
        "code": "return `rgb(${Math.min(255, Math.max(0, $$args.r))}, ${Math.min(255, Math.max(0, $$args.g))}, ${Math.min(255, Math.max(0, $$args.b))})`;\n"
      }
    },
    "returns": {
      "type": "_types.String",
      "description": "The string representation of the RGB color."
    },
    "tests": {
      "rgbFullRange": {
        "description": "Test full range of values.",
        "input": {
          "r": 255,
          "g": 128,
          "b": 64
        },
        "expected": "rgb(255, 128, 64)"
      },
      "rgbPartialRange": {
        "description": "Test partial range of values.",
        "input": {
          "r": 100,
          "g": 50,
          "b": 25
        },
        "expected": "rgb(100, 50, 25)"
      }
    },
    "examples": [
      {
        "description": "Edge case with minimum values for RGB.",
        "input": {
          "r": 0,
          "g": 0,
          "b": 0
        },
        "expected": "rgb(0, 0, 0)"
      },
      {
        "description": "Middle range values.",
        "input": {
          "r": 127,
          "g": 127,
          "b": 127
        },
        "expected": "rgb(127, 127, 127)"
      },
      {
        "description": "Edge case with maximum values for RGB.",
        "input": {
          "r": 255,
          "g": 255,
          "b": 255
        },
        "expected": "rgb(255, 255, 255)"
      }
    ]
  },
  {
    "define": "_functions.Math.Random",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Generates a random number between 0 (inclusive) and 1 (exclusive).",
    "parameters": {},
    "implementation": {
      "javascript": {
        "code": "return Math.random();\n"
      }
    },
    "returns": {
      "type": "_types.Number",
      "description": "A random number between 0 (inclusive) and 1 (exclusive)."
    },
    "tests": null,
    "examples": [
      {
        "description": "Generate a random number and check it is not equal to a fixed number.",
        "input": {},
        "expected": 0.54321
      },
      {
        "description": "Generate a random number and check the output is greater than or equal to zero.",
        "input": {},
        "expected": 0.1
      },
      {
        "description": "Generate a random number and verify it is less than one.",
        "input": {},
        "expected": 0.99999
      }
    ]
  },
  {
    "define": "_functions.Math.RandomArray",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Returns a random array of the given length.",
    "parameters": {
      "length": {
        "type": "_types.Number",
        "description": "The number of elements in the returned array."
      }
    },
    "implementation": {
      "javascript": {
        "code": "const arr = [];\nfor (let i = 0; i < $$args.length; i++) {\n  arr.push(Math.random());\n}\nreturn arr;\n"
      }
    },
    "returns": {
      "type": "_types.List",
      "description": "A list of random numbers of the given length."
    },
    "tests": null,
    "examples": [
      {
        "description": "Generate a random array with length of 5.",
        "input": {
          "length": 5
        },
        "expected": [0.123, 0.456, 0.789, 0.012, 0.345]
      },
      {
        "description": "Generate a random array with length of 7.",
        "input": {
          "length": 7
        },
        "expected": [0.567, 0.89, 0.234, 0.678, 0.901, 0.345, 0.789]
      },
      {
        "description": "Generate a random array with length of 2.",
        "input": {
          "length": 2
        },
        "expected": [0.456, 0.789]
      }
    ]
  },
  {
    "define": "_functions.Math.RandomIntegerBetween",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Generates a random integer between two specified values (inclusive).",
    "parameters": {
      "min": {
        "type": "_types.Number",
        "description": "The minimum value."
      },
      "max": {
        "type": "_types.Number",
        "description": "The maximum value."
      }
    },
    "implementation": {
      "javascript": {
        "code": "const min = Math.ceil($$args.min);\nconst max = Math.floor($$args.max);\nreturn Math.floor(Math.random() * (max - min + 1)) + min;\n"
      }
    },
    "returns": {
      "type": "_types.Number",
      "description": "A random integer between the specified min and max values (inclusive)."
    },
    "tests": null,
    "examples": [
      {
        "description": "Generate a random integer between 5 and 10.",
        "input": {
          "min": 5,
          "max": 10
        },
        "expected": "A number between 5 and 10 inclusive."
      },
      {
        "description": "Generate a random integer between -10 and -5.",
        "input": {
          "min": -10,
          "max": -5
        },
        "expected": "A number between -10 and -5 inclusive."
      },
      {
        "description": "Generate a random integer between 100 and 200.",
        "input": {
          "min": 100,
          "max": 200
        },
        "expected": "A number between 100 and 200 inclusive."
      }
    ]
  },
  {
    "define": "_functions.Math.RandomNumberBetween",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Generates a random number within a specified range.",
    "parameters": {
      "min": {
        "type": "_types.Number",
        "description": "The minimum value."
      },
      "max": {
        "type": "_types.Number",
        "description": "The maximum value."
      }
    },
    "implementation": {
      "javascript": {
        "code": "return Math.random() * ($$args.max - $$args.min) + $$args.min;\n"
      }
    },
    "returns": {
      "type": "_types.Number",
      "description": "A random number between the specified min and max values."
    },
    "tests": {
      "randomWithinRange": {
        "description": "Generate a random number within the range 1 to 10.",
        "input": {
          "min": 1,
          "max": 1
        },
        "expected": 1
      }
    },
    "examples": [
      {
        "description": "Generate a random number within the range 0 to 100.",
        "input": {
          "min": 0,
          "max": 100
        },
        "expected": "(should be between 0 and 100)"
      },
      {
        "description": "Generate a random number within the range -50 to 50.",
        "input": {
          "min": -50,
          "max": 50
        },
        "expected": "(should be between -50 and 50)"
      },
      {
        "description": "Generate a random number within the range 5.5 to 9.5.",
        "input": {
          "min": 5.5,
          "max": 9.5
        },
        "expected": "(should be between 5.5 and 9.5)"
      }
    ]
  },
  {
    "define": "_functions.Number.Rank",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Returns the rank of a value in a list.",
    "parameters": {
      "list": {
        "type": "_types.List",
        "description": "The list of values to rank the specified value in."
      },
      "value": {
        "type": "_types.Any",
        "description": "The value to determine the rank of."
      }
    },
    "implementation": {
      "javascript": {
        "code": "const sortedList = $$args.list.slice().sort((a, b) => a - b);\nconst rank = sortedList.indexOf($$args.value) + 1;\nreturn rank;\n"
      }
    },
    "returns": {
      "type": "_types.Number",
      "description": "The rank of the specified value in the list, starting from 1."
    },
    "tests": {
      "rankMiddle": {
        "description": "Get the rank of a value in the middle of the list.",
        "input": {
          "list": [10, 30, 20, 5, 15],
          "value": 20
        },
        "expected": 4
      },
      "rankFirst": {
        "description": "Get the rank of the first value in the list.",
        "input": {
          "list": [5, 10, 15, 20, 25],
          "value": 5
        },
        "expected": 1
      },
      "rankLast": {
        "description": "Get the rank of the last value in the list.",
        "input": {
          "list": [1, 2, 3, 4, 5],
          "value": 5
        },
        "expected": 5
      },
      "rankDuplicate": {
        "description": "Get the rank of a value that appears multiple times in the list.",
        "input": {
          "list": [1, 2, 3, 3, 5],
          "value": 3
        },
        "expected": 3
      }
    },
    "examples": [
      {
        "description": "Get the rank of a value that is not repeated in an unordered list.",
        "input": {
          "list": [7, 24, 12, 7, 3, 18],
          "value": 12
        },
        "expected": 4
      },
      {
        "description": "Get the rank of a value in a reversed sorted list.",
        "input": {
          "list": [20, 18, 16, 14, 12, 10],
          "value": 14
        },
        "expected": 3
      },
      {
        "description": "Get the rank of a negative value in a list.",
        "input": {
          "list": [-10, -30, -20, -5, -15],
          "value": -15
        },
        "expected": 2
      }
    ]
  },
  {
    "define": "_functions.Any.Rate",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Returns a human-readable rating for the given input value.",
    "parameters": {
      "value": {
        "type": "_types.Any",
        "description": "The value for which to generate a human-readable rating."
      }
    },
    "implementation": {
      "javascript": {
        "code": "const rating = [\n  { limit: 1, text: \"Very Bad\" },\n  { limit: 2, text: \"Bad\" },\n  { limit: 3, text: \"Neutral\" },\n  { limit: 4, text: \"Good\" },\n  { limit: 5, text: \"Very Good\" }\n];\n\nlet chosenRating = \"Unrated\";\nfor (const item of rating) {\n  if ($$args.value <= item.limit) {\n    chosenRating = item.text;\n    break;\n  }\n}\n\nreturn chosenRating;\n"
      }
    },
    "returns": {
      "type": "_types.String",
      "description": "Human-readable rating for the input value."
    },
    "tests": {
      "rateNegative": {
        "description": "Generate a rating for a negative value.",
        "input": {
          "value": -3
        },
        "expected": "Very Bad"
      },
      "rateZero": {
        "description": "Generate a rating for zero.",
        "input": {
          "value": 0
        },
        "expected": "Very Bad"
      },
      "rateMiddle": {
        "description": "Generate a rating for a value in the middle of the scale.",
        "input": {
          "value": 3.5
        },
        "expected": "Good"
      },
      "rateMax": {
        "description": "Generate the highest rating.",
        "input": {
          "value": 5
        },
        "expected": "Very Good"
      },
      "rateAboveMax": {
        "description": "Generate a rating above the maximum value.",
        "input": {
          "value": 7
        },
        "expected": "Unrated"
      }
    },
    "examples": [
      {
        "description": "Generate a rating for 2.5.",
        "input": {
          "value": 2.5
        },
        "expected": "Neutral"
      },
      {
        "description": "Generate a rating for 4.5.",
        "input": {
          "value": 4.5
        },
        "expected": "Very Good"
      },
      {
        "description": "Generate a rating for an exact boundary value.",
        "input": {
          "value": 1
        },
        "expected": "Very Bad"
      }
    ]
  },
  {
    "define": "_functions.Math.RED",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Returns an integer between 0 and 255 representing the color's red component.",
    "parameters": {
      "color": {
        "type": "_types.String",
        "description": "The color to extract the red component from."
      }
    },
    "implementation": {
      "javascript": {
        "code": "function hexToRgb(hex) {\n  let shortHex = /^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i;\n  hex = hex.replace(shortHex, function(m, r, g, b) {\n    return r + r + g + g + b + b;\n  });\n\n  let longHex = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n  return longHex ? {\n    r: parseInt(longHex[1], 16),\n    g: parseInt(longHex[2], 16),\n    b: parseInt(longHex[3], 16)\n  } : null;\n}\n\nfunction hslToRgb(h, s, l) {\n  let r, g, b;\n\n  h /= 360;\n  s /= 100;\n  l /= 100;\n\n  if (s === 0) {\n    r = g = b = l;\n  } else {\n    const hue2rgb = function(p, q, t) {\n      if (t < 0) t += 1;\n      if (t > 1) t -= 1;\n      if (t < 1 / 6) return p + (q - p) * 6 * t;\n      if (t < 1 / 2) return q;\n      if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6;\n      return p;\n    };\n\n    const q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n    const p = 2 * l - q;\n    r = hue2rgb(p, q, h + 1 / 3);\n    g = hue2rgb(p, q, h);\n    b = hue2rgb(p, q, h - 1 / 3);\n  }\n\n  return {\n    r: Math.round(r * 255),\n    g: Math.round(g * 255),\n    b: Math.round(b * 255)\n  };\n}\n\nfunction parseColor(color) {\n  let rgb;\n  \n  if (color.startsWith('#')) {\n    rgb = hexToRgb(color);\n  } else if (color.startsWith('rgb')) {\n    let values = color.match(/rgb\\((\\d+),\\s*(\\d+),\\s*(\\d+)\\)/);\n    rgb = {\n      r: parseInt(values[1], 10),\n      g: parseInt(values[2], 10),\n      b: parseInt(values[3], 10)\n    };\n  } else if (color.startsWith('hsl')) {\n    let values = color.match(/hsl\\((\\d+),\\s*(\\d+)%?,\\s*(\\d+)%?\\)/);\n    rgb = hslToRgb(parseInt(values[1], 10), parseInt(values[2], 10), parseInt(values[3], 10));\n  } else {\n    let ctx = document.createElement('canvas').getContext('2d');\n    ctx.fillStyle = color;\n    rgb = hexToRgb(ctx.fillStyle);\n  }\n\n  return rgb;\n}\n\nlet rgb = parseColor($$args.color);\nif (rgb) {\n  return rgb.r;\n} else {\n  throw new Error('Invalid color');\n}\n"
      }
    },
    "returns": {
      "type": "_types.Number",
      "description": "The red component of the color."
    },
    "tests": {
      "redHexShort": {
        "description": "Extract the red component from a short hex color.",
        "input": {
          "color": "#ff0"
        },
        "expected": 255
      },
      "redRgb": {
        "description": "Extract the red component from an rgb color.",
        "input": {
          "color": "rgb(10, 20, 40)"
        },
        "expected": 10
      },
      "redHsl": {
        "description": "Extract the red component from an hsl color.",
        "input": {
          "color": "hsl(80, 20%, 40%)"
        },
        "expected": 109
      }
    },
    "examples": [
      {
        "description": "Extract the red component from a named color.",
        "input": {
          "color": "red"
        },
        "expected": 255
      },
      {
        "description": "Extract the red component from a long hex color.",
        "input": {
          "color": "#ff5733"
        },
        "expected": 255
      },
      {
        "description": "Extract the red component from another rgb color.",
        "input": {
          "color": "rgb(255, 100, 50)"
        },
        "expected": 255
      }
    ]
  },
  {
    "define": "_functions.List.RemoveAll",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Removes all occurrences of a value from a list.",
    "parameters": {
      "list": {
        "type": "_types.List",
        "description": "The list to remove the value from.",
        "items": {
          "type": "_types.Unknown"
        }
      },
      "value": {
        "type": "_types.Unknown",
        "description": "The value to remove from the list."
      }
    },
    "implementation": {
      "javascript": {
        "code": "return $$args.list.filter(item => item !== $$args.value);\n"
      }
    },
    "returns": {
      "type": "_types.List",
      "description": "The list with all occurrences of the value removed.",
      "items": {
        "type": "_types.Unknown"
      }
    },
    "tests": {
      "removeAllExistingValue": {
        "description": "Remove all occurrences of a value that exists in the list.",
        "input": {
          "list": [1, 2, 3, 2, 4, 2],
          "value": 2
        },
        "expected": [1, 3, 4]
      },
      "removeAllNonExistingValue": {
        "description": "Try to remove a value that does not exist in the list.",
        "input": {
          "list": [1, 2, 3, 4],
          "value": 5
        },
        "expected": [1, 2, 3, 4]
      },
      "removeAllFromEmptyList": {
        "description": "Try to remove a value from an empty list.",
        "input": {
          "list": [],
          "value": 1
        },
        "expected": []
      }
    },
    "examples": [
      {
        "description": "Remove all occurrences of a string value from a list.",
        "input": {
          "list": ["apple", "banana", "apple", "cherry"],
          "value": "apple"
        },
        "expected": ["banana", "cherry"]
      },
      {
        "description": "Remove all occurrences of a boolean value from a list.",
        "input": {
          "list": [true, false, true, false],
          "value": false
        },
        "expected": [true, true]
      },
      {
        "description": "Remove all occurrences of a nested object from a list.",
        "input": {
          "list": [
            {
              "a": 1
            },
            {
              "a": 2
            },
            {
              "a": 1
            }
          ],
          "value": {
            "a": 1
          }
        },
        "expected": [
          {
            "a": 2
          }
        ]
      }
    ]
  },
  {
    "define": "_functions.List.RemoveItem",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Removes the item at the given index from the input list.",
    "parameters": {
      "input": {
        "type": "_types.List",
        "description": "The input list."
      },
      "index": {
        "type": "_types.Number",
        "description": "The index of the item to remove."
      }
    },
    "implementation": {
      "javascript": {
        "code": "if ($$args.index < 0 || $$args.index >= $$args.input.length) {\n  return $$args.input;\n}\nconst result = $$args.input.slice(0, $$args.index).concat($$args.input.slice($$args.index + 1));\nreturn result;\n"
      }
    },
    "returns": {
      "type": "_types.List",
      "description": "The input list with the item removed."
    },
    "tests": {
      "removeItemAtStart": {
        "description": "Remove the first item from the list.",
        "input": {
          "input": ["a", "b", "c"],
          "index": 0
        },
        "expected": ["b", "c"]
      },
      "removeItemInMiddle": {
        "description": "Remove an item in the middle of the list.",
        "input": {
          "input": ["a", "b", "c", "d"],
          "index": 2
        },
        "expected": ["a", "b", "d"]
      },
      "removeItemAtEnd": {
        "description": "Remove the last item from the list.",
        "input": {
          "input": ["a", "b", "c"],
          "index": 2
        },
        "expected": ["a", "b"]
      },
      "removeItemNotPresent": {
        "description": "Attempt to remove an item that is not present in the list.",
        "input": {
          "input": ["a", "b", "c"],
          "index": 4
        },
        "expected": ["a", "b", "c"]
      },
      "removeItemNegativeIndex": {
        "description": "Attempt to remove an item with a negative index.",
        "input": {
          "input": ["a", "b", "c"],
          "index": -1
        },
        "expected": ["a", "b", "c"]
      }
    },
    "examples": [
      {
        "description": "Remove the second item from a list of numbers.",
        "input": {
          "input": [1, 2, 3, 4, 5],
          "index": 1
        },
        "expected": [1, 3, 4, 5]
      },
      {
        "description": "Remove the last item from a list of mixed elements.",
        "input": {
          "input": ["apple", "banana", "cherry", 9, 10.5],
          "index": 4
        },
        "expected": ["apple", "banana", "cherry", 9]
      },
      {
        "description": "Attempt to remove an item with an index greater than the list length.",
        "input": {
          "input": [100, 200, 300],
          "index": 5
        },
        "expected": [100, 200, 300]
      }
    ]
  },
  {
    "define": "_functions.Dictionary.RemoveItemByKey",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Removes the item from a dictionary that has the given key.",
    "parameters": {
      "input": {
        "type": "_types.Dictionary",
        "description": "The dictionary to remove an item from."
      },
      "key": {
        "type": "_types.String",
        "description": "The key of the item to remove."
      }
    },
    "implementation": {
      "javascript": {
        "code": "delete $$args.input[$$args.key];\nreturn $$args.input;\n"
      }
    },
    "returns": {
      "type": "_types.Dictionary",
      "description": "The updated dictionary with the removed item."
    },
    "tests": {
      "removeItemByKeySimple": {
        "description": "Remove an item from a simple dictionary.",
        "input": {
          "input": {
            "a": "1",
            "b": "2"
          },
          "key": "a"
        },
        "expected": {
          "b": "2"
        }
      },
      "removeItemByKeyMultipleKeys": {
        "description": "Remove an item from a dictionary with multiple keys.",
        "input": {
          "input": {
            "a": "1",
            "b": "2",
            "c": "3"
          },
          "key": "a"
        },
        "expected": {
          "b": "2",
          "c": "3"
        }
      },
      "removeItemByKeyNonExistent": {
        "description": "Attempt to remove an item with a non-existent key.",
        "input": {
          "input": {
            "a": "1",
            "b": "2"
          },
          "key": "c"
        },
        "expected": {
          "a": "1",
          "b": "2"
        }
      }
    },
    "examples": [
      {
        "description": "Remove an item from a dictionary where the key is a number.",
        "input": {
          "input": {
            "1": "one",
            "2": "two"
          },
          "key": "1"
        },
        "expected": {
          "2": "two"
        }
      },
      {
        "description": "Remove an item from a dictionary with a nested dictionary.",
        "input": {
          "input": {
            "a": "1",
            "b": {
              "c": "3",
              "d": "4"
            }
          },
          "key": "b"
        },
        "expected": {
          "a": "1"
        }
      },
      {
        "description": "Remove an item from an empty dictionary.",
        "input": {
          "input": {},
          "key": "a"
        },
        "expected": {}
      }
    ]
  },
  {
    "define": "_functions.List.RemoveItemsAt",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Removes the items at the specified indices from a list.",
    "parameters": {
      "input": {
        "type": "_types.List",
        "description": "The list to remove items from."
      },
      "start": {
        "type": "_types.Number",
        "description": "The index of the first item to remove (0-based)."
      },
      "end": {
        "type": "_types.Number",
        "description": "The index where the range ends, not including the item at this index. Negative indices will be calculated from the end of the list."
      }
    },
    "implementation": {
      "javascript": {
        "code": "const start = $$args.start < 0 ? $$args.input.length + $$args.start : $$args.start;\nconst end = $$args.end < 0 ? $$args.input.length + $$args.end : $$args.end;\nconst result = $$args.input.slice(0, start).concat($$args.input.slice(end));\nreturn result;\n"
      }
    },
    "returns": {
      "type": "_types.List",
      "description": "The original list with the items at the specified indices removed."
    },
    "tests": {
      "removeItemsAtStart": {
        "description": "Remove the item at the start of a list.",
        "input": {
          "input": ["a", "b", "c", "d"],
          "start": 0,
          "end": 1
        },
        "expected": ["b", "c", "d"]
      },
      "removeItemsAtEnd": {
        "description": "Remove the item at the end of a list.",
        "input": {
          "input": ["a", "b", "c", "d"],
          "start": -1,
          "end": -1
        },
        "expected": ["a", "b", "c", "d"]
      },
      "removeItemsMultiple": {
        "description": "Remove multiple items from a list.",
        "input": {
          "input": ["a", "b", "c", "d", "e", "f"],
          "start": 1,
          "end": 4
        },
        "expected": ["a", "e", "f"]
      },
      "removeItemsWithNegativeIndices": {
        "description": "Remove items using negative indices.",
        "input": {
          "input": ["a", "b", "c", "d", "e", "f"],
          "start": -4,
          "end": -2
        },
        "expected": ["a", "b", "e", "f"]
      }
    },
    "examples": [
      {
        "description": "Remove an item from the middle of a list.",
        "input": {
          "input": ["apple", "banana", "cherry", "date"],
          "start": 1,
          "end": 2
        },
        "expected": ["apple", "cherry", "date"]
      },
      {
        "description": "Remove multiple items from the end of a list using negative indices.",
        "input": {
          "input": ["apple", "banana", "cherry", "date"],
          "start": -3,
          "end": -1
        },
        "expected": ["apple", "date"]
      },
      {
        "description": "Remove all items from the list.",
        "input": {
          "input": ["apple", "banana", "cherry", "date"],
          "start": 0,
          "end": 4
        },
        "expected": []
      }
    ]
  },
  {
    "define": "_functions.List.Repeat",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Repeats the given list a specified number of times.",
    "parameters": {
      "input": {
        "type": "_types.List",
        "description": "The list to repeat."
      },
      "count": {
        "type": "_types.Number",
        "description": "The number of times to repeat the list."
      }
    },
    "implementation": {
      "javascript": {
        "code": "let result = [];\nif ($$args.count > 0) {\n  for (let i = 0; i < $$args.count; i++) {\n    result = result.concat($$args.input);\n  }\n}\nreturn result;\n"
      }
    },
    "returns": {
      "type": "_types.List",
      "description": "The repeated list."
    },
    "tests": {
      "repeatSimple": {
        "description": "Repeat a simple list.",
        "input": {
          "input": ["a", "b"],
          "count": 3
        },
        "expected": ["a", "b", "a", "b", "a", "b"]
      },
      "repeatNegativeCount": {
        "description": "Repeat the list with a negative count.",
        "input": {
          "input": ["c", "d"],
          "count": -2
        },
        "expected": []
      },
      "repeatZeroCount": {
        "description": "Repeat the list with a zero count.",
        "input": {
          "input": ["e", "f"],
          "count": 0
        },
        "expected": []
      },
      "repeatOneCount": {
        "description": "Repeat the list with a count of one.",
        "input": {
          "input": ["g", "h"],
          "count": 1
        },
        "expected": ["g", "h"]
      }
    },
    "examples": [
      {
        "description": "Repeat the list with multiple numbers.",
        "input": {
          "input": [1, 2, 3],
          "count": 2
        },
        "expected": [1, 2, 3, 1, 2, 3]
      },
      {
        "description": "Repeat an empty list.",
        "input": {
          "input": [],
          "count": 5
        },
        "expected": []
      },
      {
        "description": "Repeat a list with mixed types.",
        "input": {
          "input": [1, "two", 3, "four"],
          "count": 2
        },
        "expected": [1, "two", 3, "four", 1, "two", 3, "four"]
      }
    ]
  },
  {
    "define": "_functions.String.Replace",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Replaces all occurrences of a substring in a string with another substring",
    "parameters": {
      "string": {
        "type": "_types.String",
        "description": "The string to replace substrings in"
      },
      "search": {
        "type": "_types.String",
        "description": "The substring to search for"
      },
      "replacement": {
        "type": "_types.String",
        "description": "The substring to replace the search substring with"
      }
    },
    "implementation": {
      "javascript": {
        "code": "return $$args.string.replaceAll(new RegExp($$args.search, 'g'), $$args.replacement);\n"
      }
    },
    "returns": {
      "type": "_types.String",
      "description": "The string with the substrings replaced"
    },
    "tests": {
      "noOccurrences": {
        "description": "Test with no occurrences of the search string",
        "input": {
          "string": "hello",
          "search": "world",
          "replacement": "planet"
        },
        "expected": "hello"
      },
      "oneOccurrence": {
        "description": "Test with one occurrence of the search string",
        "input": {
          "string": "hello world",
          "search": "world",
          "replacement": "planet"
        },
        "expected": "hello planet"
      },
      "multipleOccurrences": {
        "description": "Test with multiple occurrences of the search string",
        "input": {
          "string": "hello world world",
          "search": "world",
          "replacement": "planet"
        },
        "expected": "hello planet planet"
      }
    },
    "examples": [
      {
        "description": "Replace a single character in a string",
        "input": {
          "string": "aabbcc",
          "search": "b",
          "replacement": "d"
        },
        "expected": "aaddcc"
      },
      {
        "description": "Replace a word in a string with spaces",
        "input": {
          "string": "apple banana cherry",
          "search": "banana",
          "replacement": "grape"
        },
        "expected": "apple grape cherry"
      },
      {
        "description": "Replace a substring consisting of mixed characters",
        "input": {
          "string": "123abc456abc",
          "search": "abc",
          "replacement": "xyz"
        },
        "expected": "123xyz456xyz"
      }
    ]
  },
  {
    "define": "_functions.String.ReplaceAll",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Returns a new text where all occurrences of the given exact text are replaced with the given replacement text.",
    "parameters": {
      "text": {
        "type": "_types.String",
        "description": "The text to search and replace."
      },
      "search": {
        "type": "_types.String",
        "description": "The exact text to search for."
      },
      "replacement": {
        "type": "_types.String",
        "description": "The replacement text."
      }
    },
    "implementation": {
      "javascript": {
        "code": "return $$args.text.split($$args.search).join($$args.replacement);\n"
      }
    },
    "returns": {
      "type": "_types.String",
      "description": "The new text with all occurrences replaced."
    },
    "tests": {
      "replaceAllExactSimple": {
        "description": "Replace all occurrences of a simple text.",
        "input": {
          "text": "foo bar bar baz",
          "search": "bar",
          "replacement": "baz"
        },
        "expected": "foo baz baz baz"
      },
      "replaceAllExactMultipleMatches": {
        "description": "Replace all occurrences of the text.",
        "input": {
          "text": "foo foo baz",
          "search": "foo",
          "replacement": "bar"
        },
        "expected": "bar bar baz"
      },
      "replaceAllExactNoMatch": {
        "description": "Attempt to replace when no match is found.",
        "input": {
          "text": "foo bar baz",
          "search": "qux",
          "replacement": "quux"
        },
        "expected": "foo bar baz"
      },
      "replaceAllExactCaseSensitive": {
        "description": "Replace all occurrences of a text with case sensitivity.",
        "input": {
          "text": "Foo bar Baz bar",
          "search": "bar",
          "replacement": "qux"
        },
        "expected": "Foo qux Baz qux"
      }
    },
    "examples": [
      {
        "description": "Replace a repeating word with another word.",
        "input": {
          "text": "repeat repeat repeat",
          "search": "repeat",
          "replacement": "done"
        },
        "expected": "done done done"
      },
      {
        "description": "Replace a substring in a sentence multiple times.",
        "input": {
          "text": "cats and dogs",
          "search": " ",
          "replacement": "-"
        },
        "expected": "cats-and-dogs"
      },
      {
        "description": "Replace a character in a string with an empty string (removal).",
        "input": {
          "text": "remove all e's",
          "search": "e",
          "replacement": ""
        },
        "expected": "rmov all 's"
      }
    ]
  },
  {
    "define": "_functions.String.ReplaceAllRegex",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Returns a new text where all matches for the given regular expression are replaced with the given replacement text.",
    "parameters": {
      "text": {
        "type": "_types.String",
        "description": "The text to search and replace."
      },
      "pattern": {
        "type": "_types.String",
        "description": "The regular expression pattern to match."
      },
      "replacement": {
        "type": "_types.String",
        "description": "The replacement text."
      }
    },
    "implementation": {
      "javascript": {
        "code": "const regex = new RegExp($$args.pattern, 'g');\nreturn $$args.text.replace(regex, $$args.replacement);\n"
      }
    },
    "returns": {
      "type": "_types.String",
      "description": "The new text with all matches replaced."
    },
    "tests": {
      "replaceAllRegexSimple": {
        "description": "Replace all matches of a simple pattern.",
        "input": {
          "text": "one two one two",
          "pattern": "one",
          "replacement": "three"
        },
        "expected": "three two three two"
      },
      "replaceAllRegexMultipleMatches": {
        "description": "Replace all matches of the pattern.",
        "input": {
          "text": "hello hello hello",
          "pattern": "hello",
          "replacement": "hi"
        },
        "expected": "hi hi hi"
      },
      "replaceAllRegexNoMatch": {
        "description": "Attempt to replace when no match is found.",
        "input": {
          "text": "hello world",
          "pattern": "earth",
          "replacement": "planet"
        },
        "expected": "hello world"
      },
      "replaceAllRegexCaseInsensitive": {
        "description": "Replace all matches of a pattern with case insensitivity.",
        "input": {
          "text": "Hello World hello world",
          "pattern": "world",
          "replacement": "universe"
        },
        "expected": "Hello World hello universe"
      }
    },
    "examples": [
      {
        "description": "Replace all occurrences of digits.",
        "input": {
          "text": "There are 2 cats and 3 dogs.",
          "pattern": "\\d",
          "replacement": "#"
        },
        "expected": "There are # cats and # dogs."
      },
      {
        "description": "Replace all double letters with a single letter.",
        "input": {
          "text": "I need some coffee and a book.",
          "pattern": "(\\w)\\1",
          "replacement": "$1"
        },
        "expected": "I ned some cofe and a bok."
      },
      {
        "description": "Replace all instances of punctuation.",
        "input": {
          "text": "Hello! How are you doing?",
          "pattern": "[!?]",
          "replacement": "."
        },
        "expected": "Hello. How are you doing."
      }
    ]
  },
  {
    "define": "_functions.String.ReplaceOne",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Returns a new text where the first occurrence of the given exact text is replaced with the given replacement text.",
    "parameters": {
      "text": {
        "type": "_types.String",
        "description": "The text to search and replace."
      },
      "search": {
        "type": "_types.String",
        "description": "The exact text to search for."
      },
      "replacement": {
        "type": "_types.String",
        "description": "The replacement text."
      }
    },
    "implementation": {
      "javascript": {
        "code": "return $$args.text.replace($$args.search, $$args.replacement);\n"
      }
    },
    "returns": {
      "type": "_types.String",
      "description": "The new text with the first occurrence replaced."
    },
    "tests": {
      "replaceOneExactSimple": {
        "description": "Replace the first occurrence of a simple text.",
        "input": {
          "text": "foo bar baz",
          "search": "bar",
          "replacement": "baz"
        },
        "expected": "foo baz baz"
      },
      "replaceOneExactFirstMatch": {
        "description": "Replace only the first occurrence of the text.",
        "input": {
          "text": "foo foo baz",
          "search": "foo",
          "replacement": "bar"
        },
        "expected": "bar foo baz"
      },
      "replaceOneExactNoMatch": {
        "description": "Attempt to replace when no match is found.",
        "input": {
          "text": "foo bar baz",
          "search": "qux",
          "replacement": "quux"
        },
        "expected": "foo bar baz"
      },
      "replaceOneExactCaseSensitive": {
        "description": "Replace the first occurrence of a text with case sensitivity.",
        "input": {
          "text": "Foo bar Baz",
          "search": "bar",
          "replacement": "qux"
        },
        "expected": "Foo qux Baz"
      }
    },
    "examples": [
      {
        "description": "Replace a word with a similar word.",
        "input": {
          "text": "hello hello world",
          "search": "hello",
          "replacement": "hi"
        },
        "expected": "hi hello world"
      },
      {
        "description": "Replace a substring within a word.",
        "input": {
          "text": "foobarbaz",
          "search": "bar",
          "replacement": "BAR"
        },
        "expected": "fooBARbaz"
      },
      {
        "description": "Replace a space character with an underscore.",
        "input": {
          "text": "foo bar baz",
          "search": " ",
          "replacement": "_"
        },
        "expected": "foo_bar baz"
      }
    ]
  },
  {
    "define": "_functions.String.ReplaceOneRegex",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Returns a new text where the first match for the given regular expression is replaced with the given replacement text.",
    "parameters": {
      "text": {
        "type": "_types.String",
        "description": "The text to search and replace."
      },
      "pattern": {
        "type": "_types.String",
        "description": "The regular expression pattern to match."
      },
      "replacement": {
        "type": "_types.String",
        "description": "The replacement text."
      }
    },
    "implementation": {
      "javascript": {
        "code": "const regex = new RegExp($$args.pattern);\nreturn $$args.text.replace(regex, $$args.replacement);\n"
      }
    },
    "returns": {
      "type": "_types.String",
      "description": "The new text with the first match replaced."
    },
    "tests": {
      "replaceOneRegexSimple": {
        "description": "Replace the first match of a simple pattern.",
        "input": {
          "text": "hello world",
          "pattern": "world",
          "replacement": "universe"
        },
        "expected": "hello universe"
      },
      "replaceOneRegexFirstMatch": {
        "description": "Replace only the first match of the pattern.",
        "input": {
          "text": "one two one two",
          "pattern": "one",
          "replacement": "three"
        },
        "expected": "three two one two"
      },
      "replaceOneRegexNoMatch": {
        "description": "Attempt to replace when no match is found.",
        "input": {
          "text": "hello world",
          "pattern": "earth",
          "replacement": "planet"
        },
        "expected": "hello world"
      },
      "replaceOneRegexCaseInsensitive": {
        "description": "Replace the first match of a pattern with case insensitivity.",
        "input": {
          "text": "Hello World",
          "pattern": "world",
          "replacement": "universe"
        },
        "expected": "Hello World"
      }
    },
    "examples": [
      {
        "description": "Replace a word with punctuation at the end.",
        "input": {
          "text": "Good morning, world!",
          "pattern": "world!",
          "replacement": "universe."
        },
        "expected": "Good morning, universe."
      },
      {
        "description": "Replace a word using a case-sensitive pattern.",
        "input": {
          "text": "I love JavaScript.",
          "pattern": "JavaScript",
          "replacement": "TypeScript"
        },
        "expected": "I love TypeScript."
      },
      {
        "description": "Replace a pattern that includes special regex characters.",
        "input": {
          "text": "Find and replace this dot: .",
          "pattern": "\\.",
          "replacement": "!"
        },
        "expected": "Find and replace this dot: !"
      }
    ]
  },
  {
    "define": "_functions.String.ReplaceURLParameters",
    "blueprint": "_blueprints.Function",
    "description": "Sets the given URL text's query parameters to the given parameter object.",
    "parameters": {
      "base_url": {
        "type": "_types.String",
        "description": "The base URL text"
      },
      "parameters": {
        "type": "_types.Map",
        "description": "A dictionary for parameters"
      }
    },
    "implementation": {
      "javascript": {
        "code": "const url = new URL($$args.base_url);\nObject.keys($$args.parameters).forEach((key) => {\n  url.searchParams.set(key, $$args.parameters[key]);\n});\nreturn url.href;"
      }
    },
    "returns": {
      "type": "_types.String",
      "description": "The modified URL with the given parameters"
    },
    "tests": {
      "test1": {
        "description": "Test with a new set of parameters",
        "input": {
          "base_url": "http://www.example.com",
          "parameters": {
            "test1": "abc",
            "test2": 123
          }
        },
        "expected": "http://www.example.com/?test1=abc&test2=123"
      },
      "test2": {
        "description": "Test with an existing set of parameters",
        "input": {
          "base_url": "http://www.example.com/?abc=123&test=abc",
          "parameters": {
            "test1": "abc",
            "test2": 123
          }
        },
        "expected": "http://www.example.com/?abc=123&test=abc&test1=abc&test2=123"
      },
      "test3": {
        "description": "Test with an empty set of parameters",
        "input": {
          "base_url": "http://www.example.com/?abc=123&test=abc",
          "parameters": {}
        },
        "expected": "http://www.example.com/?abc=123&test=abc"
      }
    },
    "examples": [
      {
        "description": "Add a parameter to a base URL without query string.",
        "input": {
          "base_url": "https://www.sample.com",
          "parameters": {
            "query": "example"
          }
        },
        "expected": "https://www.sample.com/?query=example"
      },
      {
        "description": "Modify an existing parameter in the URL.",
        "input": {
          "base_url": "https://www.sample.com?foo=bar",
          "parameters": {
            "foo": "baz"
          }
        },
        "expected": "https://www.sample.com/?foo=baz"
      },
      {
        "description": "Add multiple parameters to the URL.",
        "input": {
          "base_url": "https://www.sample.com",
          "parameters": {
            "param1": "value1",
            "param2": "value2"
          }
        },
        "expected": "https://www.sample.com/?param1=value1&param2=value2"
      }
    ]
  },
  {
    "define": "_functions.Math.Reverse",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Reverses the order of elements in a list or characters in a string.",
    "parameters": {
      "input": {
        "type": "_types.Union",
        "description": "The list or string to reverse.",
        "options": [
          {
            "type": "_types.List",
            "items": {
              "type": "_types.Unknown"
            }
          },
          {
            "type": "_types.String"
          }
        ]
      }
    },
    "implementation": {
      "javascript": {
        "code": "if (Array.isArray($$args.input)) {\n  return $$args.input.slice().reverse();\n} else if (typeof $$args.input === 'string') {\n  return $$args.input.split('').reverse().join('');\n} else {\n  throw new Error('Unsupported type');\n}\n"
      }
    },
    "returns": {
      "type": "_types.Union",
      "description": "The reversed list or string.",
      "options": [
        {
          "type": "_types.List",
          "items": {
            "type": "_types.Unknown"
          }
        },
        {
          "type": "_types.String"
        }
      ]
    },
    "tests": {
      "reverseString": {
        "description": "Reverse a string.",
        "input": {
          "input": "hello"
        },
        "expected": "olleh"
      },
      "reverseList": {
        "description": "Reverse a list.",
        "input": {
          "input": [1, 2, 3, 4, 5]
        },
        "expected": [5, 4, 3, 2, 1]
      },
      "reverseEmptyString": {
        "description": "Reverse an empty string.",
        "input": {
          "input": ""
        },
        "expected": ""
      },
      "reverseEmptyList": {
        "description": "Reverse an empty list.",
        "input": {
          "input": []
        },
        "expected": []
      }
    },
    "examples": [
      {
        "description": "Reverse a string with special characters.",
        "input": {
          "input": "!@#123abc"
        },
        "expected": "cba321#@!"
      },
      {
        "description": "Reverse a list of mixed types.",
        "input": {
          "input": [1, "two", 3, "four"]
        },
        "expected": ["four", 3, "two", 1]
      },
      {
        "description": "Reverse a string of uppercase letters.",
        "input": {
          "input": "ABCDEF"
        },
        "expected": "FEDCBA"
      }
    ]
  },
  {
    "define": "_functions.String.ReverseLookup",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Returns the first key from a dictionary that matches the given value.",
    "parameters": {
      "dict": {
        "type": "_types.Dictionary",
        "description": "The dictionary to search for the matching key."
      },
      "value": {
        "type": "_types.String",
        "description": "The value to find in the dictionary."
      }
    },
    "implementation": {
      "javascript": {
        "code": "let result = null;\nfor (const [key, val] of Object.entries($$args.dict)) {\n  if (val === $$args.value) {\n    result = key;\n    break;\n  }\n}\nreturn result;\n"
      }
    },
    "returns": {
      "type": "_types.String",
      "description": "The first matching key."
    },
    "tests": {
      "reverseLookupSimple": {
        "description": "Find the first key that matches a simple value.",
        "input": {
          "dict": {
            "a": "hello",
            "b": "world"
          },
          "value": "hello"
        },
        "expected": "a"
      },
      "reverseLookupMultiple": {
        "description": "Find the first key that matches one of multiple values.",
        "input": {
          "dict": {
            "a": "hello",
            "b": "goodbye",
            "c": "hello"
          },
          "value": "hello"
        },
        "expected": "a"
      },
      "reverseLookupNoMatch": {
        "description": "Attempt to find a matching key when no match is found.",
        "input": {
          "dict": {
            "a": "hello",
            "b": "world"
          },
          "value": "goodbye"
        },
        "expected": null
      }
    },
    "examples": [
      {
        "description": "Find key when there is an exact match.",
        "input": {
          "dict": {
            "key1": "foo",
            "key2": "bar"
          },
          "value": "bar"
        },
        "expected": "key2"
      },
      {
        "description": "Finds the first key when searching for a duplicated value.",
        "input": {
          "dict": {
            "x": "alpha",
            "y": "beta",
            "z": "alpha"
          },
          "value": "alpha"
        },
        "expected": "x"
      },
      {
        "description": "Returns null when the value is not in the dictionary.",
        "input": {
          "dict": {
            "p": "one",
            "q": "two"
          },
          "value": "three"
        },
        "expected": null
      }
    ]
  },
  {
    "define": "_functions.Dictionary.ReverseLookupAll",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Returns all keys that have the given value in a dictionary.",
    "parameters": {
      "dictionary": {
        "type": "_types.Dictionary",
        "description": "The input dictionary to search."
      },
      "value": {
        "type": "_types.String",
        "description": "The value to look for in the dictionary."
      }
    },
    "implementation": {
      "javascript": {
        "code": "const result = [];\nObject.keys($$args.dictionary).forEach((k) => {\n  if ($$args.dictionary[k] === $$args.value) {\n    result.push(k);\n  }\n});\nreturn result;\n"
      }
    },
    "returns": {
      "type": "_types.List",
      "description": "A list of all keys that have the given value in the dictionary."
    },
    "tests": {
      "reverseLookupAllSimple": {
        "description": "Find multiple matches.",
        "input": {
          "dictionary": {
            "a": "x",
            "b": "y",
            "c": "x"
          },
          "value": "x"
        },
        "expected": ["a", "c"]
      },
      "reverseLookupAllNoMatch": {
        "description": "No matches found in the dictionary.",
        "input": {
          "dictionary": {
            "a": "x",
            "b": "y"
          },
          "value": "z"
        },
        "expected": []
      },
      "reverseLookupAllSingleMatch": {
        "description": "A single match found in the dictionary.",
        "input": {
          "dictionary": {
            "a": "x",
            "b": "y",
            "c": "x"
          },
          "value": "y"
        },
        "expected": ["b"]
      }
    },
    "examples": [
      {
        "description": "Look up keys with a common value in a dictionary with mixed value types.",
        "input": {
          "dictionary": {
            "a": "1",
            "b": 1,
            "c": "1"
          },
          "value": "1"
        },
        "expected": ["a", "c"]
      },
      {
        "description": "Look up keys with a value that is an empty string.",
        "input": {
          "dictionary": {
            "a": "",
            "b": "not empty",
            "c": ""
          },
          "value": ""
        },
        "expected": ["a", "c"]
      },
      {
        "description": "Look up keys with a value that appears only once.",
        "input": {
          "dictionary": {
            "x": "alpha",
            "y": "beta",
            "z": "gamma"
          },
          "value": "beta"
        },
        "expected": ["y"]
      }
    ]
  },
  {
    "define": "_functions.String.RightPad",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Pads the given string to a specified length by appending a specified character from the right.",
    "parameters": {
      "text": {
        "type": "_types.String",
        "description": "The original text to pad."
      },
      "maxLength": {
        "type": "_types.Number",
        "description": "The maximum length of the padded text."
      },
      "padChar": {
        "type": "_types.String",
        "description": "The character to use for padding."
      }
    },
    "implementation": {
      "javascript": {
        "code": "let result = $$args.text;\nif ($$args.maxLength > $$args.text.length) {\n  result += new Array($$args.maxLength - $$args.text.length + 1).join($$args.padChar);\n}\nreturn result;\n"
      }
    },
    "returns": {
      "type": "_types.String",
      "description": "The padded text."
    },
    "tests": {
      "rightPadSimple": {
        "description": "Pad a short string.",
        "input": {
          "text": "hello",
          "maxLength": 10,
          "padChar": "-"
        },
        "expected": "hello-----"
      },
      "rightPadLonger": {
        "description": "Pad a longer string.",
        "input": {
          "text": "long long string",
          "maxLength": 20,
          "padChar": "*"
        },
        "expected": "long long string****"
      },
      "rightPadNoPadding": {
        "description": "No padding needed.",
        "input": {
          "text": "short",
          "maxLength": 5,
          "padChar": "^"
        },
        "expected": "short"
      }
    },
    "examples": [
      {
        "description": "Pad a text with space characters.",
        "input": {
          "text": "text",
          "maxLength": 8,
          "padChar": " "
        },
        "expected": "text    "
      },
      {
        "description": "Pad a numeric string with zeros.",
        "input": {
          "text": "123",
          "maxLength": 6,
          "padChar": "0"
        },
        "expected": "123000"
      },
      {
        "description": "Pad an empty string.",
        "input": {
          "text": "",
          "maxLength": 4,
          "padChar": "x"
        },
        "expected": "xxxx"
      }
    ]
  },
  {
    "define": "_functions.String.RightStrip",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Removes whitespace from the right side of a string.",
    "parameters": {
      "text": {
        "type": "_types.String",
        "description": "The original text to strip whitespace from."
      }
    },
    "implementation": {
      "javascript": {
        "code": "return $$args.text.replace(/\\s+$/g, '');\n"
      }
    },
    "returns": {
      "type": "_types.String",
      "description": "The input string with whitespace removed from the right side."
    },
    "tests": {
      "rightStripSimple": {
        "description": "Remove whitespace from the end of a simple string.",
        "input": {
          "text": " hello world"
        },
        "expected": " hello world"
      },
      "rightStripMultiWhitespace": {
        "description": "Remove multiple whitespace characters from the end of a string.",
        "input": {
          "text": "   hello   "
        },
        "expected": "   hello"
      },
      "rightStripNoWhitespaces": {
        "description": "Attempt to remove whitespace when none is present.",
        "input": {
          "text": "hello world"
        },
        "expected": "hello world"
      }
    },
    "examples": [
      {
        "description": "Remove whitespace from the end of a sentence with punctuation.",
        "input": {
          "text": "Hello there!   "
        },
        "expected": "Hello there!"
      },
      {
        "description": "Remove whitespace from a string that contains multiple lines.",
        "input": {
          "text": "Line1\\nLine2   "
        },
        "expected": "Line1\\nLine2"
      },
      {
        "description": "Remove whitespace from a string that contains tabs at the end.",
        "input": {
          "text": "Tabbed end\\t\\t\\t"
        },
        "expected": "Tabbed end"
      }
    ]
  },
  {
    "define": "_functions.Math.Round",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Rounds a number to a specified number of decimal places.",
    "parameters": {
      "number": {
        "type": "_types.Number",
        "description": "The number to round."
      },
      "decimals": {
        "type": "_types.Number",
        "description": "The number of decimal places to round to."
      }
    },
    "implementation": {
      "javascript": {
        "code": "const factor = Math.pow(10, $$args.decimals);\nreturn Math.round($$args.number * factor) / factor;\n"
      }
    },
    "returns": {
      "type": "_types.Number",
      "description": "The rounded number."
    },
    "tests": {
      "roundToZeroDecimals": {
        "description": "Round a number to zero decimal places.",
        "input": {
          "number": 3.14159,
          "decimals": 0
        },
        "expected": 3
      },
      "roundToTwoDecimals": {
        "description": "Round a number to two decimal places.",
        "input": {
          "number": 3.14159,
          "decimals": 2
        },
        "expected": 3.14
      },
      "roundNegativeNumber": {
        "description": "Round a negative number to one decimal place.",
        "input": {
          "number": -2.71828,
          "decimals": 1
        },
        "expected": -2.7
      },
      "roundToZeroDecimalsUp": {
        "description": "Round a number that rounds up to zero decimal places.",
        "input": {
          "number": 2.6,
          "decimals": 0
        },
        "expected": 3
      }
    },
    "examples": [
      {
        "description": "Round a small number to three decimal places.",
        "input": {
          "number": 0.12345,
          "decimals": 3
        },
        "expected": 0.123
      },
      {
        "description": "Round a large number to one decimal place.",
        "input": {
          "number": 12345.6789,
          "decimals": 1
        },
        "expected": 12345.7
      },
      {
        "description": "Round a number with no decimal places specified (implicitly zero).",
        "input": {
          "number": 456.789,
          "decimals": 0
        },
        "expected": 457
      }
    ]
  },
  {
    "define": "_functions.List.SLN",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Moves the input list to the right by the given number of steps.",
    "parameters": {
      "input": {
        "type": "_types.List",
        "description": "The list to slide."
      },
      "steps": {
        "type": "_types.Number",
        "description": "The number of steps to slide the list to the right."
      }
    },
    "implementation": {
      "javascript": {
        "code": "const list = $$args.input.slice();\nconst steps = $$args.steps % list.length;\nconst movedItems = list.splice(-steps);\n\nlist.unshift(...movedItems);\nreturn list;\n"
      }
    },
    "returns": {
      "type": "_types.List",
      "description": "The list after sliding to the right by the specified number of steps."
    },
    "tests": {
      "slideListPositiveSteps": {
        "description": "Slide the list to the right by a positive number of steps.",
        "input": {
          "input": ["a", "b", "c", "d"],
          "steps": 2
        },
        "expected": ["c", "d", "a", "b"]
      },
      "slideListNegativeSteps": {
        "description": "Slide the list to the right by a negative number of steps (equal to positive steps).",
        "input": {
          "input": ["a", "b", "c", "d"],
          "steps": -2
        },
        "expected": ["c", "d", "a", "b"]
      },
      "slideListLargeSteps": {
        "description": "Slide the list to the right by a large number of steps (equivalent to some steps).",
        "input": {
          "input": [1, 2, 3, 4, 5],
          "steps": 5
        },
        "expected": [1, 2, 3, 4, 5]
      },
      "slideListZeroSteps": {
        "description": "Slide the list to the right by 0 steps should result in the same list.",
        "input": {
          "input": ["x", "y", "z"],
          "steps": 0
        },
        "expected": ["x", "y", "z"]
      }
    },
    "examples": [
      {
        "description": "Slide a list of numbers to the right by 1 step.",
        "input": {
          "input": [10, 20, 30, 40],
          "steps": 1
        },
        "expected": [40, 10, 20, 30]
      },
      {
        "description": "Slide a list of mixed elements to the right by 3 steps.",
        "input": {
          "input": [true, "alpha", 42, null],
          "steps": 3
        },
        "expected": ["alpha", 42, null, true]
      },
      {
        "description": "Slide a list of characters to the right by the length of the list.",
        "input": {
          "input": ["p", "q", "r", "s"],
          "steps": 4
        },
        "expected": ["p", "q", "r", "s"]
      }
    ]
  },
  {
    "define": "_functions.List.SliceFirst",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Returns the first 'n' elements of a list.",
    "parameters": {
      "list": {
        "type": "_types.List",
        "description": "The list to take elements from."
      },
      "n": {
        "type": "_types.Number",
        "description": "The number of elements to select from the beginning of the list."
      }
    },
    "implementation": {
      "javascript": {
        "code": "return $$args.list.slice(0, $$args.n);\n"
      }
    },
    "returns": {
      "type": "_types.List",
      "description": "The first 'n' elements of the list."
    },
    "tests": {
      "sliceFirstTwo": {
        "description": "Select the first two elements of a list.",
        "input": {
          "list": ["a", "b", "c", "d"],
          "n": 2
        },
        "expected": ["a", "b"]
      },
      "sliceFirstZero": {
        "description": "Select no elements from the list.",
        "input": {
          "list": ["x", "y", "z"],
          "n": 0
        },
        "expected": []
      },
      "sliceFirstAll": {
        "description": "Select all elements from the list.",
        "input": {
          "list": ["hello", "world"],
          "n": 2
        },
        "expected": ["hello", "world"]
      }
    },
    "examples": [
      {
        "description": "Select the first element from a list of numbers.",
        "input": {
          "list": [1, 2, 3, 4, 5],
          "n": 1
        },
        "expected": [1]
      },
      {
        "description": "Select the first three elements from a mixed list.",
        "input": {
          "list": ["apple", "banana", "cherry", "date"],
          "n": 3
        },
        "expected": ["apple", "banana", "cherry"]
      },
      {
        "description": "Select elements from an empty list.",
        "input": {
          "list": [],
          "n": 5
        },
        "expected": []
      }
    ]
  },
  {
    "define": "_functions.Math.Saturate",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Saturates a value to be within the range of [0, 1].",
    "parameters": {
      "value": {
        "type": "_types.Number",
        "description": "The value to saturate."
      }
    },
    "implementation": {
      "javascript": {
        "code": "return Math.min(1, Math.max(0, $$args.value));\n"
      }
    },
    "returns": {
      "type": "_types.Number",
      "description": "The saturated value."
    },
    "tests": {
      "saturateZero": {
        "description": "Saturate a value of 0.",
        "input": {
          "value": 0
        },
        "expected": 0
      },
      "saturateOne": {
        "description": "Saturate a value of 1.",
        "input": {
          "value": 1
        },
        "expected": 1
      },
      "saturateLessThanZero": {
        "description": "Saturate a negative value to 0.",
        "input": {
          "value": -1
        },
        "expected": 0
      },
      "saturateGreaterThanOne": {
        "description": "Saturate a value greater than 1 to 1.",
        "input": {
          "value": 2
        },
        "expected": 1
      }
    },
    "examples": [
      {
        "description": "Saturate a value between 0 and 1.",
        "input": {
          "value": 0.5
        },
        "expected": 0.5
      },
      {
        "description": "Saturate a negative fractional value.",
        "input": {
          "value": -0.75
        },
        "expected": 0
      },
      {
        "description": "Saturate a positive fractional value greater than 1.",
        "input": {
          "value": 1.25
        },
        "expected": 1
      }
    ]
  },
  {
    "define": "_functions.Math.Saturation",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Saturates the input value to a range of [0, 1].",
    "parameters": {
      "value": {
        "type": "_types.Number",
        "description": "The value to be saturated."
      }
    },
    "implementation": {
      "javascript": {
        "code": "return Math.min(Math.max($$args.value, 0), 1);\n"
      }
    },
    "returns": {
      "type": "_types.Number",
      "description": "The saturated value in the range [0, 1]."
    },
    "tests": {
      "saturationZero": {
        "description": "Saturate a value of 0.",
        "input": {
          "value": 0
        },
        "expected": 0
      },
      "saturationOne": {
        "description": "Saturate a value of 1.",
        "input": {
          "value": 1
        },
        "expected": 1
      },
      "saturationLessThanZero": {
        "description": "Saturate a value less than 0.",
        "input": {
          "value": -0.5
        },
        "expected": 0
      },
      "saturationGreaterThanOne": {
        "description": "Saturate a value greater than 1.",
        "input": {
          "value": 2
        },
        "expected": 1
      }
    },
    "examples": [
      {
        "description": "Saturate a value within the range.",
        "input": {
          "value": 0.5
        },
        "expected": 0.5
      },
      {
        "description": "Saturate a slightly negative value.",
        "input": {
          "value": -0.1
        },
        "expected": 0
      },
      {
        "description": "Saturate a value slightly greater than 1.",
        "input": {
          "value": 1.1
        },
        "expected": 1
      }
    ]
  },
  {
    "define": "_functions.Math.Sech",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Calculates the hyperbolic secant of an angle (in radians).",
    "parameters": {
      "angle": {
        "type": "_types.Number",
        "description": "The angle in radians to calculate the hyperbolic secant of."
      }
    },
    "implementation": {
      "javascript": {
        "code": "return 1 / Math.cosh($$args.angle);\n"
      }
    },
    "returns": {
      "type": "_types.Number",
      "description": "The hyperbolic secant of the angle."
    },
    "tests": {
      "sechZero": {
        "description": "Calculate the hyperbolic secant of 0 radians.",
        "input": {
          "angle": 0
        },
        "expected": 1
      },
      "sechPiOverTwo": {
        "description": "Calculate the hyperbolic secant of Ï€/2 radians.",
        "input": {
          "angle": 1.5707963267948966
        },
        "expected": 0.3985368153383867
      },
      "sechPi": {
        "description": "Calculate the hyperbolic secant of Ï€ radians.",
        "input": {
          "angle": 3.141592653589793
        },
        "expected": 0.08626673833405443
      }
    },
    "examples": [
      {
        "description": "Calculate the hyperbolic secant of Ï€/4 radians.",
        "input": {
          "angle": 0.7853981633974483
        },
        "expected": 0.886818883970074
      },
      {
        "description": "Calculate the hyperbolic secant of 1 radian.",
        "input": {
          "angle": 1
        },
        "expected": 0.6480542736638853
      },
      {
        "description": "Calculate the hyperbolic secant of 2 radians.",
        "input": {
          "angle": 2
        },
        "expected": 0.2658022288340797
      }
    ]
  },
  {
    "define": "_functions.List.Sequence",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Returns a new sequence by selecting the items starting at the given Start index and ending at the given End index.",
    "parameters": {
      "input": {
        "type": "_types.List",
        "description": "The list to slice."
      },
      "start": {
        "type": "_types.Number",
        "description": "The index of the first item."
      },
      "end": {
        "type": "_types.Number",
        "description": "The index where the range ends, not including the item at this index. Negative index will be calculated from the end of the list."
      }
    },
    "implementation": {
      "javascript": {
        "code": "if ($$args.end < 0) {\n  $$args.end = $$args.input.length + $$args.end;\n}\nreturn $$args.input.slice($$args.start, $$args.end);\n"
      }
    },
    "returns": {
      "type": "_types.List",
      "description": "The new sequence."
    },
    "tests": {
      "sequenceSimple": {
        "description": "Slice the list with start and end indices.",
        "input": {
          "input": ["a", "b", "c", "d"],
          "start": 1,
          "end": 3
        },
        "expected": ["b", "c"]
      },
      "sequenceNegativeEndIndex": {
        "description": "Use a negative end index to slice from the end of the list.",
        "input": {
          "input": ["a", "b", "c", "d"],
          "start": 0,
          "end": -1
        },
        "expected": ["a", "b", "c"]
      }
    },
    "examples": [
      {
        "description": "Slice the entire list.",
        "input": {
          "input": [1, 2, 3, 4, 5],
          "start": 0,
          "end": 5
        },
        "expected": [1, 2, 3, 4, 5]
      },
      {
        "description": "Slice a portion of the list in the middle.",
        "input": {
          "input": [10, 20, 30, 40, 50],
          "start": 1,
          "end": 4
        },
        "expected": [20, 30, 40]
      },
      {
        "description": "Use a negative start index to slice from the end of the list.",
        "input": {
          "input": ["apple", "banana", "cherry", "date"],
          "start": -3,
          "end": -1
        },
        "expected": ["banana", "cherry"]
      }
    ]
  },
  {
    "define": "_functions.Math.SeriesSum",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Calculates the sum of a series using the given formula.",
    "parameters": {
      "numbers": {
        "type": "_types.List",
        "description": "The list of numbers to sum."
      },
      "start": {
        "type": "_types.Number",
        "description": "The starting index of the range to sum (inclusive)."
      },
      "end": {
        "type": "_types.Number",
        "description": "The ending index of the range to sum (exclusive). A negative index is calculated from the end of the list."
      }
    },
    "implementation": {
      "javascript": {
        "code": "let sum = 0;\nfor (let i = $$args.start; i < $$args.end; i++) {\n  sum += $$args.numbers[i];\n}\nreturn sum;\n"
      }
    },
    "returns": {
      "type": "_types.Number",
      "description": "The sum of the series."
    },
    "tests": {
      "seriesSumSimple": {
        "description": "Sum a simple range.",
        "input": {
          "numbers": [1, 2, 3],
          "start": 0,
          "end": 3
        },
        "expected": 6
      },
      "seriesSumNegativeIndex": {
        "description": "Sum a range with a negative index.",
        "input": {
          "numbers": [1, 2, 3],
          "start": 1,
          "end": -1
        },
        "expected": 0
      },
      "seriesSumStartEnd": {
        "description": "Sum a range with non-zero start and end indices.",
        "input": {
          "numbers": [1, 2, 3, 4, 5],
          "start": 2,
          "end": 4
        },
        "expected": 7
      }
    },
    "examples": [
      {
        "description": "Sum an empty list.",
        "input": {
          "numbers": [],
          "start": 0,
          "end": 0
        },
        "expected": 0
      },
      {
        "description": "Sum the entire list.",
        "input": {
          "numbers": [4, 5, 6, 7],
          "start": 0,
          "end": 4
        },
        "expected": 22
      },
      {
        "description": "Sum with the end index equal to the list length.",
        "input": {
          "numbers": [10, 20, 30],
          "start": 0,
          "end": 3
        },
        "expected": 60
      }
    ]
  },
  {
    "define": "_functions.String.SetAlpha",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Sets the first character of a string to a specified uppercase alpha-numeric character.",
    "parameters": {
      "text": {
        "type": "_types.String",
        "description": "The original text."
      },
      "char": {
        "type": "_types.String",
        "description": "The uppercase alpha-numeric character to set as the first character."
      }
    },
    "implementation": {
      "javascript": {
        "code": "return $$args.text.replace(/^.*$/, $$args.char + $$args.text.slice(1));\n"
      }
    },
    "returns": {
      "type": "_types.String",
      "description": "The new text with the first character changed."
    },
    "tests": {
      "setAlphaSimple": {
        "description": "Set the first character to a simple alpha-numeric character.",
        "input": {
          "text": "hello",
          "char": "X"
        },
        "expected": "Xello"
      },
      "setAlphaMultipleCharacters": {
        "description": "Set the first character to a multi-character string.",
        "input": {
          "text": "example",
          "char": "ThisIsA"
        },
        "expected": "ThisIsAxample"
      }
    },
    "examples": [
      {
        "description": "Set the first character with a digit replacement.",
        "input": {
          "text": "world",
          "char": "9"
        },
        "expected": "9orld"
      },
      {
        "description": "Set the first character of a sentence.",
        "input": {
          "text": "something new begins.",
          "char": "A"
        },
        "expected": "Amething new begins."
      },
      {
        "description": "Set the first character with a special character string.",
        "input": {
          "text": "special!",
          "char": "@new"
        },
        "expected": "@newpecial!"
      }
    ]
  },
  {
    "define": "_functions.Any.SetGreen",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Changes the color of a given object to green.",
    "parameters": {
      "input": {
        "type": "_types.Dictionary",
        "description": "The object whose color is changed."
      },
      "newColor": {
        "type": "_types.String",
        "description": "The new color, which in this case is always \"green\"."
      }
    },
    "implementation": {
      "javascript": {
        "code": "if ($$args.input) {\n  $$args.input.color = \"green\";\n  return $$args.input;\n} else {\n  return null;\n}\n"
      }
    },
    "returns": {
      "type": "_types.Dictionary",
      "description": "The object with its color changed to green."
    },
    "tests": {
      "setGreenObject": {
        "description": "Change the color of an existing object.",
        "input": {
          "input": {
            "color": "blue"
          },
          "newColor": ""
        },
        "expected": {
          "color": "green"
        }
      }
    },
    "examples": [
      {
        "description": "Change the color of an object with no initial color property.",
        "input": {
          "input": {},
          "newColor": ""
        },
        "expected": {
          "color": "green"
        }
      },
      {
        "description": "Change the color of an object with a different initial color property.",
        "input": {
          "input": {
            "color": "red"
          },
          "newColor": ""
        },
        "expected": {
          "color": "green"
        }
      },
      {
        "description": "Change the color of an object with multiple properties.",
        "input": {
          "input": {
            "color": "yellow",
            "size": "large"
          },
          "newColor": ""
        },
        "expected": {
          "color": "green",
          "size": "large"
        }
      }
    ]
  },
  {
    "define": "_functions.Math.SetHue",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Sets the hue of a color.",
    "parameters": {
      "value": {
        "type": "_types.Number",
        "description": "The new hue to set."
      }
    },
    "implementation": {
      "javascript": {
        "code": "return $$args.value;\n"
      }
    },
    "returns": {
      "type": "_types.Number",
      "description": "The hue of the color."
    },
    "tests": {
      "setHueZeroToSixty": {
        "description": "Set the hue to 30 degrees.",
        "input": {
          "value": 0.5
        },
        "expected": 0.5
      },
      "setHueSeventyToNinety": {
        "description": "Set the hue to 80 degrees.",
        "input": {
          "value": 0.8
        },
        "expected": 0.8
      }
    },
    "examples": [
      {
        "description": "Set the hue to 40 degrees.",
        "input": {
          "value": 0.4
        },
        "expected": 0.4
      },
      {
        "description": "Set the hue to 60 degrees.",
        "input": {
          "value": 0.6
        },
        "expected": 0.6
      },
      {
        "description": "Set the hue to 90 degrees.",
        "input": {
          "value": 0.9
        },
        "expected": 0.9
      }
    ]
  },
  {
    "define": "_functions.Dictionary.SetItem",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Sets the value of a key in a dictionary.",
    "parameters": {
      "dict": {
        "type": "_types.Dictionary",
        "description": "The dictionary to set the item in."
      },
      "key": {
        "type": "_types.String",
        "description": "The key to set the value for."
      },
      "value": {
        "type": "_types.Any",
        "description": "The new value to set for the key."
      }
    },
    "implementation": {
      "javascript": {
        "code": "$$args.dict[$$args.key] = $$args.value;\nreturn $$args.dict;\n"
      }
    },
    "returns": {
      "type": "_types.Dictionary",
      "description": "The dictionary with the new item set."
    },
    "tests": {
      "setItemSimple": {
        "description": "Set a simple key-value pair.",
        "input": {
          "dict": {},
          "key": "foo",
          "value": 42
        },
        "expected": {
          "foo": 42
        }
      },
      "setItemExistingKey": {
        "description": "Update an existing key's value.",
        "input": {
          "dict": {
            "foo": 1
          },
          "key": "foo",
          "value": 2
        },
        "expected": {
          "foo": 2
        }
      },
      "setItemNewKey": {
        "description": "Set a new key-value pair.",
        "input": {
          "dict": {
            "bar": 1
          },
          "key": "baz",
          "value": 42
        },
        "expected": {
          "baz": 42,
          "bar": 1
        }
      }
    },
    "examples": [
      {
        "description": "Set an item where the key contains spaces.",
        "input": {
          "dict": {},
          "key": "key with spaces",
          "value": "value"
        },
        "expected": {
          "key with spaces": "value"
        }
      },
      {
        "description": "Set an item with a key of special characters.",
        "input": {
          "dict": {},
          "key": "key!@#",
          "value": 123
        },
        "expected": {
          "key!@#": 123
        }
      },
      {
        "description": "Set a nested dictionary item.",
        "input": {
          "dict": {
            "nested": {
              "key": "value"
            }
          },
          "key": "nested",
          "value": {
            "key": "new value"
          }
        },
        "expected": {
          "nested": {
            "key": "new value"
          }
        }
      }
    ]
  },
  {
    "define": "_functions.List.SetItemAt",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Sets the item at the given index in the list.",
    "parameters": {
      "input": {
        "type": "_types.List",
        "description": "The list to modify."
      },
      "index": {
        "type": "_types.Number",
        "description": "The index where the item will be set."
      },
      "value": {
        "type": "_types.Any",
        "description": "The new item to set at the specified index."
      }
    },
    "implementation": {
      "javascript": {
        "code": "const result = $$args.input.slice();  // Create a copy of the input list\nconst adjustedIndex = $$args.index < 0 ? $$args.input.length + $$args.index : $$args.index;\nresult.splice(adjustedIndex, 1, $$args.value);\nreturn result;\n"
      }
    },
    "returns": {
      "type": "_types.List",
      "description": "The modified list with the item set at the specified index."
    },
    "tests": {
      "setItemAtIndexZero": {
        "description": "Set an item at the first index.",
        "input": {
          "input": ["a", "b", "c"],
          "index": 0,
          "value": "d"
        },
        "expected": ["d", "b", "c"]
      },
      "setItemAtMiddle": {
        "description": "Set an item in the middle of a list.",
        "input": {
          "input": ["a", "b", "c", "d", "e"],
          "index": 2,
          "value": "f"
        },
        "expected": ["a", "b", "f", "d", "e"]
      },
      "setItemAtEnd": {
        "description": "Set an item at the end of a list.",
        "input": {
          "input": ["a", "b", "c"],
          "index": -1,
          "value": "d"
        },
        "expected": ["a", "b", "d"]
      },
      "setItemAtNegativeIndex": {
        "description": "Set an item at a negative index.",
        "input": {
          "input": ["a", "b", "c"],
          "index": -2,
          "value": "d"
        },
        "expected": ["a", "d", "c"]
      }
    },
    "examples": [
      {
        "description": "Set an item in an empty list.",
        "input": {
          "input": [],
          "index": 0,
          "value": "a"
        },
        "expected": ["a"]
      },
      {
        "description": "Set an item at a positive index larger than the list length.",
        "input": {
          "input": ["x", "y"],
          "index": 5,
          "value": "z"
        },
        "expected": ["x", "y", "z"]
      },
      {
        "description": "Set an item in a list of numbers.",
        "input": {
          "input": [1, 2, 3, 4],
          "index": 1,
          "value": 5
        },
        "expected": [1, 5, 3, 4]
      }
    ]
  },
  {
    "define": "_functions.Dictionary.SetKey",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Sets the value of a key in a dictionary.",
    "parameters": {
      "input": {
        "type": "_types.Dictionary",
        "description": "The dictionary to set the key and value for."
      },
      "key": {
        "type": "_types.String",
        "description": "The key to set in the dictionary."
      },
      "value": {
        "type": "_types.Any",
        "description": "The value to set for the given key."
      }
    },
    "implementation": {
      "javascript": {
        "code": "$$args.input[$$args.key] = $$args.value;\nreturn $$args.input;\n"
      }
    },
    "returns": {
      "type": "_types.Dictionary",
      "description": "The updated dictionary with the new key-value pair."
    },
    "tests": {
      "setKeySimple": {
        "description": "Set a simple key-value pair.",
        "input": {
          "input": {},
          "key": "name",
          "value": "John"
        },
        "expected": {
          "name": "John"
        }
      },
      "setKeyExisting": {
        "description": "Update an existing key's value.",
        "input": {
          "input": {
            "name": "Jane"
          },
          "key": "name",
          "value": "John"
        },
        "expected": {
          "name": "John"
        }
      },
      "setKeyNonExisting": {
        "description": "Set a new key-value pair that doesn't exist.",
        "input": {
          "input": {},
          "key": "age",
          "value": 30
        },
        "expected": {
          "age": 30
        }
      }
    },
    "examples": [
      {
        "description": "Add a new key-value pair to an existing dictionary.",
        "input": {
          "input": {
            "country": "USA"
          },
          "key": "city",
          "value": "New York"
        },
        "expected": {
          "country": "USA",
          "city": "New York"
        }
      },
      {
        "description": "Replace an existing value with a new one.",
        "input": {
          "input": {
            "role": "User"
          },
          "key": "role",
          "value": "Admin"
        },
        "expected": {
          "role": "Admin"
        }
      },
      {
        "description": "Add multiple key-value pairs in succession.",
        "input": {
          "input": {
            "language": "English"
          },
          "key": "level",
          "value": "Advanced"
        },
        "expected": {
          "language": "English",
          "level": "Advanced"
        }
      }
    ]
  },
  {
    "define": "_functions.Math.SetRed",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Sets the color of an object to red.",
    "parameters": {
      "obj": {
        "type": "_types.Any",
        "description": "The object to set the color for."
      }
    },
    "implementation": {
      "javascript": {
        "code": "if ($$args.obj.style) {\n  $$args.obj.style.color = \"red\";\n} else {\n  $$args.obj.style = { color: \"red\" };\n}\nreturn $$args.obj;\n"
      }
    },
    "returns": {
      "type": "_types.Any",
      "description": "The object with its color set to red."
    },
    "tests": {
      "setRedSimple": {
        "description": "Set the color of a simple object.",
        "input": {
          "obj": {
            "id": 1,
            "text": "hello"
          }
        },
        "expected": {
          "id": 1,
          "text": "hello",
          "style": {
            "color": "red"
          }
        }
      },
      "setRedObjectWithColor": {
        "description": "Set the color of an object that already has a color property.",
        "input": {
          "obj": {
            "id": 1,
            "text": "hello",
            "style": {
              "color": "blue"
            }
          }
        },
        "expected": {
          "id": 1,
          "text": "hello",
          "style": {
            "color": "red"
          }
        }
      }
    },
    "examples": [
      {
        "description": "Set the color of an object with no initial style.",
        "input": {
          "obj": {
            "id": 2,
            "content": "sample"
          }
        },
        "expected": {
          "id": 2,
          "content": "sample",
          "style": {
            "color": "red"
          }
        }
      },
      {
        "description": "Set the color of an object with a different style attribute.",
        "input": {
          "obj": {
            "id": 3,
            "content": "sample",
            "style": {
              "background": "white"
            }
          }
        },
        "expected": {
          "id": 3,
          "content": "sample",
          "style": {
            "background": "white",
            "color": "red"
          }
        }
      },
      {
        "description": "Set the color of an object with no style property.",
        "input": {
          "obj": {
            "id": 4,
            "message": "hi there!"
          }
        },
        "expected": {
          "id": 4,
          "message": "hi there!",
          "style": {
            "color": "red"
          }
        }
      }
    ]
  },
  {
    "define": "_functions.Math.SetSaturation",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Adjusts the color saturation to a given value.",
    "parameters": {
      "hue": {
        "type": "_types.Number",
        "description": "The hue of the color."
      },
      "saturation": {
        "type": "_types.Number",
        "description": "The desired saturation level (0-1)."
      },
      "lightness": {
        "type": "_types.Number",
        "description": "The lightness of the color (0-1)."
      }
    },
    "implementation": {
      "javascript": {
        "code": "function hslToString(h, s, l) {\n  return `hsl(${(h * 360).toFixed(0)}, ${(s * 100).toFixed(0)}%, ${(l * 100).toFixed(0)}%)`;\n}\n\nreturn hslToString($$args.hue, $$args.saturation, 0.5);\n"
      }
    },
    "returns": {
      "type": "_types.String",
      "description": "The new color with adjusted saturation."
    },
    "tests": {
      "setSaturationSimple": {
        "description": "Adjust the saturation to a simple value.",
        "input": {
          "hue": 0.5,
          "saturation": 0.7,
          "lightness": 0.5
        },
        "expected": "hsl(180, 70%, 50%)"
      },
      "setSaturationHigh": {
        "description": "Adjust the saturation to a high value.",
        "input": {
          "hue": 0.25,
          "saturation": 1,
          "lightness": 0.5
        },
        "expected": "hsl(90, 100%, 50%)"
      },
      "setSaturationLow": {
        "description": "Adjust the saturation to a low value.",
        "input": {
          "hue": 0.75,
          "saturation": 0.1,
          "lightness": 0.5
        },
        "expected": "hsl(270, 10%, 50%)"
      }
    },
    "examples": [
      {
        "description": "Adjust saturation to a medium value.",
        "input": {
          "hue": 0.33,
          "saturation": 0.5,
          "lightness": 0.5
        },
        "expected": "hsl(119, 50%, 50%)"
      },
      {
        "description": "Adjust saturation for a dark color.",
        "input": {
          "hue": 0.6,
          "saturation": 0.3,
          "lightness": 0.5
        },
        "expected": "hsl(216, 30%, 50%)"
      },
      {
        "description": "Adjust saturation for a light color.",
        "input": {
          "hue": 0.1,
          "saturation": 0.8,
          "lightness": 0.5
        },
        "expected": "hsl(36, 80%, 50%)"
      }
    ]
  },
  {
    "define": "_functions.Date.SetTimezone",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Sets the timezone for a given date.",
    "parameters": {
      "date": {
        "type": "_types.Date",
        "description": "The date to set the timezone for, in ISO format."
      },
      "timezone": {
        "type": "_types.String",
        "description": "The timezone to set, in the format \"HH:MM\"."
      }
    },
    "implementation": {
      "javascript": {
        "code": "function setTimezone(date, timezone) {\n  let [hours, minutes] = timezone.split(':').map(Number);\n  const dateObj = new Date(date);\n  \n  // Adjust the timezone offset\n  dateObj.setUTCHours(dateObj.getUTCHours() + hours);\n  dateObj.setUTCMinutes(dateObj.getUTCMinutes() + minutes);\n  \n  // Format the date back to ISO string without timezone information\n  return dateObj.toISOString().replace('Z', '');\n}\n\nreturn setTimezone($$args.date, $$args.timezone);\n"
      }
    },
    "returns": {
      "type": "_types.String",
      "description": "The date with the specified timezone."
    },
    "tests": {
      "setTimezoneSimple": {
        "description": "Set a simple timezone.",
        "input": {
          "date": "2022-01-01T00:00:00.000Z",
          "timezone": "05:30"
        },
        "expected": "2022-01-01T05:30:00.000"
      },
      "setTimezoneComplex": {
        "description": "Set a complex timezone with multiple hours and minutes.",
        "input": {
          "date": "2022-01-01T00:00:00.000Z",
          "timezone": "14:45"
        },
        "expected": "2022-01-01T14:45:00.000"
      },
      "setTimezoneNegativeOffset": {
        "description": "Set a timezone with a negative offset.",
        "input": {
          "date": "2022-01-01T00:00:00.000Z",
          "timezone": "-03:00"
        },
        "expected": "2021-12-31T21:00:00.000"
      }
    },
    "examples": [
      {
        "description": "Set a timezone with a half-hour offset.",
        "input": {
          "date": "2022-01-01T00:00:00.000Z",
          "timezone": "00:30"
        },
        "expected": "2022-01-01T00:30:00.000"
      },
      {
        "description": "Set a timezone with a negative half-hour offset.",
        "input": {
          "date": "2022-01-01T00:00:00.000Z",
          "timezone": "-00:30"
        },
        "expected": "2021-12-31T23:30:00.000"
      },
      {
        "description": "Set a timezone with a positive single hour offset.",
        "input": {
          "date": "2022-01-01T00:00:00.000Z",
          "timezone": "01:00"
        },
        "expected": "2022-01-01T01:00:00.000"
      }
    ]
  },
  {
    "define": "_functions.Math.ShiftHue",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Shifts the hue of a color by a given angle.",
    "parameters": {
      "hue": {
        "type": "_types.Number",
        "description": "The initial hue to shift."
      },
      "angle": {
        "type": "_types.Number",
        "description": "The angle in radians to shift the hue by."
      }
    },
    "implementation": {
      "javascript": {
        "code": "function radiansToDegrees(radians) {\n  return radians * (180 / Math.PI);\n}\n\nfunction degreesToRadians(degrees) {\n  return degrees * (Math.PI / 180);\n}\n\nlet hueInDegrees = radiansToDegrees($$args.hue);\nlet angleInDegrees = radiansToDegrees($$args.angle);\n\nlet shiftedHue = (hueInDegrees + angleInDegrees) % 360;\nif (shiftedHue < 0) shiftedHue += 360;\n\nreturn degreesToRadians(shiftedHue);\n"
      }
    },
    "returns": {
      "type": "_types.Number",
      "description": "The shifted hue."
    },
    "tests": {
      "shiftHueZero": {
        "description": "Shift the hue by 0 radians.",
        "input": {
          "hue": 0,
          "angle": 0
        },
        "expected": 0
      },
      "shiftHuePiOverTwo": {
        "description": "Shift the hue by Ï€/2 radians.",
        "input": {
          "hue": 1.5707963267948966,
          "angle": 1.5707963267948966
        },
        "expected": 3.141592653589793
      },
      "shiftHueMultipleAngles": {
        "description": "Shift the hue by multiple angles.",
        "input": {
          "hue": 0.5,
          "angle": 2.0943951023931953
        },
        "expected": 2.594395102393195
      }
    },
    "examples": [
      {
        "description": "Shift hue by a small positive angle.",
        "input": {
          "hue": 0.1,
          "angle": 0.2
        },
        "expected": 0.3
      },
      {
        "description": "Shift hue by a large positive angle.",
        "input": {
          "hue": 0.2,
          "angle": 7
        },
        "expected": 0.08084967300941935
      },
      {
        "description": "Shift hue into negative range and wrap around.",
        "input": {
          "hue": 6,
          "angle": -7.2
        },
        "expected": 5.083185307179586
      }
    ]
  },
  {
    "define": "_functions.Math.Shuffle",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Randomly shuffles the elements of a list.",
    "parameters": {
      "input": {
        "type": "_types.List",
        "description": "The list to shuffle."
      }
    },
    "implementation": {
      "javascript": {
        "code": "const shuffled = $$args.input.slice();\nfor (let i = shuffled.length - 1; i > 0; i--) {\n  const j = Math.floor(Math.random() * (i + 1));\n  [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];\n}\nreturn shuffled;\n"
      }
    },
    "returns": {
      "type": "_types.List",
      "description": "The shuffled list."
    },
    "tests": {
      "shuffleEmptyList": {
        "description": "Shuffle an empty list.",
        "input": {
          "input": []
        },
        "expected": []
      },
      "shuffleSingleElementList": {
        "description": "Shuffle a list with a single element.",
        "input": {
          "input": ["a"]
        },
        "expected": ["a"]
      }
    },
    "examples": [
      {
        "description": "Shuffle a list of numbers.",
        "input": {
          "input": [1, 2, 3, 4, 5]
        },
        "expected": [1, 2, 3, 4, 5]
      },
      {
        "description": "Shuffle a list of strings with multiple characters.",
        "input": {
          "input": ["cat", "dog", "fish", "bird"]
        },
        "expected": ["cat", "dog", "fish", "bird"]
      },
      {
        "description": "Shuffle a list of boolean values.",
        "input": {
          "input": [true, false, true]
        },
        "expected": [true, false, true]
      }
    ]
  },
  {
    "define": "_functions.Math.Sin",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Calculates the sine of an angle (in radians).",
    "parameters": {
      "angle": {
        "type": "_types.Number",
        "description": "The angle in radians to calculate the sine of."
      }
    },
    "implementation": {
      "javascript": {
        "code": "return Math.sin($$args.angle);\n"
      }
    },
    "returns": {
      "type": "_types.Number",
      "description": "The sine of the angle."
    },
    "tests": {
      "sinZero": {
        "description": "Calculate the sine of 0 radians.",
        "input": {
          "angle": 0
        },
        "expected": 0
      },
      "sinPiOverTwo": {
        "description": "Calculate the sine of Ï€/2 radians.",
        "input": {
          "angle": 1.5707963267948966
        },
        "expected": 1
      },
      "sinPi": {
        "description": "Calculate the sine of Ï€ radians.",
        "input": {
          "angle": 3.141592653589793
        },
        "expected": 1.2246467991473532e-16
      }
    },
    "examples": [
      {
        "description": "Calculate the sine of Ï€/6 radians.",
        "input": {
          "angle": 0.5235987755982988
        },
        "expected": 0.5
      },
      {
        "description": "Calculate the sine of Ï€/4 radians.",
        "input": {
          "angle": 0.7853981633974483
        },
        "expected": 0.7071067811865476
      },
      {
        "description": "Calculate the sine of Ï€/3 radians.",
        "input": {
          "angle": 1.0471975511965976
        },
        "expected": 0.8660254037844386
      }
    ]
  },
  {
    "define": "_functions.String.Skew",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Skews each character in the input text to its corresponding ASCII value, wrapping around at 128.",
    "parameters": {
      "text": {
        "type": "_types.String",
        "description": "The input text to skew."
      }
    },
    "implementation": {
      "javascript": {
        "code": "return $$args.text.split('').map(char => String.fromCharCode((char.charCodeAt(0) + 1) % 128)).join('');\n"
      }
    },
    "returns": {
      "type": "_types.String",
      "description": "The skewed text."
    },
    "tests": {
      "skewSimple": {
        "description": "Skew a simple input text.",
        "input": {
          "text": "hello"
        },
        "expected": "ifmmp"
      },
      "skewWrapAround": {
        "description": "Skew where ASCII values wrap around.",
        "input": {
          "text": "xyz"
        },
        "expected": "yz{"
      },
      "skewEmptyInput": {
        "description": "Skew an empty input text.",
        "input": {
          "text": ""
        },
        "expected": ""
      }
    },
    "examples": [
      {
        "description": "Skew a text with punctuation marks.",
        "input": {
          "text": "hello!"
        },
        "expected": "ifmmp\""
      },
      {
        "description": "Skew a text with both uppercase and lowercase characters.",
        "input": {
          "text": "HelloWorld"
        },
        "expected": "IfmmpXpsme"
      },
      {
        "description": "Skew a text that contains numbers.",
        "input": {
          "text": "12345"
        },
        "expected": "23456"
      }
    ]
  },
  {
    "define": "_functions.Number.SkewP",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Returns the skewness of a list of numbers.",
    "parameters": {
      "numbers": {
        "type": "_types.List",
        "description": "The list of numbers to calculate the skewness for."
      }
    },
    "implementation": {
      "javascript": {
        "code": "const sum = $$args.numbers.reduce((acc, num) => acc + num, 0);\nconst mean = sum / $$args.numbers.length;\n\nconst variance = $$args.numbers.reduce((acc, num) => acc + Math.pow(num - mean, 2), 0) / $$args.numbers.length;\nconst stdDev = Math.sqrt(variance);\n\nconst skewness = $$args.numbers.reduce((acc, num) => acc + Math.pow((num - mean) / stdDev, 3), 0) / $$args.numbers.length;\nreturn skewness;\n"
      }
    },
    "returns": {
      "type": "_types.Number",
      "description": "The skewness of the list of numbers."
    },
    "tests": {
      "skewnessPositive": {
        "description": "Calculate the skewness of a list with a positive skew.",
        "input": {
          "numbers": [1, 2, 3, 4, 5]
        },
        "expected": 0
      },
      "skewnessNegative": {
        "description": "Calculate the skewness of a list with a negative skew.",
        "input": {
          "numbers": [5, 4, 3, 2, 1]
        },
        "expected": 0
      },
      "skewnessZero": {
        "description": "Calculate the skewness of a list with zero skew.",
        "input": {
          "numbers": [1, 2, 3, 2, 1]
        },
        "expected": 0.3436215967445452
      }
    },
    "examples": [
      {
        "description": "Calculate the skewness of a uniform list.",
        "input": {
          "numbers": [2, 2, 2, 2, 2]
        },
        "expected": 0
      },
      {
        "description": "Calculate the skewness of an exponentially increasing list.",
        "input": {
          "numbers": [1, 2, 4, 8, 16]
        },
        "expected": 1.244930643614082
      },
      {
        "description": "Calculate the skewness of a list with a single outlier.",
        "input": {
          "numbers": [10, 12, 12, 12, 100]
        },
        "expected": 1.6018004862425814
      }
    ]
  },
  {
    "define": "_functions.String.Slice",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Extracts a portion of a list or string.",
    "parameters": {
      "input": {
        "type": "_types.String",
        "description": "The string to slice."
      },
      "start": {
        "type": "_types.Number",
        "description": "The start index for slicing."
      },
      "end": {
        "type": "_types.Number",
        "description": "The end index for slicing."
      }
    },
    "implementation": {
      "javascript": {
        "code": "if (Array.isArray($$args.input)) {\n  return $$args.input.slice($$args.start, $$args.end);\n} else if (typeof $$args.input === 'string') {\n  return $$args.input.substring($$args.start, $$args.end);\n} else {\n  throw new Error('Unsupported type');\n}\n"
      }
    },
    "returns": {
      "type": "_types.Union",
      "description": "The sliced portion of the list or string.",
      "options": [
        {
          "type": "_types.List",
          "items": {
            "type": "_types.Unknown"
          }
        },
        {
          "type": "_types.String"
        }
      ]
    },
    "tests": {
      "sliceString": {
        "description": "Slice a portion of a string.",
        "input": {
          "input": "hello world",
          "start": 0,
          "end": 5
        },
        "expected": "hello"
      },
      "sliceList": {
        "description": "Slice a portion of a list.",
        "input": {
          "input": [1, 2, 3, 4, 5],
          "start": 1,
          "end": 3
        },
        "expected": [2, 3]
      },
      "sliceStringEnd": {
        "description": "Slice a portion of a string from the middle to the end.",
        "input": {
          "input": "hello world",
          "start": 6,
          "end": 11
        },
        "expected": "world"
      },
      "sliceListEnd": {
        "description": "Slice a portion of a list from the middle to the end.",
        "input": {
          "input": [1, 2, 3, 4, 5],
          "start": 2,
          "end": 5
        },
        "expected": [3, 4, 5]
      }
    },
    "examples": [
      {
        "description": "Slice a portion of a string from the middle to an index.",
        "input": {
          "input": "abcdef",
          "start": 2,
          "end": 4
        },
        "expected": "cd"
      },
      {
        "description": "Slice a portion of a list from the start to an index.",
        "input": {
          "input": [10, 20, 30, 40],
          "start": 0,
          "end": 2
        },
        "expected": [10, 20]
      },
      {
        "description": "Slice the entire portion of a list.",
        "input": {
          "input": [100, 200, 300],
          "start": 0,
          "end": 3
        },
        "expected": [100, 200, 300]
      }
    ]
  },
  {
    "define": "_functions.String.SnakeCase",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Converts a string to snake_case.",
    "parameters": {
      "string": {
        "type": "_types.String",
        "description": "The string to convert to snake_case."
      }
    },
    "implementation": {
      "javascript": {
        "code": "return $$args.string\n  .replace(/\\s+/g, '_')\n  .replace(/[A-Z]/g, letter => `_${letter.toLowerCase()}`)\n  .replace(/^_/, '')\n  .toLowerCase();\n"
      }
    },
    "returns": {
      "type": "_types.String",
      "description": "The snake_cased string."
    },
    "tests": {
      "snakeCaseSingleWord": {
        "description": "Convert a single word to snake_case.",
        "input": {
          "string": "hello"
        },
        "expected": "hello"
      },
      "snakeCaseMultipleWords": {
        "description": "Convert multiple words to snake_case.",
        "input": {
          "string": "hello world"
        },
        "expected": "hello_world"
      },
      "snakeCaseCamelCase": {
        "description": "Convert a camelCase string to snake_case.",
        "input": {
          "string": "helloWorldTest"
        },
        "expected": "hello_world_test"
      }
    },
    "examples": [
      {
        "description": "Convert a kebab-case string to snake_case.",
        "input": {
          "string": "hello-world-test"
        },
        "expected": "hello_world_test"
      },
      {
        "description": "Convert a PascalCase string to snake_case.",
        "input": {
          "string": "HelloWorldTest"
        },
        "expected": "hello_world_test"
      },
      {
        "description": "Convert a string with mixed separators and casings to snake_case.",
        "input": {
          "string": "hello-World_Test"
        },
        "expected": "hello_world_test"
      }
    ]
  },
  {
    "define": "_functions.Math.Sort",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Sorts a list of items in ascending order.",
    "parameters": {
      "input": {
        "type": "_types.List",
        "description": "The list to sort."
      }
    },
    "implementation": {
      "javascript": {
        "code": "return $$args.input.slice().sort((a, b) => {\n  if (typeof a === 'number' && typeof b === 'number') {\n    return a - b;\n  }\n  return a.toString().localeCompare(b.toString());\n});\n"
      }
    },
    "returns": {
      "type": "_types.List",
      "description": "The sorted list."
    },
    "tests": {
      "sortNumbers": {
        "description": "Sort a list of numbers.",
        "input": {
          "input": [3, 1, 2]
        },
        "expected": [1, 2, 3]
      },
      "sortStrings": {
        "description": "Sort a list of strings.",
        "input": {
          "input": ["c", "b", "a"]
        },
        "expected": ["a", "b", "c"]
      },
      "sortMixed": {
        "description": "Sort a list with mixed types.",
        "input": {
          "input": [3, "2", "a", 1]
        },
        "expected": [1, "2", 3, "a"]
      },
      "sortEmptyList": {
        "description": "Sort an empty list.",
        "input": {
          "input": []
        },
        "expected": []
      },
      "sortSingleElementList": {
        "description": "Sort a list with a single element.",
        "input": {
          "input": [5]
        },
        "expected": [5]
      }
    },
    "examples": [
      {
        "description": "Sort a list of negative and positive numbers.",
        "input": {
          "input": [10, -1, 3, -20, 5]
        },
        "expected": [-20, -1, 3, 5, 10]
      },
      {
        "description": "Sort a list of words with different lengths.",
        "input": {
          "input": ["apple", "banana", "cherry", "date"]
        },
        "expected": ["apple", "banana", "cherry", "date"]
      },
      {
        "description": "Sort a list of booleans.",
        "input": {
          "input": [true, false, true, false]
        },
        "expected": [false, false, true, true]
      }
    ]
  },
  {
    "define": "_functions.List.SortByKey",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Sorts a list of key-value pairs by their keys.",
    "parameters": {
      "input": {
        "type": "_types.List",
        "description": "The list to sort."
      },
      "order": {
        "type": "_types.String",
        "description": "The order in which to sort the list. Can be either \"asc\" or \"desc\"."
      }
    },
    "implementation": {
      "javascript": {
        "code": "const order = $$args.order.toLowerCase();\nif (order === \"asc\") {\n  return $$args.input.slice().sort((a, b) => a[0].localeCompare(b[0]));\n} else if (order === \"desc\") {\n  return $$args.input.slice().sort((a, b) => b[0].localeCompare(a[0]));\n} else {\n  throw new Error('Invalid sort order');\n}\n"
      }
    },
    "returns": {
      "type": "_types.List",
      "description": "The sorted list of key-value pairs."
    },
    "tests": {
      "sortByKeyAsc": {
        "description": "Sort a list in ascending order.",
        "input": {
          "input": [
            ["c", 3],
            ["a", 1],
            ["b", 2]
          ],
          "order": "asc"
        },
        "expected": [
          ["a", 1],
          ["b", 2],
          ["c", 3]
        ]
      },
      "sortByKeyDesc": {
        "description": "Sort a list in descending order.",
        "input": {
          "input": [
            ["c", 3],
            ["a", 1],
            ["b", 2]
          ],
          "order": "desc"
        },
        "expected": [
          ["c", 3],
          ["b", 2],
          ["a", 1]
        ]
      },
      "sortByKeyEmptyList": {
        "description": "Sort an empty list.",
        "input": {
          "input": [],
          "order": "asc"
        },
        "expected": []
      }
    },
    "examples": [
      {
        "description": "Sort a list of single characters in ascending order.",
        "input": {
          "input": [
            ["z", 26],
            ["y", 25],
            ["x", 24]
          ],
          "order": "asc"
        },
        "expected": [
          ["x", 24],
          ["y", 25],
          ["z", 26]
        ]
      },
      {
        "description": "Sort a list of single characters in descending order.",
        "input": {
          "input": [
            ["x", 24],
            ["y", 25],
            ["z", 26]
          ],
          "order": "desc"
        },
        "expected": [
          ["z", 26],
          ["y", 25],
          ["x", 24]
        ]
      },
      {
        "description": "Sort a list with mixed-case characters in ascending order.",
        "input": {
          "input": [
            ["B", 2],
            ["a", 1],
            ["C", 3]
          ],
          "order": "asc"
        },
        "expected": [
          ["B", 2],
          ["C", 3],
          ["a", 1]
        ]
      }
    ]
  },
  {
    "define": "_functions.List.SortByKeyCaseSensitive",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Sorts a list of key-value pairs based on the keys in a case-sensitive manner.",
    "parameters": {
      "input": {
        "type": "_types.List",
        "description": "The list of key-value pairs to sort."
      },
      "order": {
        "type": "_types.String",
        "description": "The order to sort the list. Can be either \"asc\" or \"desc\"."
      }
    },
    "implementation": {
      "javascript": {
        "code": "const sorted = $$args.input.slice();\nif ($$args.order === \"asc\") {\n  return sorted.sort((a, b) => a[0].localeCompare(b[0]));\n} else {\n  return sorted.sort((a, b) => b[0].localeCompare(a[0]));\n}\n"
      }
    },
    "returns": {
      "type": "_types.List",
      "description": "The sorted list of key-value pairs."
    },
    "tests": {
      "sortByKeyCaseSensitiveAsc": {
        "description": "Sort a list in ascending order.",
        "input": {
          "input": [
            ["c", "value1"],
            ["a", "value2"],
            ["b", "value3"]
          ],
          "order": "asc"
        },
        "expected": [
          ["a", "value2"],
          ["b", "value3"],
          ["c", "value1"]
        ]
      },
      "sortByKeyCaseSensitiveDesc": {
        "description": "Sort a list in descending order.",
        "input": {
          "input": [
            ["c", "value1"],
            ["a", "value2"],
            ["b", "value3"]
          ],
          "order": "desc"
        },
        "expected": [
          ["c", "value1"],
          ["b", "value3"],
          ["a", "value2"]
        ]
      },
      "sortByKeyCaseSensitiveMixedCase": {
        "description": "Sort a list with mixed case keys.",
        "input": {
          "input": [
            ["c", "value1"],
            ["A", "value2"],
            ["b", "value3"]
          ],
          "order": "asc"
        },
        "expected": [
          ["A", "value2"],
          ["b", "value3"],
          ["c", "value1"]
        ]
      }
    },
    "examples": [
      {
        "description": "Sort a list in ascending order with numbers in the keys.",
        "input": {
          "input": [
            ["2", "value1"],
            ["10", "value2"],
            ["1", "value3"]
          ],
          "order": "asc"
        },
        "expected": [
          ["1", "value3"],
          ["2", "value1"],
          ["10", "value2"]
        ]
      },
      {
        "description": "Sort a list in descending order with special characters in the keys.",
        "input": {
          "input": [
            ["apple", "value1"],
            ["#banana", "value2"],
            ["!citrus", "value3"]
          ],
          "order": "desc"
        },
        "expected": [
          ["apple", "value1"],
          ["#banana", "value2"],
          ["!citrus", "value3"]
        ]
      },
      {
        "description": "Sort a list in ascending order with identical keys.",
        "input": {
          "input": [
            ["key", "value1"],
            ["key", "value2"],
            ["key", "value3"]
          ],
          "order": "asc"
        },
        "expected": [
          ["key", "value1"],
          ["key", "value2"],
          ["key", "value3"]
        ]
      }
    ]
  },
  {
    "define": "_functions.List.SortCaseSensitive",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Sorts a list of strings in a case-sensitive manner.",
    "parameters": {
      "input": {
        "type": "_types.List",
        "description": "The list to sort."
      },
      "order": {
        "type": "_types.String",
        "description": "The sorting order, either \"asc\" for ascending or \"desc\" for descending."
      }
    },
    "implementation": {
      "javascript": {
        "code": "const sorted = $$args.input.slice();\nif ($$args.order === 'asc') {\n  return sorted.sort((a, b) => a.localeCompare(b));\n} else if ($$args.order === 'desc') {\n  return sorted.sort((a, b) => b.localeCompare(a));\n} else {\n  throw new Error('Invalid order. Must be either \"asc\" or \"desc\".');\n}\n"
      }
    },
    "returns": {
      "type": "_types.List",
      "description": "The sorted list."
    },
    "tests": {
      "sortCaseSensitiveAsc": {
        "description": "Sort a list of strings in ascending case-sensitive manner.",
        "input": {
          "input": ["hello", "world", "abc", "def"],
          "order": "asc"
        },
        "expected": ["abc", "def", "hello", "world"]
      },
      "sortCaseSensitiveDesc": {
        "description": "Sort a list of strings in descending case-sensitive manner.",
        "input": {
          "input": ["hello", "world", "abc", "def"],
          "order": "desc"
        },
        "expected": ["world", "hello", "def", "abc"]
      },
      "sortCaseSensitiveMixed": {
        "description": "Sort a list of strings with mixed case in ascending order.",
        "input": {
          "input": ["hello", "World", "abc", "Def"],
          "order": "asc"
        },
        "expected": ["abc", "Def", "hello", "World"]
      },
      "sortCaseSensitiveEmpty": {
        "description": "Sort an empty list.",
        "input": {
          "input": [],
          "order": "asc"
        },
        "expected": []
      },
      "sortCaseSensitiveSingle": {
        "description": "Sort a list with a single element.",
        "input": {
          "input": ["hello"],
          "order": "asc"
        },
        "expected": ["hello"]
      }
    },
    "examples": [
      {
        "description": "Sort a list of single-letter strings in ascending order.",
        "input": {
          "input": ["a", "C", "b"],
          "order": "asc"
        },
        "expected": ["C", "a", "b"]
      },
      {
        "description": "Sort a list of strings with numbers in descending order.",
        "input": {
          "input": ["1", "22", "3"],
          "order": "desc"
        },
        "expected": ["3", "22", "1"]
      },
      {
        "description": "Sort a list of strings with special characters in ascending order.",
        "input": {
          "input": ["$", "&", "@", "*"],
          "order": "asc"
        },
        "expected": ["$", "&", "*", "@"]
      }
    ]
  },
  {
    "define": "_functions.List.Splice",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Inserts the given items at the specified position and/or removes the given number of elements from that position.",
    "parameters": {
      "input": {
        "type": "_types.List",
        "description": "The list to be modified."
      },
      "start": {
        "type": "_types.Number",
        "description": "Index where the operation starts."
      },
      "removalCount": {
        "type": "_types.Number",
        "description": "The number of items to remove from the specified position."
      },
      "newItems": {
        "type": "_types.List",
        "description": "The items to insert at the specified position."
      }
    },
    "implementation": {
      "javascript": {
        "code": "const result = $$args.input.slice();\nif ($$args.removalCount !== undefined) {\n  result.splice($$args.start, $$args.removalCount);\n}\nif ($$args.newItems && $$args.newItems.length > 0) {\n  result.splice($$args.start, 0, ...$$args.newItems);\n}\nreturn result;\n"
      }
    },
    "returns": {
      "type": "_types.List",
      "description": "The modified list."
    },
    "tests": {
      "spliceInsert": {
        "description": "Insert items at the specified position.",
        "input": {
          "input": ["a", "b", "c"],
          "start": 2,
          "newItems": ["d", "e"]
        },
        "expected": ["a", "b", "d", "e", "c"]
      },
      "spliceRemove": {
        "description": "Remove the given number of items from the specified position.",
        "input": {
          "input": ["a", "b", "c", "d"],
          "start": 1,
          "removalCount": 2
        },
        "expected": ["a", "d"]
      },
      "spliceInsertAndRemove": {
        "description": "Insert and remove items at the specified position.",
        "input": {
          "input": ["a", "b", "c", "d"],
          "start": 1,
          "removalCount": 1,
          "newItems": ["e", "f"]
        },
        "expected": ["a", "e", "f", "c", "d"]
      },
      "spliceInsertAtStart": {
        "description": "Insert items at the start of the list.",
        "input": {
          "input": ["x", "y", "z"],
          "start": 0,
          "newItems": ["a", "b"]
        },
        "expected": ["a", "b", "x", "y", "z"]
      },
      "spliceRemoveFromEnd": {
        "description": "Remove items from the end of the list.",
        "input": {
          "input": ["x", "y", "z"],
          "start": 1,
          "removalCount": 2
        },
        "expected": ["x"]
      },
      "spliceInsertWithNegativeStart": {
        "description": "Insert items at a negative index position.",
        "input": {
          "input": ["x", "y", "z"],
          "start": -1,
          "newItems": ["a", "b"]
        },
        "expected": ["x", "y", "a", "b", "z"]
      }
    },
    "examples": [
      {
        "description": "Insert items at the end of the list.",
        "input": {
          "input": ["m", "n"],
          "start": 2,
          "newItems": ["o", "p"]
        },
        "expected": ["m", "n", "o", "p"]
      },
      {
        "description": "Remove all items starting from index 0.",
        "input": {
          "input": ["a", "b", "c", "d"],
          "start": 0,
          "removalCount": 4
        },
        "expected": []
      },
      {
        "description": "Insert items without removing any.",
        "input": {
          "input": ["1", "2", "3"],
          "start": 1,
          "newItems": ["4", "5"]
        },
        "expected": ["1", "4", "5", "2", "3"]
      }
    ]
  },
  {
    "define": "_functions.String.Split",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Splits a string into an array of substrings using a specified separator",
    "parameters": {
      "string": {
        "type": "_types.String",
        "description": "The string to split"
      },
      "separator": {
        "type": "_types.String",
        "description": "The separator to split the string with"
      }
    },
    "implementation": {
      "javascript": {
        "code": "return $$args.string.split($$args.separator);\n"
      }
    },
    "returns": {
      "type": "_types.List",
      "description": "The array of substrings"
    },
    "tests": {
      "noSeparator": {
        "description": "Test with no separator",
        "input": {
          "string": "hello",
          "separator": " "
        },
        "expected": ["hello"]
      },
      "oneSeparator": {
        "description": "Test with one separator",
        "input": {
          "string": "hello world",
          "separator": " "
        },
        "expected": ["hello", "world"]
      },
      "multipleSeparators": {
        "description": "Test with multiple separators",
        "input": {
          "string": "hello world world",
          "separator": " "
        },
        "expected": ["hello", "world", "world"]
      }
    },
    "examples": [
      {
        "description": "Split string with comma separator.",
        "input": {
          "string": "apple,banana,cherry",
          "separator": ","
        },
        "expected": ["apple", "banana", "cherry"]
      },
      {
        "description": "Split string with hyphen separator.",
        "input": {
          "string": "high-speed-internet",
          "separator": "-"
        },
        "expected": ["high", "speed", "internet"]
      },
      {
        "description": "Split string with multiple character separator.",
        "input": {
          "string": "one<>two<>three",
          "separator": "<>"
        },
        "expected": ["one", "two", "three"]
      }
    ]
  },
  {
    "define": "_functions.Math.Sqrt",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Returns the square root of a number.",
    "parameters": {
      "value": {
        "type": "_types.Number",
        "description": "The number to calculate the square root of."
      }
    },
    "implementation": {
      "javascript": {
        "code": "return Math.sqrt($$args.value);\n"
      }
    },
    "returns": {
      "type": "_types.Number",
      "description": "The square root of the input value."
    },
    "tests": {
      "sqrtOne": {
        "description": "Calculate the square root of 1.",
        "input": {
          "value": 1
        },
        "expected": 1
      },
      "sqrtFour": {
        "description": "Calculate the square root of 4.",
        "input": {
          "value": 4
        },
        "expected": 2
      },
      "sqrtNine": {
        "description": "Calculate the square root of 9.",
        "input": {
          "value": 9
        },
        "expected": 3
      }
    },
    "examples": [
      {
        "description": "Calculate the square root of 16.",
        "input": {
          "value": 16
        },
        "expected": 4
      },
      {
        "description": "Calculate the square root of 0.",
        "input": {
          "value": 0
        },
        "expected": 0
      },
      {
        "description": "Calculate the square root of 25.",
        "input": {
          "value": 25
        },
        "expected": 5
      }
    ]
  },
  {
    "define": "_functions.Math.SqrtPi",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Returns the square root of pi.",
    "parameters": {
      "none": {
        "type": "_types.None",
        "description": "No parameters required."
      }
    },
    "implementation": {
      "javascript": {
        "code": "return Math.sqrt(Math.PI);\n"
      }
    },
    "returns": {
      "type": "_types.Number",
      "description": "The square root of pi."
    },
    "tests": {
      "sqrtPi": {
        "description": "Test the square root of pi.",
        "expected": 1.7724538509055159
      }
    },
    "examples": [
      {
        "description": "Calculate the square root of pi for usage in a geometry problem.",
        "input": {},
        "expected": 1.7724538509055159
      },
      {
        "description": "Demonstrate the square root of pi for educational purposes.",
        "input": {},
        "expected": 1.7724538509055159
      },
      {
        "description": "Verify the square root of pi gives a consistent result.",
        "input": {},
        "expected": 1.7724538509055159
      }
    ]
  },
  {
    "define": "_functions.Math.SquareRoot",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Calculate the square root of a number.",
    "parameters": {
      "number": {
        "type": "_types.Number",
        "description": "The number to calculate the square root of."
      }
    },
    "implementation": {
      "javascript": {
        "code": "return Math.sqrt($$args.number);\n"
      }
    },
    "returns": {
      "type": "_types.Number",
      "description": "The square root of the number."
    },
    "tests": {
      "squareRoot": {
        "description": "Calculate the square root of a number.",
        "input": {
          "number": 9
        },
        "expected": 3
      }
    },
    "examples": [
      {
        "description": "Calculate the square root of 16.",
        "input": {
          "number": 16
        },
        "expected": 4
      },
      {
        "description": "Calculate the square root of 0.",
        "input": {
          "number": 0
        },
        "expected": 0
      },
      {
        "description": "Calculate the square root of 2.25.",
        "input": {
          "number": 2.25
        },
        "expected": 1.5
      }
    ]
  },
  {
    "define": "_functions.List.Standardize",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Standardizes a list by removing duplicates and preserving order.",
    "parameters": {
      "input": {
        "type": "_types.List",
        "description": "The list to be standardized."
      }
    },
    "implementation": {
      "javascript": {
        "code": "return Array.from(new Set($$args.input));\n"
      }
    },
    "returns": {
      "type": "_types.List",
      "description": "The standardized list without duplicates."
    },
    "tests": {
      "standardizeSimple": {
        "description": "Standardize a simple list with duplicates.",
        "input": {
          "input": ["a", "b", "a", "c", "b"]
        },
        "expected": ["a", "b", "c"]
      },
      "standardizeNoDuplicates": {
        "description": "Standardize a list with no duplicates.",
        "input": {
          "input": ["x", "y", "z"]
        },
        "expected": ["x", "y", "z"]
      },
      "standardizeEmptyList": {
        "description": "Standardize an empty list.",
        "input": {
          "input": []
        },
        "expected": []
      },
      "standardizeAllDuplicates": {
        "description": "Standardize a list with all duplicates.",
        "input": {
          "input": ["a", "a", "a", "a"]
        },
        "expected": ["a"]
      }
    },
    "examples": [
      {
        "description": "Standardize a list with mixed types.",
        "input": {
          "input": [1, "1", 1, "a", "A", "a"]
        },
        "expected": [1, "1", "a", "A"]
      },
      {
        "description": "Standardize a list with numbers and strings.",
        "input": {
          "input": [1, 2, "1", "2", 1, 2]
        },
        "expected": [1, 2, "1", "2"]
      },
      {
        "description": "Standardize a list with complex objects.",
        "input": {
          "input": [
            {
              "a": 1
            },
            {
              "a": 1
            },
            {
              "a": 2
            }
          ]
        },
        "expected": [
          {
            "a": 1
          },
          {
            "a": 2
          }
        ]
      }
    ]
  },
  {
    "define": "_functions.String.StartsWith",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Checks if a string starts with a specified substring.",
    "parameters": {
      "string": {
        "type": "_types.String",
        "description": "The string to check."
      },
      "substring": {
        "type": "_types.String",
        "description": "The substring to look for at the start of the string."
      }
    },
    "implementation": {
      "javascript": {
        "code": "return $$args.string.startsWith($$args.substring);\n"
      }
    },
    "returns": {
      "type": "_types.Boolean",
      "description": "True if the string starts with the specified substring, otherwise false."
    },
    "tests": {
      "startsWithTrue": {
        "description": "String starts with the specified substring.",
        "input": {
          "string": "hello world",
          "substring": "hello"
        },
        "expected": true
      },
      "startsWithFalse": {
        "description": "String does not start with the specified substring.",
        "input": {
          "string": "hello world",
          "substring": "world"
        },
        "expected": false
      },
      "startsWithEmptySubstring": {
        "description": "Check when substring is empty.",
        "input": {
          "string": "hello world",
          "substring": ""
        },
        "expected": true
      }
    },
    "examples": [
      {
        "description": "Check if string starts with a capital letter.",
        "input": {
          "string": "Hello World",
          "substring": "Hello"
        },
        "expected": true
      },
      {
        "description": "Check if string starts with a special character.",
        "input": {
          "string": "!exclamation",
          "substring": "!"
        },
        "expected": true
      },
      {
        "description": "Check if string starts with whitespace.",
        "input": {
          "string": " leading spaces",
          "substring": " "
        },
        "expected": true
      }
    ]
  },
  {
    "define": "_functions.String.StripHTMLTags",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Removes HTML tags from a given text.",
    "parameters": {
      "text": {
        "type": "_types.String",
        "description": "The text to strip of HTML tags."
      }
    },
    "implementation": {
      "javascript": {
        "code": "const cleanedText = $$args.text.replace(/<[^>]*>/g, '');\nreturn cleanedText;\n"
      }
    },
    "returns": {
      "type": "_types.String",
      "description": "The text with HTML tags removed."
    },
    "tests": {
      "stripHtmlTagsSimple": {
        "description": "Remove a single HTML tag.",
        "input": {
          "text": "<p>Hello</p>"
        },
        "expected": "Hello"
      },
      "stripHtmlTagsMultiple": {
        "description": "Remove multiple HTML tags.",
        "input": {
          "text": "<p>Hello <span>World!</span></p>"
        },
        "expected": "Hello World!"
      },
      "stripHtmlTagsNoMatch": {
        "description": "Attempt to remove when no match is found.",
        "input": {
          "text": "hello world"
        },
        "expected": "hello world"
      }
    },
    "examples": [
      {
        "description": "Remove HTML tags from a text with nested tags.",
        "input": {
          "text": "<div><p>Nested <em>tags</em> inside.</p></div>"
        },
        "expected": "Nested tags inside."
      },
      {
        "description": "Remove HTML tags from a text with attributes.",
        "input": {
          "text": "<a href=\"url\">Link</a>"
        },
        "expected": "Link"
      },
      {
        "description": "Remove HTML tags from a self-closing tag.",
        "input": {
          "text": "An image: <img src=\"image.jpg\"/>"
        },
        "expected": "An image: "
      }
    ]
  },
  {
    "define": "_functions.String.Substring",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Returns a subset of characters in the original string, starting from the specified Start index and extending to the specified End index.",
    "parameters": {
      "text": {
        "type": "_types.String",
        "description": "The original string."
      },
      "start": {
        "type": "_types.Number",
        "description": "The index at which to start the substring."
      },
      "end": {
        "type": "_types.Number",
        "description": "The index up to which the substring extends, not including the character at this index."
      }
    },
    "implementation": {
      "javascript": {
        "code": "return $$args.text.substring($$args.start, $$args.end);\n"
      }
    },
    "returns": {
      "type": "_types.String",
      "description": "The subset of characters in the original string."
    },
    "tests": {
      "substringSimple": {
        "description": "Return a simple substring.",
        "input": {
          "text": "hello world",
          "start": 6,
          "end": 10
        },
        "expected": "worl"
      },
      "substringNegativeIndex": {
        "description": "Calculate a negative index from the end of the list.",
        "input": {
          "text": "hello",
          "start": 0,
          "end": -3
        },
        "expected": ""
      },
      "substringEndEqualToStart": {
        "description": "When the End index is equal to the Start index, return an empty string.",
        "input": {
          "text": "hello",
          "start": 2,
          "end": 2
        },
        "expected": ""
      },
      "substringInvalidIndex": {
        "description": "Attempt to access out-of-range indices.",
        "input": {
          "text": "hello",
          "start": 5,
          "end": -1
        },
        "expected": "hello"
      }
    },
    "examples": [
      {
        "description": "Extract a substring from the middle of the string.",
        "input": {
          "text": "programming",
          "start": 3,
          "end": 8
        },
        "expected": "gramm"
      },
      {
        "description": "Extract a substring from the beginning of the string.",
        "input": {
          "text": "coding",
          "start": 0,
          "end": 3
        },
        "expected": "cod"
      },
      {
        "description": "Extract a substring till the end of the string.",
        "input": {
          "text": "development",
          "start": 5,
          "end": 11
        },
        "expected": "pment"
      }
    ]
  },
  {
    "define": "_functions.Math.Subtract",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Subtract two numbers.",
    "parameters": {
      "a": {
        "type": "_types.Number",
        "description": "The first number."
      },
      "b": {
        "type": "_types.Number",
        "description": "The second number."
      }
    },
    "implementation": {
      "javascript": {
        "code": "return $$args.a - $$args.b;\n"
      }
    },
    "returns": {
      "type": "_types.Number",
      "description": "The difference of the two numbers."
    },
    "tests": {
      "subtractTwo": {
        "description": "Subtract two numbers.",
        "input": {
          "a": 3,
          "b": 2
        },
        "expected": 1
      }
    },
    "examples": [
      {
        "description": "Subtract a smaller number from a larger number.",
        "input": {
          "a": 10,
          "b": 4
        },
        "expected": 6
      },
      {
        "description": "Subtract a larger number from a smaller number, expecting a negative result.",
        "input": {
          "a": 4,
          "b": 10
        },
        "expected": -6
      },
      {
        "description": "Subtract a number from zero.",
        "input": {
          "a": 0,
          "b": 5
        },
        "expected": -5
      }
    ]
  },
  {
    "define": "_functions.Math.SubtractDuration",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Subtracts a duration from a date.",
    "parameters": {
      "date": {
        "type": "_types.String",
        "description": "The original date in ISO format."
      },
      "duration": {
        "type": "_types.Number",
        "description": "The duration to subtract in seconds."
      }
    },
    "implementation": {
      "javascript": {
        "code": "const date = new Date($$args.date);\nconst newTime = date.getTime() - $$args.duration * 1000;\nreturn new Date(newTime).toISOString();\n"
      }
    },
    "returns": {
      "type": "_types.String",
      "description": "The date after subtracting the duration in ISO format."
    },
    "tests": {
      "subtractDurationOneSecond": {
        "description": "Subtract one second from a date.",
        "input": {
          "date": "2022-01-01T00:00:00.000Z",
          "duration": 1
        },
        "expected": "2021-12-31T23:59:59.000Z"
      },
      "subtractDurationOneHour": {
        "description": "Subtract one hour from a date.",
        "input": {
          "date": "2022-01-01T02:00:00.000Z",
          "duration": 3600
        },
        "expected": "2022-01-01T01:00:00.000Z"
      }
    },
    "examples": [
      {
        "description": "Subtract one minute from a specific date.",
        "input": {
          "date": "2022-01-01T12:00:00.000Z",
          "duration": 60
        },
        "expected": "2022-01-01T11:59:00.000Z"
      },
      {
        "description": "Subtract one day from a specific date.",
        "input": {
          "date": "2022-01-02T00:00:00.000Z",
          "duration": 86400
        },
        "expected": "2022-01-01T00:00:00.000Z"
      },
      {
        "description": "Subtract a duration that crosses a year boundary.",
        "input": {
          "date": "2022-01-01T00:00:00.000Z",
          "duration": 31536000
        },
        "expected": "2021-01-01T00:00:00.000Z"
      }
    ]
  },
  {
    "define": "_functions.Math.Sum",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Calculates the sum of a list of numbers.",
    "parameters": {
      "numbers": {
        "type": "_types.List",
        "description": "The list of numbers to sum.",
        "items": {
          "type": "_types.Number"
        }
      }
    },
    "implementation": {
      "javascript": {
        "code": "return $$args.numbers.reduce((sum, curr) => sum + curr, 0);\n"
      }
    },
    "returns": {
      "type": "_types.Number",
      "description": "The sum of the numbers."
    },
    "tests": {
      "sumOfNumbers": {
        "description": "Calculate the sum of a list of numbers.",
        "input": {
          "numbers": [1, 2, 3, 4]
        },
        "expected": 10
      },
      "sumWithNegativeNumbers": {
        "description": "Calculate the sum of a list with negative numbers.",
        "input": {
          "numbers": [10, -5, 3, -2]
        },
        "expected": 6
      },
      "sumEmptyList": {
        "description": "Calculate the sum of an empty list.",
        "input": {
          "numbers": []
        },
        "expected": 0
      },
      "sumSingleNumber": {
        "description": "Calculate the sum of a list with a single number.",
        "input": {
          "numbers": [42]
        },
        "expected": 42
      }
    },
    "examples": [
      {
        "description": "Sum of a list with both positive and negative numbers.",
        "input": {
          "numbers": [3, -3, 4, -4, 5]
        },
        "expected": 5
      },
      {
        "description": "Sum of a list with all zero values.",
        "input": {
          "numbers": [0, 0, 0, 0]
        },
        "expected": 0
      },
      {
        "description": "Sum of a longer list of numbers.",
        "input": {
          "numbers": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
        },
        "expected": 55
      }
    ]
  },
  {
    "define": "_functions.Dictionary.SumByKey",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Calculates the sum of values in a dictionary based on the given key.",
    "parameters": {
      "input": {
        "type": "_types.Dictionary",
        "description": "The dictionary to calculate the sum from."
      },
      "key": {
        "type": "_types.String",
        "description": "The key to sum up the values for."
      }
    },
    "implementation": {
      "javascript": {
        "code": "let sum = 0;\nObject.keys($$args.input).forEach((k) => {\n  if (k === $$args.key) {\n    sum += $$args.input[k];\n  }\n});\nreturn sum;\n"
      }
    },
    "returns": {
      "type": "_types.Number",
      "description": "The sum of values for the given key."
    },
    "tests": {
      "sumByKeySimple": {
        "description": "Calculate the sum of a single value.",
        "input": {
          "input": {
            "x": 1
          },
          "key": "x"
        },
        "expected": 1
      },
      "sumByKeyMultipleValues": {
        "description": "Calculate the sum of multiple values with the same key.",
        "input": {
          "input": {
            "x": 2,
            "y": 3,
            "z": 4
          },
          "key": "x"
        },
        "expected": 2
      },
      "sumByKeyNoKey": {
        "description": "Attempt to calculate the sum for a non-existent key.",
        "input": {
          "input": {
            "a": 1,
            "b": 2
          },
          "key": "c"
        },
        "expected": 0
      }
    },
    "examples": [
      {
        "description": "Sum values of a single key with negative values.",
        "input": {
          "input": {
            "a": -1,
            "b": -2,
            "c": -3
          },
          "key": "b"
        },
        "expected": -2
      },
      {
        "description": "Sum values of an empty dictionary.",
        "input": {
          "input": {},
          "key": "anyKey"
        },
        "expected": 0
      },
      {
        "description": "Sum values with mixed positive and negative values.",
        "input": {
          "input": {
            "x": 5,
            "y": -5,
            "z": 10
          },
          "key": "y"
        },
        "expected": -5
      }
    ]
  },
  {
    "define": "_functions.Math.SumSquared",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Returns the sum of squares of the given numbers.",
    "parameters": {
      "numbers": {
        "type": "_types.List(Number)",
        "description": "A list of numbers to calculate the sum of squares for."
      }
    },
    "implementation": {
      "javascript": {
        "code": "return $$args.numbers.map(x => x ** 2).reduce((a, b) => a + b);\n"
      }
    },
    "returns": {
      "type": "_types.Number",
      "description": "The sum of squares of the given numbers."
    },
    "tests": {
      "sumSquaredSingleNumber": {
        "description": "Calculate the sum of squares for a single number.",
        "input": {
          "numbers": [3]
        },
        "expected": 9
      },
      "sumSquaredTwoNumbers": {
        "description": "Calculate the sum of squares for two numbers.",
        "input": {
          "numbers": [2, 4]
        },
        "expected": 20
      },
      "sumSquaredThreeNumbers": {
        "description": "Calculate the sum of squares for three numbers.",
        "input": {
          "numbers": [1, 2, 3]
        },
        "expected": 14
      }
    },
    "examples": [
      {
        "description": "Calculate the sum of squares for four numbers.",
        "input": {
          "numbers": [1, 2, 3, 4]
        },
        "expected": 30
      },
      {
        "description": "Calculate the sum of squares for negative numbers.",
        "input": {
          "numbers": [-1, -2, -3]
        },
        "expected": 14
      },
      {
        "description": "Calculate the sum of squares for a mix of positive and negative numbers.",
        "input": {
          "numbers": [-2, 3, -4, 5]
        },
        "expected": 54
      }
    ]
  },
  {
    "define": "_functions.List.SymmetricDifference",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Returns the list of items that are in either of the given lists but not in both.",
    "parameters": {
      "list1": {
        "type": "_types.List",
        "description": "The first list to find the symmetric difference for."
      },
      "list2": {
        "type": "_types.List",
        "description": "The second list to find the symmetric difference for."
      }
    },
    "implementation": {
      "javascript": {
        "code": "let set1 = new Set($$args.list1);\nlet set2 = new Set($$args.list2);\nreturn [...set1].filter(x => !set2.has(x)).concat([...set2].filter(x => !set1.has(x)));\n"
      }
    },
    "returns": {
      "type": "_types.List",
      "description": "The list of items that are in either of the given lists but not in both."
    },
    "tests": {
      "symmetricDifferenceSimple": {
        "description": "Find the symmetric difference between two simple lists.",
        "input": {
          "list1": ["a", "b", "c"],
          "list2": ["d", "e", "f"]
        },
        "expected": ["a", "b", "c", "d", "e", "f"]
      },
      "symmetricDifferenceCommonItems": {
        "description": "Find the symmetric difference when both lists have common items.",
        "input": {
          "list1": ["a", "b", "c", "d"],
          "list2": ["d", "e", "f"]
        },
        "expected": ["a", "b", "c", "e", "f"]
      },
      "symmetricDifferenceNoCommonItems": {
        "description": "Find the symmetric difference when both lists have no common items.",
        "input": {
          "list1": ["a", "b", "c"],
          "list2": ["d", "e", "f"]
        },
        "expected": ["a", "b", "c", "d", "e", "f"]
      },
      "symmetricDifferenceEmptyList": {
        "description": "Find the symmetric difference when one list is empty.",
        "input": {
          "list1": ["a", "b", "c"],
          "list2": []
        },
        "expected": ["a", "b", "c"]
      },
      "symmetricDifferenceBothEmptyLists": {
        "description": "Find the symmetric difference when both lists are empty.",
        "input": {
          "list1": [],
          "list2": []
        },
        "expected": []
      }
    },
    "examples": [
      {
        "description": "Symmetric difference when one list has duplicates.",
        "input": {
          "list1": ["a", "a", "b"],
          "list2": ["b", "c"]
        },
        "expected": ["a", "c"]
      },
      {
        "description": "Symmetric difference with numerical lists.",
        "input": {
          "list1": [1, 2, 3],
          "list2": [3, 4, 5]
        },
        "expected": [1, 2, 4, 5]
      },
      {
        "description": "Symmetric difference with lists containing different data types.",
        "input": {
          "list1": ["a", 1, true],
          "list2": [false, "a", 2]
        },
        "expected": [1, true, false, 2]
      }
    ]
  },
  {
    "define": "_functions.Number.TBillprice",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Calculates the Treasury Bill price for a given rate and period.",
    "parameters": {
      "rate": {
        "type": "_types.Number",
        "description": "The rate of the Treasury Bill."
      },
      "period": {
        "type": "_types.Number",
        "description": "The period in which the Treasury Bill will be held."
      }
    },
    "implementation": {
      "javascript": {
        "code": "return 100 / (1 + $$args.rate * $$args.period);\n"
      }
    },
    "returns": {
      "type": "_types.Number",
      "description": "The Treasury Bill price."
    },
    "tests": {
      "tBillpriceSimple": {
        "description": "Calculate the price of a Treasury Bill for a simple case.",
        "input": {
          "rate": 0.1,
          "period": 1
        },
        "expected": 90.9090909090909
      },
      "tBillpriceLargeRate": {
        "description": "Calculate the price of a Treasury Bill for a large rate.",
        "input": {
          "rate": 0.5,
          "period": 2
        },
        "expected": 50
      },
      "tBillpriceLongTerm": {
        "description": "Calculate the price of a Treasury Bill for a long period.",
        "input": {
          "rate": 0.01,
          "period": 10
        },
        "expected": 90.9090909090909
      }
    },
    "examples": [
      {
        "description": "Calculate the price for a very short-term Treasury Bill.",
        "input": {
          "rate": 0.05,
          "period": 0.5
        },
        "expected": 95.23809523809523
      },
      {
        "description": "Calculate the price for a Treasury Bill with a moderate rate and period.",
        "input": {
          "rate": 0.07,
          "period": 3
        },
        "expected": 76.92307692307693
      },
      {
        "description": "Calculate the price for a Treasury Bill with a very small rate.",
        "input": {
          "rate": 0.001,
          "period": 1
        },
        "expected": 99.9000999000999
      }
    ]
  },
  {
    "define": "_functions.Number.TTest",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Returns the t-test value for two given samples.",
    "parameters": {
      "sample1": {
        "type": "_types.List",
        "description": "The first sample data."
      },
      "sample2": {
        "type": "_types.List",
        "description": "The second sample data."
      }
    },
    "implementation": {
      "javascript": {
        "code": "const sum = arr => arr.reduce((acc, val) => acc + val, 0);\n\nconst mean = arr => sum(arr) / arr.length;\n\nconst standardDeviation = arr => {\n  const avg = mean(arr);\n  const deviations = arr.map(val => (val - avg) ** 2);\n  const variance = sum(deviations) / (arr.length - 1);\n  return Math.sqrt(variance);\n};\n\nconst tTest = (sample1, sample2) => {\n  const n1 = sample1.length;\n  const n2 = sample2.length;\n  const mean1 = mean(sample1);\n  const mean2 = mean(sample2);\n  const sd1 = standardDeviation(sample1);\n  const sd2 = standardDeviation(sample2);\n  const se = Math.sqrt((sd1 ** 2 / n1) + (sd2 ** 2 / n2));\n  return (mean1 - mean2) / se;\n};\n\nreturn tTest($$args.sample1, $$args.sample2);\n"
      }
    },
    "returns": {
      "type": "_types.Number",
      "description": "The t-test value for the two samples."
    },
    "tests": {
      "tTestEqualMeans": {
        "description": "Calculate the t-test value for samples with equal means.",
        "input": {
          "sample1": [1, 2, 3, 4, 5],
          "sample2": [1, 2, 3, 4, 5]
        },
        "expected": 0
      },
      "tTestDifferentMeans": {
        "description": "Calculate the t-test value for samples with different means.",
        "input": {
          "sample1": [1, 2, 3, 4, 5],
          "sample2": [6, 7, 8, 9, 10]
        },
        "expected": -5
      },
      "tTestSmallSamples": {
        "description": "Calculate the t-test value for small samples.",
        "input": {
          "sample1": [10, 12, 14],
          "sample2": [15, 18, 21]
        },
        "expected": -2.8823067684915684
      }
    },
    "examples": [
      {
        "description": "Calculate the t-test value for samples with varying means.",
        "input": {
          "sample1": [2, 4, 6, 8, 10],
          "sample2": [1, 1, 1, 1, 1]
        },
        "expected": 7.3484692283495345
      },
      {
        "description": "Calculate the t-test value for samples with the same variance but different means.",
        "input": {
          "sample1": [1, 1, 1, 1, 1],
          "sample2": [2, 2, 2, 2, 2]
        },
        "expected": -6.324555320336758
      },
      {
        "description": "Calculate the t-test value for one larger sample and one smaller sample.",
        "input": {
          "sample1": [3, 4, 5, 6, 7, 8, 9],
          "sample2": [1, 2, 3]
        },
        "expected": 2.23606797749979
      }
    ]
  },
  {
    "define": "_functions.Math.Tan",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Calculates the tangent of an angle (in radians).",
    "parameters": {
      "angle": {
        "type": "_types.Number",
        "description": "The angle in radians to calculate the tangent of."
      }
    },
    "implementation": {
      "javascript": {
        "code": "return Math.tan($$args.angle);\n"
      }
    },
    "returns": {
      "type": "_types.Number",
      "description": "The tangent of the angle."
    },
    "tests": {
      "tanZero": {
        "description": "Calculate the tangent of 0 radians.",
        "input": {
          "angle": 0
        },
        "expected": 0
      },
      "tanPiOverFour": {
        "description": "Calculate the tangent of Ï€/4 radians.",
        "input": {
          "angle": 0.7853981633974483
        },
        "expected": 0.9999999999999999
      },
      "tanPi": {
        "description": "Calculate the tangent of Ï€ radians.",
        "input": {
          "angle": 3.141592653589793
        },
        "expected": -1.2246467991473532e-16
      }
    },
    "examples": [
      {
        "description": "Calculate the tangent of Ï€/6 radians.",
        "input": {
          "angle": 0.5235987755982988
        },
        "expected": 0.5773502691896257
      },
      {
        "description": "Calculate the tangent of Ï€/3 radians.",
        "input": {
          "angle": 1.0471975511965976
        },
        "expected": 1.7320508075688767
      },
      {
        "description": "Calculate the tangent of -Ï€/4 radians.",
        "input": {
          "angle": -0.7853981633974483
        },
        "expected": -0.9999999999999999
      }
    ]
  },
  {
    "define": "_functions.Math.Tanh",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Calculates the hyperbolic tangent of a given angle (in radians).",
    "parameters": {
      "angle": {
        "type": "_types.Number",
        "description": "The angle in radians to calculate the hyperbolic tangent of."
      }
    },
    "implementation": {
      "javascript": {
        "code": "return Math.tanh($$args.angle);\n"
      }
    },
    "returns": {
      "type": "_types.Number",
      "description": "The hyperbolic tangent of the angle."
    },
    "tests": {
      "tanhZero": {
        "description": "Calculate the hyperbolic tangent of 0 radians.",
        "input": {
          "angle": 0
        },
        "expected": 0
      },
      "tanhPiOverFour": {
        "description": "Calculate the hyperbolic tangent of Ï€/4 radians.",
        "input": {
          "angle": 0.7853981633974483
        },
        "expected": 0.6557942026326724
      },
      "tanhPiHalf": {
        "description": "Calculate the hyperbolic tangent of Ï€/2 radians.",
        "input": {
          "angle": 1.5707963267948966
        },
        "expected": 0.9171523356672744
      }
    },
    "examples": [
      {
        "description": "Calculate the hyperbolic tangent of Ï€ radians.",
        "input": {
          "angle": 3.141592653589793
        },
        "expected": 0.99627207622075
      },
      {
        "description": "Calculate the hyperbolic tangent of -Ï€/4 radians.",
        "input": {
          "angle": -0.7853981633974483
        },
        "expected": -0.6557942026326724
      },
      {
        "description": "Calculate the hyperbolic tangent of 2 radians.",
        "input": {
          "angle": 2
        },
        "expected": 0.9640275800758169
      }
    ]
  },
  {
    "define": "_functions.Math.Timestamp",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Returns the current timestamp.",
    "parameters": {
      "none": {
        "type": "_types.Any",
        "description": "No parameters needed."
      }
    },
    "implementation": {
      "javascript": {
        "code": "return new Date().getTime();\n"
      }
    },
    "returns": {
      "type": "_types.Number",
      "description": "The current timestamp in milliseconds since the Unix epoch (January 1, 1970, 00:00:00 UTC)."
    },
    "tests": null,
    "examples": [
      {
        "description": "Get the current timestamp for logging purposes.",
        "input": {},
        "expected": "(current timestamp)"
      },
      {
        "description": "Fetch the current timestamp to store in a data entry.",
        "input": {},
        "expected": "(current timestamp)"
      },
      {
        "description": "Use the current timestamp to calculate elapsed time.",
        "input": {},
        "expected": "(current timestamp)"
      }
    ]
  },
  {
    "define": "_functions.Number.Timezone",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Returns the timezone offset in hours from UTC.",
    "parameters": {
      "date": {
        "type": "_types.String",
        "description": "The date to get the timezone offset for in ISO format."
      }
    },
    "implementation": {
      "javascript": {
        "code": "const date = new Date($$args.date);\nconst timezoneOffsetInMinutes = date.getTimezoneOffset();\nconst timezoneOffsetInHours = -timezoneOffsetInMinutes / 60;\nreturn timezoneOffsetInHours === 0 ? 0 : timezoneOffsetInHours;\n"
      }
    },
    "returns": {
      "type": "_types.Number",
      "description": "The timezone offset in hours from UTC."
    },
    "tests": {
      "timezoneUTC": {
        "description": "Get the timezone offset of a date at UTC.",
        "input": {
          "date": "2022-01-01T00:00:00.000Z"
        },
        "expected": 0
      },
      "timezoneEST": {
        "description": "Get the timezone offset of a date in EST (Eastern Standard Time).",
        "input": {
          "date": "2022-03-15T14:30:00.000Z"
        },
        "expected": 0
      }
    },
    "examples": [
      {
        "description": "Get the timezone offset for a date in Tokyo (JST - Japan Standard Time).",
        "input": {
          "date": "2022-01-01T00:00:00.000+09:00"
        },
        "expected": -9
      },
      {
        "description": "Get the timezone offset for a date in Pacific Standard Time (PST).",
        "input": {
          "date": "2022-01-01T00:00:00.000-08:00"
        },
        "expected": 8
      },
      {
        "description": "Get the timezone offset for a date in Central European Time (CET).",
        "input": {
          "date": "2022-01-01T00:00:00.000+01:00"
        },
        "expected": -1
      }
    ]
  },
  {
    "define": "_functions.Math.ToDegrees",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Converts an angle from radians to degrees.",
    "parameters": {
      "radians": {
        "type": "_types.Number",
        "description": "The angle in radians to convert to degrees."
      }
    },
    "implementation": {
      "javascript": {
        "code": "return $$args.radians * (180 / Math.PI);\n"
      }
    },
    "returns": {
      "type": "_types.Number",
      "description": "The angle in degrees."
    },
    "tests": {
      "radiansToDegreesZero": {
        "description": "Convert 0 radians to degrees.",
        "input": {
          "radians": 0
        },
        "expected": 0
      },
      "radiansToDegreesPiOverTwo": {
        "description": "Convert Ï€/2 radians to degrees.",
        "input": {
          "radians": 1.5707963267948966
        },
        "expected": 90
      },
      "radiansToDegreesPi": {
        "description": "Convert Ï€ radians to degrees.",
        "input": {
          "radians": 3.141592653589793
        },
        "expected": 180
      },
      "radiansToDegreesTwoPi": {
        "description": "Convert 2Ï€ radians to degrees.",
        "input": {
          "radians": 6.283185307179586
        },
        "expected": 360
      }
    },
    "examples": [
      {
        "description": "Convert 0.7853981633974483 radians (Ï€/4) to degrees.",
        "input": {
          "radians": 0.7853981633974483
        },
        "expected": 45
      },
      {
        "description": "Convert 3Ï€/4 radians to degrees.",
        "input": {
          "radians": 2.356194490192345
        },
        "expected": 135
      },
      {
        "description": "Convert 5Ï€/6 radians to degrees.",
        "input": {
          "radians": 2.6179938779914944
        },
        "expected": 150
      }
    ]
  },
  {
    "define": "_functions.Math.ToRadians",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Converts an angle from degrees to radians.",
    "parameters": {
      "degrees": {
        "type": "_types.Number",
        "description": "The angle in degrees to convert to radians."
      }
    },
    "implementation": {
      "javascript": {
        "code": "return $$args.degrees * (Math.PI / 180);\n"
      }
    },
    "returns": {
      "type": "_types.Number",
      "description": "The angle in radians."
    },
    "tests": {
      "degreesToRadiansZero": {
        "description": "Convert 0 degrees to radians.",
        "input": {
          "degrees": 0
        },
        "expected": 0
      },
      "degreesToRadiansNinety": {
        "description": "Convert 90 degrees to radians.",
        "input": {
          "degrees": 90
        },
        "expected": 1.5707963267948966
      },
      "degreesToRadians180": {
        "description": "Convert 180 degrees to radians.",
        "input": {
          "degrees": 180
        },
        "expected": 3.141592653589793
      },
      "degreesToRadians360": {
        "description": "Convert 360 degrees to radians.",
        "input": {
          "degrees": 360
        },
        "expected": 6.283185307179586
      }
    },
    "examples": [
      {
        "description": "Convert 45 degrees to radians.",
        "input": {
          "degrees": 45
        },
        "expected": 0.7853981633974483
      },
      {
        "description": "Convert 30 degrees to radians.",
        "input": {
          "degrees": 30
        },
        "expected": 0.5235987755982988
      },
      {
        "description": "Convert 270 degrees to radians.",
        "input": {
          "degrees": 270
        },
        "expected": 4.71238898038469
      }
    ]
  },
  {
    "define": "_functions.String.Trim",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Removes whitespace from the beginning and end of a string",
    "parameters": {
      "string": {
        "type": "_types.String",
        "description": "The string to trim"
      }
    },
    "implementation": {
      "javascript": {
        "code": "return $$args.string.trim();\n"
      }
    },
    "returns": {
      "type": "_types.String",
      "description": "The trimmed string"
    },
    "tests": {
      "noWhitespace": {
        "description": "Test with a string with no whitespace",
        "input": {
          "string": "hello"
        },
        "expected": "hello"
      },
      "whitespace": {
        "description": "Test with a string with whitespace",
        "input": {
          "string": "  hello  "
        },
        "expected": "hello"
      }
    },
    "examples": [
      {
        "description": "Trim a string with leading whitespace",
        "input": {
          "string": "    leading"
        },
        "expected": "leading"
      },
      {
        "description": "Trim a string with trailing whitespace",
        "input": {
          "string": "trailing      "
        },
        "expected": "trailing"
      },
      {
        "description": "Trim a string with both leading and trailing whitespace",
        "input": {
          "string": "    both sides   "
        },
        "expected": "both sides"
      }
    ]
  },
  {
    "define": "_functions.String.TrimEnd",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Trims whitespace from the end of a string.",
    "parameters": {
      "string": {
        "type": "_types.String",
        "description": "The string to trim."
      }
    },
    "implementation": {
      "javascript": {
        "code": "return $$args.string.trimEnd();\n"
      }
    },
    "returns": {
      "type": "_types.String",
      "description": "The trimmed string."
    },
    "tests": {
      "trimEndWhitespace": {
        "description": "Trim whitespace from the end of the string.",
        "input": {
          "string": "hello world   "
        },
        "expected": "hello world"
      },
      "trimEndNoWhitespace": {
        "description": "String with no trailing whitespace.",
        "input": {
          "string": "hello world"
        },
        "expected": "hello world"
      },
      "trimEndEmptyString": {
        "description": "Trim an empty string.",
        "input": {
          "string": ""
        },
        "expected": ""
      }
    },
    "examples": [
      {
        "description": "Trim whitespace from the end of a string with punctuation.",
        "input": {
          "string": "hello world!   "
        },
        "expected": "hello world!"
      },
      {
        "description": "Trim whitespace from the end of a string with newline character.",
        "input": {
          "string": "hello world\\n   "
        },
        "expected": "hello world\\n"
      },
      {
        "description": "Trim whitespace from the end of a string with special characters.",
        "input": {
          "string": "hello world!@#   "
        },
        "expected": "hello world!@#"
      }
    ]
  },
  {
    "define": "_functions.Number.TrimMean",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Trims the mean (average value) from a list of numbers.",
    "parameters": {
      "arr": {
        "type": "_types.List",
        "description": "The list of numbers from which to trim the mean."
      },
      "percentage": {
        "type": "_types.Number",
        "description": "The percentage of values to exclude from both ends when calculating the mean. Should be a number between 0 and 100."
      }
    },
    "implementation": {
      "javascript": {
        "code": "const start = Math.floor($$args.arr.length * ($$args.percentage / 200));\nconst end = $$args.arr.length - start;\nconst trimmedArr = $$args.arr.slice(start, end);\nreturn trimmedArr.reduce((total, num) => total + num, 0) / trimmedArr.length;\n"
      }
    },
    "returns": {
      "type": "_types.Number",
      "description": "The trimmed mean value."
    },
    "tests": {
      "trimMeanSimple": {
        "description": "Trim the mean of a simple list of numbers.",
        "input": {
          "arr": [1, 2, 3, 4, 5],
          "percentage": 20
        },
        "expected": 3
      },
      "trimMeanNoTrim": {
        "description": "Trim the mean when no values should be trimmed.",
        "input": {
          "arr": [1, 2, 3, 4, 5],
          "percentage": 0
        },
        "expected": 3
      },
      "trimMeanMidTrim": {
        "description": "Trim the mean with trimming values only from the middle.",
        "input": {
          "arr": [1, 2, 3, 4, 5],
          "percentage": 50
        },
        "expected": 3
      },
      "trimMeanExtremeTrim": {
        "description": "Trim the mean with extreme trimming values from both ends.",
        "input": {
          "arr": [1, 2, 3, 4, 5],
          "percentage": 80
        },
        "expected": 3
      },
      "trimMeanNegativeNumbers": {
        "description": "Trim the mean of a list containing negative numbers.",
        "input": {
          "arr": [-3, -2, -1, 0, 1, 2, 3],
          "percentage": 20
        },
        "expected": 0
      }
    },
    "examples": [
      {
        "description": "Trim the mean of a larger list with slight trimming.",
        "input": {
          "arr": [10, 20, 30, 40, 50, 60, 70, 80, 90, 100],
          "percentage": 10
        },
        "expected": 55
      },
      {
        "description": "Trim the mean of a list with no values to be trimmed.",
        "input": {
          "arr": [5, 15, 25, 35, 45],
          "percentage": 0
        },
        "expected": 25
      },
      {
        "description": "Trim the mean of a uniform list with moderate trimming.",
        "input": {
          "arr": [2, 2, 2, 2, 2, 2, 2, 2, 2, 2],
          "percentage": 40
        },
        "expected": 2
      }
    ]
  },
  {
    "define": "_functions.String.TrimStart",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Trims whitespace from the beginning of a string.",
    "parameters": {
      "string": {
        "type": "_types.String",
        "description": "The string to trim."
      }
    },
    "implementation": {
      "javascript": {
        "code": "return $$args.string.trimStart();\n"
      }
    },
    "returns": {
      "type": "_types.String",
      "description": "The trimmed string."
    },
    "tests": {
      "trimStartWhitespace": {
        "description": "Trim whitespace from the beginning of the string.",
        "input": {
          "string": "   hello world"
        },
        "expected": "hello world"
      },
      "trimStartNoWhitespace": {
        "description": "String with no leading whitespace.",
        "input": {
          "string": "hello world"
        },
        "expected": "hello world"
      },
      "trimStartEmptyString": {
        "description": "Trim an empty string.",
        "input": {
          "string": ""
        },
        "expected": ""
      }
    },
    "examples": [
      {
        "description": "Trim tabs from the beginning of the string.",
        "input": {
          "string": "\\t\\thello world"
        },
        "expected": "hello world"
      },
      {
        "description": "Trim mixed whitespace from the beginning of the string.",
        "input": {
          "string": " \\t  hello world"
        },
        "expected": "hello world"
      },
      {
        "description": "Trim new line characters from the beginning of the string.",
        "input": {
          "string": "\\n\\nhello world"
        },
        "expected": "hello world"
      }
    ]
  },
  {
    "define": "_functions.String.Concat",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Concatenates multiple strings into one string.",
    "parameters": {
      "inputs": {
        "type": "_types.List(String)",
        "description": "The list of strings to concatenate."
      },
      "separator": {
        "type": "_types.String",
        "description": "The separator between the strings. If not provided, defaults to an empty string."
      }
    },
    "implementation": {
      "javascript": {
        "code": "return $$args.inputs.join($$args.separator || '');\n"
      }
    },
    "returns": {
      "type": "_types.String",
      "description": "The concatenated string."
    },
    "tests": {
      "concatTwoStrings": {
        "description": "Concatenate two strings with a separator.",
        "input": {
          "inputs": ["hello", "world"],
          "separator": ", "
        },
        "expected": "hello, world"
      },
      "concatThreeStrings": {
        "description": "Concatenate three strings without a separator.",
        "input": {
          "inputs": ["a", "b", "c"]
        },
        "expected": "abc"
      },
      "concatSingleString": {
        "description": "Concatenate a single string with no separator.",
        "input": {
          "inputs": ["hello"]
        },
        "expected": "hello"
      }
    },
    "examples": [
      {
        "description": "Concatenate multiple strings with a space separator.",
        "input": {
          "inputs": ["This", "is", "a", "sentence"],
          "separator": " "
        },
        "expected": "This is a sentence"
      },
      {
        "description": "Concatenate strings with a hyphen as separator.",
        "input": {
          "inputs": ["2021", "09", "15"],
          "separator": "-"
        },
        "expected": "2021-09-15"
      },
      {
        "description": "Concatenate strings with no separator.",
        "input": {
          "inputs": ["foo", "bar"]
        },
        "expected": "foobar"
      }
    ]
  },
  {
    "define": "_functions.List.Union",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Combines two lists into one, removing duplicate values.",
    "parameters": {
      "list1": {
        "type": "_types.List",
        "description": "The first list to combine.",
        "items": {
          "type": "_types.Unknown"
        }
      },
      "list2": {
        "type": "_types.List",
        "description": "The second list to combine.",
        "items": {
          "type": "_types.Unknown"
        }
      }
    },
    "implementation": {
      "javascript": {
        "code": "return [...new Set([...$$args.list1, ...$$args.list2])];\n"
      }
    },
    "returns": {
      "type": "_types.List",
      "description": "The combined list with duplicates removed.",
      "items": {
        "type": "_types.Unknown"
      }
    },
    "tests": {
      "unionNoDuplicates": {
        "description": "Union of two lists with no duplicates.",
        "input": {
          "list1": [1, 2, 3],
          "list2": [4, 5, 6]
        },
        "expected": [1, 2, 3, 4, 5, 6]
      },
      "unionWithDuplicates": {
        "description": "Union of two lists with duplicates.",
        "input": {
          "list1": [1, 2, 3],
          "list2": [3, 4, 5]
        },
        "expected": [1, 2, 3, 4, 5]
      },
      "unionEmptyFirst": {
        "description": "Union of an empty first list and a non-empty second list.",
        "input": {
          "list1": [],
          "list2": [1, 2, 3]
        },
        "expected": [1, 2, 3]
      },
      "unionEmptySecond": {
        "description": "Union of a non-empty first list and an empty second list.",
        "input": {
          "list1": [1, 2, 3],
          "list2": []
        },
        "expected": [1, 2, 3]
      }
    },
    "examples": [
      {
        "description": "Union of two lists with a mix of strings and numbers.",
        "input": {
          "list1": [1, "a", 2, "b"],
          "list2": [2, "b", 3, "c"]
        },
        "expected": [1, "a", 2, "b", 3, "c"]
      },
      {
        "description": "Union of two lists where one list is a subset of the other.",
        "input": {
          "list1": [10, 20, 30],
          "list2": [20, 30, 40, 50]
        },
        "expected": [10, 20, 30, 40, 50]
      },
      {
        "description": "Union of two lists with all unique elements.",
        "input": {
          "list1": ["apple", "banana"],
          "list2": ["cherry", "date"]
        },
        "expected": ["apple", "banana", "cherry", "date"]
      }
    ]
  },
  {
    "define": "_functions.List.Unique",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Removes duplicate values from a list.",
    "parameters": {
      "list": {
        "type": "_types.List",
        "description": "The list from which to remove duplicate values.",
        "items": {
          "type": "_types.Any"
        }
      }
    },
    "implementation": {
      "javascript": {
        "code": "return [...new Set($$args.list)];\n"
      }
    },
    "returns": {
      "type": "_types.List",
      "description": "The list with duplicates removed.",
      "items": {
        "type": "_types.Any"
      }
    },
    "tests": {
      "uniqueWithDuplicates": {
        "description": "Remove duplicates from a list with duplicate values.",
        "input": {
          "list": [1, 2, 2, 3, 4, 4, 5]
        },
        "expected": [1, 2, 3, 4, 5]
      },
      "uniqueNoDuplicates": {
        "description": "List with no duplicate values.",
        "input": {
          "list": [1, 2, 3, 4, 5]
        },
        "expected": [1, 2, 3, 4, 5]
      },
      "uniqueEmptyList": {
        "description": "Remove duplicates from an empty list.",
        "input": {
          "list": []
        },
        "expected": []
      },
      "uniqueMixedTypes": {
        "description": "Remove duplicates from a list with mixed types.",
        "input": {
          "list": [1, "1", 2, "2", 2, 3, "3", "3"]
        },
        "expected": [1, "1", 2, "2", 3, "3"]
      }
    },
    "examples": [
      {
        "description": "Remove duplicates from a list containing strings only.",
        "input": {
          "list": ["apple", "banana", "apple", "cherry"]
        },
        "expected": ["apple", "banana", "cherry"]
      },
      {
        "description": "Remove duplicates from a list containing boolean values.",
        "input": {
          "list": [true, false, true, false, true]
        },
        "expected": [true, false]
      },
      {
        "description": "Remove duplicates from a list containing Date objects.",
        "input": {
          "list": [
            "new Date(\"2023-01-01\")",
            "new Date(\"2023-01-01\")",
            "new Date(\"2023-02-01\")"
          ]
        },
        "expected": ["new Date(\"2023-01-01\")", "new Date(\"2023-02-01\")"]
      }
    ]
  },
  {
    "define": "_functions.Dictionary.UniqueByKey",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Returns a new dictionary where each key is unique based on the specified key.",
    "parameters": {
      "input": {
        "type": "_types.Dictionary",
        "description": "The input dictionary to process."
      },
      "key": {
        "type": "_types.String",
        "description": "The key to use for uniqueness."
      }
    },
    "implementation": {
      "javascript": {
        "code": "const seen = new Set();\nconst result = {};\nfor (const [k, v] of Object.entries($$args.input)) {\n  if (!seen.has(v)) {\n    seen.add(v);\n    result[$$args.key + v] = v;\n  }\n}\nreturn result;\n"
      }
    },
    "returns": {
      "type": "_types.Dictionary",
      "description": "The new dictionary with unique keys."
    },
    "tests": {
      "uniqueByKeySimple": {
        "description": "Process a simple input.",
        "input": {
          "input": {
            "a": 1,
            "b": 2,
            "c": 3
          },
          "key": "value"
        },
        "expected": {
          "value1": 1,
          "value2": 2,
          "value3": 3
        }
      },
      "uniqueByKeyComplex": {
        "description": "Process a complex input.",
        "input": {
          "input": {
            "a": 1,
            "b": 2,
            "c": 3,
            "d": 4,
            "e": 5
          },
          "key": "letter"
        },
        "expected": {
          "letter1": 1,
          "letter2": 2,
          "letter3": 3,
          "letter4": 4,
          "letter5": 5
        }
      },
      "uniqueByKeyDuplicateValues": {
        "description": "Process an input with duplicate values.",
        "input": {
          "input": {
            "a": 1,
            "b": 2,
            "c": 1,
            "d": 3
          },
          "key": "unique"
        },
        "expected": {
          "unique1": 1,
          "unique2": 2,
          "unique3": 3
        }
      },
      "uniqueByKeyEmptyInput": {
        "description": "Process an empty input.",
        "input": {
          "input": {},
          "key": "empty"
        },
        "expected": {}
      }
    },
    "examples": [
      {
        "description": "Ensure unique keys with numeric values.",
        "input": {
          "input": {
            "x": 10,
            "y": 20,
            "z": 10
          },
          "key": "num"
        },
        "expected": {
          "num10": 10,
          "num20": 20
        }
      },
      {
        "description": "Create unique keys for string values.",
        "input": {
          "input": {
            "one": "a",
            "two": "b",
            "three": "a"
          },
          "key": "char"
        },
        "expected": {
          "chara": "a",
          "charb": "b"
        }
      },
      {
        "description": "Combine keys and values with mixed types.",
        "input": {
          "input": {
            "first": 1,
            "second": "two",
            "third": 1
          },
          "key": "type"
        },
        "expected": {
          "type1": 1,
          "typetwo": "two"
        }
      }
    ]
  },
  {
    "define": "_functions.String.Uppercase",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Converts a string to uppercase",
    "parameters": {
      "string": {
        "type": "_types.String",
        "description": "The string to convert to uppercase"
      }
    },
    "implementation": {
      "javascript": {
        "code": "return $$args.string.toUpperCase();\n"
      }
    },
    "returns": {
      "type": "_types.String",
      "description": "The uppercase string"
    },
    "tests": {
      "fullLowercase": {
        "description": "Test with a lowercase string",
        "input": {
          "string": "hello"
        },
        "expected": "HELLO"
      },
      "fullUppercase": {
        "description": "Test with an uppercase string",
        "input": {
          "string": "WORLD"
        },
        "expected": "WORLD"
      }
    },
    "examples": [
      {
        "description": "Convert a mixed-case string to uppercase.",
        "input": {
          "string": "HeLLo WoRLD"
        },
        "expected": "HELLO WORLD"
      },
      {
        "description": "Convert a string with numbers and special characters to uppercase.",
        "input": {
          "string": "Hello123! #world"
        },
        "expected": "HELLO123! #WORLD"
      },
      {
        "description": "Convert a string with various whitespace characters to uppercase.",
        "input": {
          "string": "   leading and trailing whitespace   "
        },
        "expected": "   LEADING AND TRAILING WHITESPACE   "
      }
    ]
  },
  {
    "define": "_functions.List.Values",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Returns the values of a given list.",
    "parameters": {
      "input": {
        "type": "_types.List",
        "description": "The list to get the values from."
      }
    },
    "implementation": {
      "javascript": {
        "code": "return $$args.input;\n"
      }
    },
    "returns": {
      "type": "_types.List",
      "description": "The values of the input list."
    },
    "tests": {
      "valuesSimple": {
        "description": "Get the values of a simple list.",
        "input": {
          "input": [1, 2, 3]
        },
        "expected": [1, 2, 3]
      },
      "valuesEmptyList": {
        "description": "Get the values of an empty list.",
        "input": {
          "input": []
        },
        "expected": []
      }
    },
    "examples": [
      {
        "description": "Get the values of a list with mixed types.",
        "input": {
          "input": [1, "two", 3, true]
        },
        "expected": [1, "two", 3, true]
      },
      {
        "description": "Get the values of a list with nested lists.",
        "input": {
          "input": [
            [1, 2],
            [3, 4]
          ]
        },
        "expected": [
          [1, 2],
          [3, 4]
        ]
      },
      {
        "description": "Get the values of a list with a single item.",
        "input": {
          "input": ["single item"]
        },
        "expected": ["single item"]
      }
    ]
  },
  {
    "define": "_functions.List.WithItem",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Selects the item at the given index.",
    "parameters": {
      "list": {
        "type": "_types.List",
        "description": "The input list."
      },
      "index": {
        "type": "_types.Number",
        "description": "The index of the item to select. Negative index will be calculated from the end of the list."
      }
    },
    "implementation": {
      "javascript": {
        "code": "let index = $$args.index;\nif (index < 0) {\n  index = $$args.list.length + index;\n}\nreturn $$args.list[index];\n"
      }
    },
    "returns": {
      "type": "_types.Any",
      "description": "The selected item."
    },
    "tests": {
      "withItemIndex": {
        "description": "Select an item at a given positive index.",
        "input": {
          "list": ["a", "b", "c"],
          "index": 1
        },
        "expected": "b"
      },
      "withItemNegativeIndex": {
        "description": "Select an item at a given negative index from the end of the list.",
        "input": {
          "list": ["a", "b", "c"],
          "index": -2
        },
        "expected": "b"
      },
      "withItemIndexOutOfBounds": {
        "description": "Attempt to select an item at an index out of bounds.",
        "input": {
          "list": ["a", "b", "c"],
          "index": 5
        },
        "expected": null
      },
      "withItemNegativeIndexOutOfBounds": {
        "description": "Attempt to select an item at a negative index out of bounds.",
        "input": {
          "list": ["a", "b", "c"],
          "index": -5
        },
        "expected": null
      }
    },
    "examples": [
      {
        "description": "Select the first item of the list.",
        "input": {
          "list": [1, 2, 3, 4],
          "index": 0
        },
        "expected": 1
      },
      {
        "description": "Select the last item using a negative index.",
        "input": {
          "list": ["apple", "banana", "cherry"],
          "index": -1
        },
        "expected": "cherry"
      },
      {
        "description": "Select an item from a single-element list.",
        "input": {
          "list": [42],
          "index": 0
        },
        "expected": 42
      }
    ]
  },
  {
    "define": "_functions.List.WithUniqueItem",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Returns a new list containing each item in the input list, but only once.",
    "parameters": {
      "input": {
        "type": "_types.List",
        "description": "The input list to process."
      }
    },
    "implementation": {
      "javascript": {
        "code": "const seen = new Set();\nreturn $$args.input.filter((item) => {\n  if (seen.has(item)) {\n    return false;\n  }\n  seen.add(item);\n  return true;\n});\n"
      }
    },
    "returns": {
      "type": "_types.List",
      "description": "The new list with unique items."
    },
    "tests": {
      "withUniqueItemSingle": {
        "description": "Return a new list with only one item.",
        "input": {
          "input": ["a"]
        },
        "expected": ["a"]
      },
      "withUniqueItemMulti": {
        "description": "Return a new list with multiple unique items.",
        "input": {
          "input": ["a", "b", "c", "d", "e", "b"]
        },
        "expected": ["a", "b", "c", "d", "e"]
      },
      "withUniqueItemEmpty": {
        "description": "Return a new list from an empty input list.",
        "input": {
          "input": []
        },
        "expected": []
      },
      "withUniqueItemAllDuplicates": {
        "description": "Return a new list when all items are duplicates.",
        "input": {
          "input": ["a", "a", "a"]
        },
        "expected": ["a"]
      },
      "withUniqueItemMixedTypes": {
        "description": "Return a new list with mixed types.",
        "input": {
          "input": [1, "1", 2, "2", 2, "2"]
        },
        "expected": [1, "1", 2, "2"]
      }
    },
    "examples": [
      {
        "description": "Return a new list with unique items including boolean values.",
        "input": {
          "input": [true, false, true, false]
        },
        "expected": [true, false]
      },
      {
        "description": "Return a new list with unique items including a null value.",
        "input": {
          "input": [null, "apple", "apple", null]
        },
        "expected": [null, "apple"]
      },
      {
        "description": "Return a new list containing nested lists with duplicates.",
        "input": {
          "input": [
            [1, 2],
            [1, 2],
            [2, 3]
          ]
        },
        "expected": [
          [1, 2],
          [2, 3]
        ]
      }
    ]
  },
  {
    "define": "_functions.List.WithUniqueItemByKey",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Returns a new list with unique items based on the given key.",
    "parameters": {
      "input": {
        "type": "_types.List",
        "description": "The original list to filter."
      },
      "key": {
        "type": "_types.String",
        "description": "The key to use for uniqueness."
      }
    },
    "implementation": {
      "javascript": {
        "code": "const seen = new Set();\nreturn $$args.input.filter((item) => {\n  const keyValue = item[$$args.key];\n  if (seen.has(keyValue)) {\n    return false;\n  }\n  seen.add(keyValue);\n  return true;\n});\n"
      }
    },
    "returns": {
      "type": "_types.List",
      "description": "A new list with unique items."
    },
    "tests": {
      "withUniqueItemByKeySimple": {
        "description": "Filter a simple list.",
        "input": {
          "input": [
            {
              "id": "1"
            },
            {
              "id": "2"
            },
            {
              "id": "1"
            }
          ],
          "key": "id"
        },
        "expected": [
          {
            "id": "1"
          },
          {
            "id": "2"
          }
        ]
      },
      "withUniqueItemByKeyComplex": {
        "description": "Filter a complex list.",
        "input": {
          "input": [
            {
              "name": "John",
              "age": 25
            },
            {
              "name": "Jane",
              "age": 30
            },
            {
              "name": "John",
              "age": 25
            }
          ],
          "key": "name"
        },
        "expected": [
          {
            "name": "John",
            "age": 25
          },
          {
            "name": "Jane",
            "age": 30
          }
        ]
      },
      "withUniqueItemByKeyNoDuplicates": {
        "description": "Filter a list with no duplicates.",
        "input": {
          "input": [
            {
              "id": "1"
            },
            {
              "id": "2"
            },
            {
              "id": "3"
            }
          ],
          "key": "id"
        },
        "expected": [
          {
            "id": "1"
          },
          {
            "id": "2"
          },
          {
            "id": "3"
          }
        ]
      },
      "withUniqueItemByKeyEmptyList": {
        "description": "Filter an empty list.",
        "input": {
          "input": [],
          "key": "id"
        },
        "expected": []
      },
      "withUniqueItemByKeyDifferentKeys": {
        "description": "Filter a list with different keys.",
        "input": {
          "input": [
            {
              "name": "John"
            },
            {
              "name": "Jane"
            },
            {
              "id": "1"
            }
          ],
          "key": "name"
        },
        "expected": [
          {
            "name": "John"
          },
          {
            "name": "Jane"
          },
          {
            "id": "1"
          }
        ]
      }
    },
    "examples": [
      {
        "description": "Filter a list with mixed types.",
        "input": {
          "input": [
            {
              "id": 1
            },
            {
              "id": "1"
            },
            {
              "id": 2
            }
          ],
          "key": "id"
        },
        "expected": [
          {
            "id": 1
          },
          {
            "id": "1"
          },
          {
            "id": 2
          }
        ]
      },
      {
        "description": "Filter a list using a nested key.",
        "input": {
          "input": [
            {
              "info": {
                "id": "1"
              }
            },
            {
              "info": {
                "id": "2"
              }
            },
            {
              "info": {
                "id": "1"
              }
            }
          ],
          "key": "info.id"
        },
        "expected": [
          {
            "info": {
              "id": "1"
            }
          },
          {
            "info": {
              "id": "2"
            }
          }
        ]
      },
      {
        "description": "Filter a list with numeric keys.",
        "input": {
          "input": [
            {
              "0": "a"
            },
            {
              "0": "b"
            },
            {
              "0": "a"
            }
          ],
          "key": "0"
        },
        "expected": [
          {
            "0": "a"
          },
          {
            "0": "b"
          }
        ]
      }
    ]
  },
  {
    "define": "_functions.List.Without",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Removes specified values from a list.",
    "parameters": {
      "list": {
        "type": "_types.List",
        "description": "The list to remove values from.",
        "items": {
          "type": "_types.Unknown"
        }
      },
      "values": {
        "type": "_types.List",
        "description": "The values to remove.",
        "items": {
          "type": "_types.Unknown"
        }
      }
    },
    "implementation": {
      "javascript": {
        "code": "const valuesSet = new Set($$args.values);\nreturn $$args.list.filter(item => !valuesSet.has(item));\n"
      }
    },
    "returns": {
      "type": "_types.List",
      "description": "The list with the specified values removed.",
      "items": {
        "type": "_types.Unknown"
      }
    },
    "tests": {
      "withoutValues": {
        "description": "Remove specified values from a list.",
        "input": {
          "list": [1, 2, 3, 4, 5],
          "values": [2, 4]
        },
        "expected": [1, 3, 5]
      },
      "withoutNonExistingValues": {
        "description": "Try to remove values that do not exist in the list.",
        "input": {
          "list": [1, 2, 3],
          "values": [4, 5]
        },
        "expected": [1, 2, 3]
      },
      "withoutEmptyValues": {
        "description": "Remove from a list with an empty values list.",
        "input": {
          "list": [1, 2, 3],
          "values": []
        },
        "expected": [1, 2, 3]
      },
      "withoutEmptyList": {
        "description": "Remove from an empty list.",
        "input": {
          "list": [],
          "values": [1, 2]
        },
        "expected": []
      },
      "withoutAllValues": {
        "description": "Remove all values from a list.",
        "input": {
          "list": [1, 2, 3, 4],
          "values": [1, 2, 3, 4]
        },
        "expected": []
      }
    },
    "examples": [
      {
        "description": "Remove multiple instances of the same value.",
        "input": {
          "list": [1, 2, 2, 3, 4, 4, 5],
          "values": [2, 4]
        },
        "expected": [1, 3, 5]
      },
      {
        "description": "Remove from a list of strings.",
        "input": {
          "list": ["apple", "banana", "cherry", "apple"],
          "values": ["apple"]
        },
        "expected": ["banana", "cherry"]
      },
      {
        "description": "Remove complex values.",
        "input": {
          "list": [
            1,
            {
              "a": 1
            },
            "test",
            {
              "b": 2
            }
          ],
          "values": [
            {
              "a": 1
            },
            "test"
          ]
        },
        "expected": [
          1,
          {
            "b": 2
          }
        ]
      }
    ]
  },
  {
    "define": "_functions.List.WithoutItem",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Returns a new list that excludes the given item.",
    "parameters": {
      "input": {
        "type": "_types.List",
        "description": "The list to search and remove an item from."
      },
      "item": {
        "type": "_types.Any",
        "description": "The item to exclude from the result."
      }
    },
    "implementation": {
      "javascript": {
        "code": "return $$args.input.filter((x) => x !== $$args.item);\n"
      }
    },
    "returns": {
      "type": "_types.List",
      "description": "The new list without the specified item."
    },
    "tests": {
      "withoutItemPresent": {
        "description": "Remove an item that is present in the list.",
        "input": {
          "input": ["a", "b", "c"],
          "item": "b"
        },
        "expected": ["a", "c"]
      },
      "withoutItemNotPresent": {
        "description": "Attempt to remove an item that is not present in the list.",
        "input": {
          "input": ["a", "b", "c"],
          "item": "d"
        },
        "expected": ["a", "b", "c"]
      },
      "withoutItemMultipleOccurrences": {
        "description": "Remove an item that appears multiple times in the list.",
        "input": {
          "input": ["a", "b", "b", "c"],
          "item": "b"
        },
        "expected": ["a", "c"]
      },
      "withoutItemEmptyList": {
        "description": "Attempt to remove an item from an empty list.",
        "input": {
          "input": [],
          "item": "a"
        },
        "expected": []
      },
      "withoutItemSameTypeDifferentValue": {
        "description": "Attempt to remove an item with the same type but different value.",
        "input": {
          "input": [1, 2, 3],
          "item": "1"
        },
        "expected": [1, 2, 3]
      }
    },
    "examples": [
      {
        "description": "Remove a numeric item from a list of numbers.",
        "input": {
          "input": [1, 2, 3, 4],
          "item": 3
        },
        "expected": [1, 2, 4]
      },
      {
        "description": "Remove a boolean item from a list.",
        "input": {
          "input": [true, false, true],
          "item": false
        },
        "expected": [true, true]
      },
      {
        "description": "Remove an item from a list of mixed types.",
        "input": {
          "input": ["text", 123, true, "remove"],
          "item": "remove"
        },
        "expected": ["text", 123, true]
      }
    ]
  },
  {
    "define": "_functions.Number.XIRR",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Calculates the internal rate of return for a series of cash flows.",
    "parameters": {
      "cashFlows": {
        "type": "_types.List",
        "description": "The series of cash flows. The first element should be the initial investment at time 0."
      },
      "dates": {
        "type": "_types.List",
        "description": "The dates corresponding to each cash flow. The first date should be time 0 when the initial investment is made."
      }
    },
    "implementation": {
      "javascript": {
        "code": "const xirr = (values, dates) => {\n  const YEARS_IN_DAY = 365.25;\n\n  const startDate = new Date(dates[0]);\n  const guess = 0.1;\n\n  const xirrValue = (guess) => {\n    let result = 0;\n    for (let i = 0; i < values.length; i++) {\n      result += values[i] / Math.pow(1 + guess, (dates[i] - startDate) / (1000 * 60 * 60 * 24 * YEARS_IN_DAY));\n    }\n    return result;\n  };\n\n  const xirrDerivative = (guess) => {\n    let result = 0;\n    for (let i = 0; i < values.length; i++) {\n      const d = (dates[i] - startDate) / (1000 * 60 * 60 * 24 * YEARS_IN_DAY);\n      result -= values[i] * d / Math.pow(1 + guess, d + 1);\n    }\n    return result;\n  };\n\n  const MAX_ITERATIONS = 100;\n  const TOLERANCE = 1e-8;\n\n  let x0 = guess;\n  let x1 = guess;\n  let f0 = xirrValue(x0);\n  let f1 = xirrDerivative(x1);\n  let i = 0;\n\n  while (i < MAX_ITERATIONS && Math.abs(f1) > TOLERANCE) {\n    x1 = x0 - f0 / f1;\n    f1 = xirrDerivative(x1);\n    i++;\n  }\n\n  return x1;\n};\n\nreturn xirr($$args.cashFlows, $$args.dates);\n"
      }
    },
    "returns": {
      "type": "_types.Number",
      "description": "The calculated internal rate of return."
    },
    "tests": {
      "xirrSimple": {
        "description": "Calculate the internal rate of return for a simple cash flow series.",
        "input": {
          "cashFlows": [-1000, 250, 350, 420, 180],
          "dates": [
            "2022-01-01T00:00:00Z",
            "2022-01-04T00:00:00Z",
            "2022-01-10T00:00:00Z",
            "2022-01-15T00:00:00Z",
            "2022-01-20T00:00:00Z"
          ]
        },
        "expected": 0.1
      },
      "xirrLongerPeriod": {
        "description": "Calculate the internal rate of return for a cash flow series over a longer period.",
        "input": {
          "cashFlows": [-1000, 100, 50, 200, 300, 400, 100, 50],
          "dates": [
            "2022-01-01T00:00:00Z",
            "2022-02-01T00:00:00Z",
            "2022-03-01T00:00:00Z",
            "2022-04-01T00:00:00Z",
            "2022-05-01T00:00:00Z",
            "2022-06-01T00:00:00Z",
            "2022-07-01T00:00:00Z",
            "2022-08-01T00:00:00Z"
          ]
        },
        "expected": 0.1
      },
      "xirrZeroCashFlows": {
        "description": "Calculate the internal rate of return for zero cash flows (only initial investment).",
        "input": {
          "cashFlows": [-1000],
          "dates": ["2022-01-01T00:00:00Z"]
        },
        "expected": 0.1
      }
    },
    "examples": [
      {
        "description": "Calculate the internal rate of return for a cash flow series with different amounts.",
        "input": {
          "cashFlows": [-2000, 400, 300, 500, 400, 200, 300, 100],
          "dates": [
            "2022-01-01T00:00:00Z",
            "2022-02-01T00:00:00Z",
            "2022-03-01T00:00:00Z",
            "2022-04-01T00:00:00Z",
            "2022-05-01T00:00:00Z",
            "2022-06-01T00:00:00Z",
            "2022-07-01T00:00:00Z",
            "2022-08-01T00:00:00Z"
          ]
        },
        "expected": 0.1
      },
      {
        "description": "Calculate the internal rate of return for a cash flow series with alternating values.",
        "input": {
          "cashFlows": [-1500, 300, -200, 400, -300, 200],
          "dates": [
            "2022-01-01T00:00:00Z",
            "2022-01-10T00:00:00Z",
            "2022-01-20T00:00:00Z",
            "2022-01-30T00:00:00Z",
            "2022-02-10T00:00:00Z",
            "2022-02-20T00:00:00Z"
          ]
        },
        "expected": 0.1
      },
      {
        "description": "Calculate the internal rate of return for a cash flow series with large gaps between dates.",
        "input": {
          "cashFlows": [-2000, 500, 700, 400, 800],
          "dates": [
            "2022-01-01T00:00:00Z",
            "2023-01-01T00:00:00Z",
            "2024-01-01T00:00:00Z",
            "2025-01-01T00:00:00Z",
            "2026-01-01T00:00:00Z"
          ]
        },
        "expected": 0.1
      }
    ]
  },
  {
    "define": "_functions.Number.XNPV",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Calculates the present value of a series of cash flows based on a provided discount rate and a series of cash flow dates.",
    "parameters": {
      "rate": {
        "type": "_types.Number",
        "description": "The discount rate per period."
      },
      "dates": {
        "type": "_types.List",
        "description": "The dates of each cash flow."
      },
      "values": {
        "type": "_types.List",
        "description": "The values of each cash flow."
      }
    },
    "implementation": {
      "javascript": {
        "code": "let npv = 0;\nfor (let i = 0; i < $$args.dates.length; i++) {\n  npv += $$args.values[i] / Math.pow(1 + $$args.rate, ($$args.dates[i] - $$args.dates[0]) / 365);\n}\nreturn npv;\n"
      }
    },
    "returns": {
      "type": "_types.Number",
      "description": "The present value of the cash flows."
    },
    "tests": {
      "xnpvSimple": {
        "description": "Calculate the present value of cash flows with a simple example.",
        "input": {
          "rate": 0.1,
          "dates": [0, 365, 730],
          "values": [-100, 0, 150]
        },
        "expected": 23.96694214876031
      },
      "xnpvNegativeRate": {
        "description": "Calculate the present value of cash flows with a negative discount rate.",
        "input": {
          "rate": -0.05,
          "dates": [0, 365, 730],
          "values": [-100, 0, 150]
        },
        "expected": 66.2049861495845
      },
      "xnpvMultipleFlows": {
        "description": "Calculate the present value of multiple cash flows.",
        "input": {
          "rate": 0.1,
          "dates": [0, 30, 60, 90],
          "values": [-100, 20, 30, 40]
        },
        "expected": -11.55150769451955
      }
    },
    "examples": [
      {
        "description": "Calculate the present value with zero discount rate.",
        "input": {
          "rate": 0,
          "dates": [0, 180, 365],
          "values": [-200, 100, 150]
        },
        "expected": 50
      },
      {
        "description": "Calculate the present value with large cash inflows and outflows.",
        "input": {
          "rate": 0.05,
          "dates": [0, 360, 720],
          "values": [-1000, 2000, -1500]
        },
        "expected": 392.1413023045416
      },
      {
        "description": "Calculate the present value with mixed cash flows over various periods.",
        "input": {
          "rate": 0.03,
          "dates": [0, 100, 200, 300],
          "values": [-500, 150, 250, 400]
        },
        "expected": 160.13528606328916
      }
    ]
  },
  {
    "define": "_functions.Math.Yearfrac",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Returns the year fraction for a given date.",
    "parameters": {
      "start_date": {
        "type": "_types.String",
        "description": "The start date in ISO format."
      },
      "end_date": {
        "type": "_types.String",
        "description": "The end date in ISO format."
      }
    },
    "implementation": {
      "javascript": {
        "code": "const startDate = new Date($$args.start_date);\nconst endDate = new Date($$args.end_date);\nconst duration = endDate - startDate;\nreturn (duration / (1000 * 60 * 60 * 24 * 365.25));\n"
      }
    },
    "returns": {
      "type": "_types.Number",
      "description": "The year fraction."
    },
    "tests": {
      "yearfracSimple": {
        "description": "Calculate the year fraction for a simple date range.",
        "input": {
          "start_date": "2022-01-01T00:00:00Z",
          "end_date": "2022-12-31T23:59:59.999Z"
        },
        "expected": 0.9993155372715289
      },
      "yearfracPartialYear": {
        "description": "Calculate the year fraction for a date range that spans two years.",
        "input": {
          "start_date": "2022-01-01T00:00:00Z",
          "end_date": "2023-06-30T23:59:59.999Z"
        },
        "expected": 1.4948665297424393
      },
      "yearfracNoDays": {
        "description": "Calculate the year fraction for a date range that is less than one day.",
        "input": {
          "start_date": "2022-01-01T00:00:00Z",
          "end_date": "2022-01-01T00:59:59.999Z"
        },
        "expected": 0.00011407708444241641
      }
    },
    "examples": [
      {
        "description": "Calculate the year fraction for a date range within the same month.",
        "input": {
          "start_date": "2022-01-01T00:00:00Z",
          "end_date": "2022-01-31T23:59:59.999Z"
        },
        "expected": 0.08213552361396304
      },
      {
        "description": "Calculate the year fraction for a date range spanning across a leap year.",
        "input": {
          "start_date": "2023-07-01T00:00:00Z",
          "end_date": "2024-06-30T23:59:59.999Z"
        },
        "expected": 0.9986310745430578
      },
      {
        "description": "Calculate the year fraction for a very short date range within the same day.",
        "input": {
          "start_date": "2022-01-01T00:00:00Z",
          "end_date": "2022-01-01T01:00:00Z"
        },
        "expected": 0.00011407708444241641
      }
    ]
  },
  {
    "define": "_functions.List.Yielddisc",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Selects the items starting at the given Start index and ending at the given End index.",
    "parameters": {
      "input": {
        "type": "_types.List",
        "description": "The list from which to select items."
      },
      "start": {
        "type": "_types.Number",
        "description": "The index of the first item to include."
      },
      "end": {
        "type": "_types.Number",
        "description": "The index where the selection ends (not including the item at this index). If negative, it will be calculated from the end of the list."
      }
    },
    "implementation": {
      "javascript": {
        "code": "return $$args.input.slice($$args.start, $$args.end);\n"
      }
    },
    "returns": {
      "type": "_types.List",
      "description": "The selected items from the list."
    },
    "tests": {
      "yieldDiscPositiveRange": {
        "description": "Select items from a positive range.",
        "input": {
          "input": ["a", "b", "c", "d"],
          "start": 1,
          "end": 3
        },
        "expected": ["b", "c"]
      },
      "yieldDiscNegativeEnd": {
        "description": "Select items with a negative end index.",
        "input": {
          "input": ["a", "b", "c", "d"],
          "start": 0,
          "end": -1
        },
        "expected": ["a", "b", "c"]
      },
      "yieldDiscNoEnd": {
        "description": "Select items without specifying the end index.",
        "input": {
          "input": ["a", "b", "c", "d"],
          "start": 2
        },
        "expected": ["c", "d"]
      }
    },
    "examples": [
      {
        "description": "Select items from start to a positive end within bounds.",
        "input": {
          "input": [1, 2, 3, 4, 5],
          "start": 0,
          "end": 2
        },
        "expected": [1, 2]
      },
      {
        "description": "Select items from a positive range crossing the middle.",
        "input": {
          "input": ["x", "y", "z", "w", "t"],
          "start": 1,
          "end": 4
        },
        "expected": ["y", "z", "w"]
      },
      {
        "description": "Select all items when using negative end equal to list length.",
        "input": {
          "input": [10, 20, 30, 40, 50],
          "start": 0,
          "end": -5
        },
        "expected": [10, 20, 30, 40, 50]
      }
    ]
  },
  {
    "define": "_functions.List.Yieldmat",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Returns a matrix of the given size, filled with zeros.",
    "parameters": {
      "rows": {
        "type": "_types.Number",
        "description": "The number of rows in the matrix."
      },
      "cols": {
        "type": "_types.Number",
        "description": "The number of columns in the matrix."
      }
    },
    "implementation": {
      "javascript": {
        "code": "const matrix = Array.from({ length: $$args.rows }, () => Array.from({ length: $$args.cols }, () => 0));\nreturn matrix;\n"
      }
    },
    "returns": {
      "type": "_types.List",
      "description": "A matrix of the given size filled with zeros."
    },
    "tests": {
      "yieldmatTwoByTwo": {
        "description": "Create a 2x2 matrix filled with zeros.",
        "input": {
          "rows": 2,
          "cols": 2
        },
        "expected": [
          [0, 0],
          [0, 0]
        ]
      },
      "yieldmatThreeByFour": {
        "description": "Create a 3x4 matrix filled with zeros.",
        "input": {
          "rows": 3,
          "cols": 4
        },
        "expected": [
          [0, 0, 0, 0],
          [0, 0, 0, 0],
          [0, 0, 0, 0]
        ]
      },
      "yieldmatEmpty": {
        "description": "Create a 0x0 matrix (empty matrix).",
        "input": {
          "rows": 0,
          "cols": 0
        },
        "expected": []
      }
    },
    "examples": [
      {
        "description": "Create a 1x1 matrix filled with zeros.",
        "input": {
          "rows": 1,
          "cols": 1
        },
        "expected": [[0]]
      },
      {
        "description": "Create a 2x3 matrix filled with zeros.",
        "input": {
          "rows": 2,
          "cols": 3
        },
        "expected": [
          [0, 0, 0],
          [0, 0, 0]
        ]
      },
      {
        "description": "Create a 4x2 matrix filled with zeros.",
        "input": {
          "rows": 4,
          "cols": 2
        },
        "expected": [
          [0, 0],
          [0, 0],
          [0, 0],
          [0, 0]
        ]
      }
    ]
  },
  {
    "define": "_functions.List.Zip",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Combines two lists into a list of tuples.",
    "parameters": {
      "list1": {
        "type": "_types.List",
        "description": "The first list to combine.",
        "items": {
          "type": "_types.Any"
        }
      },
      "list2": {
        "type": "_types.List",
        "description": "The second list to combine.",
        "items": {
          "type": "_types.Any"
        }
      }
    },
    "implementation": {
      "javascript": {
        "code": "const minLength = Math.min($$args.list1.length, $$args.list2.length);\nconst result = [];\nfor (let i = 0; i < minLength; i++) {\n  result.push([$$args.list1[i], $$args.list2[i]]);\n}\nreturn result;\n"
      }
    },
    "returns": {
      "type": "_types.List",
      "description": "A list of tuples combining the elements of the two lists.",
      "items": {
        "type": "_types.Tuple",
        "items": [
          {
            "type": "_types.Any"
          },
          {
            "type": "_types.Any"
          }
        ]
      }
    },
    "tests": {
      "zipEqualLength": {
        "description": "Zip two lists of equal length.",
        "input": {
          "list1": [1, 2, 3],
          "list2": ["a", "b", "c"]
        },
        "expected": [
          [1, "a"],
          [2, "b"],
          [3, "c"]
        ]
      },
      "zipFirstLonger": {
        "description": "Zip two lists where the first list is longer.",
        "input": {
          "list1": [1, 2, 3, 4],
          "list2": ["a", "b"]
        },
        "expected": [
          [1, "a"],
          [2, "b"]
        ]
      },
      "zipSecondLonger": {
        "description": "Zip two lists where the second list is longer.",
        "input": {
          "list1": [1],
          "list2": ["a", "b", "c"]
        },
        "expected": [[1, "a"]]
      },
      "zipEmptyLists": {
        "description": "Zip two empty lists.",
        "input": {
          "list1": [],
          "list2": []
        },
        "expected": []
      }
    },
    "examples": [
      {
        "description": "Zip two lists with numeric and boolean values.",
        "input": {
          "list1": [1, 2],
          "list2": [true, false]
        },
        "expected": [
          [1, true],
          [2, false]
        ]
      },
      {
        "description": "Zip two lists with string and dictionary values.",
        "input": {
          "list1": ["first", "second"],
          "list2": [
            {
              "key": "value"
            },
            {
              "key2": "value2"
            }
          ]
        },
        "expected": [
          [
            "first",
            {
              "key": "value"
            }
          ],
          [
            "second",
            {
              "key2": "value2"
            }
          ]
        ]
      },
      {
        "description": "Zip two lists with different lengths where the second list is longer.",
        "input": {
          "list1": ["short"],
          "list2": ["start", "middle", "end"]
        },
        "expected": [["short", "start"]]
      }
    ]
  },
  {
    "define": "_functions.List.ZTest",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Selects the items starting at the given Start index and ending at the given End index.",
    "parameters": {
      "input": {
        "type": "_types.List",
        "description": "The list to slice."
      },
      "start": {
        "type": "_types.Number",
        "description": "Index of the first item."
      },
      "end": {
        "type": "_types.Number",
        "description": "Index where the range ends, not including the item at this index. Negative index will be calculated from the end of the list."
      }
    },
    "implementation": {
      "javascript": {
        "code": "const startIdx = $$args.start >= 0 ? $$args.start : $$args.input.length + $$args.start;\nconst endIdx = $$args.end >= 0 ? $$args.end : $$args.input.length + $$args.end;\nreturn $$args.input.slice(startIdx, endIdx);\n"
      }
    },
    "returns": {
      "type": "_types.List",
      "description": "The selected items from the list."
    },
    "tests": {
      "zTestNormal": {
        "description": "Slice a normal range of items from the list.",
        "input": {
          "input": ["a", "b", "c", "d", "e", "f"],
          "start": 2,
          "end": 5
        },
        "expected": ["c", "d", "e"]
      },
      "zTestIncludeStartExcludeEnd": {
        "description": "Slice with inclusive start and exclusive end index.",
        "input": {
          "input": ["a", "b", "c", "d", "e"],
          "start": 1,
          "end": -1
        },
        "expected": ["b", "c", "d"]
      },
      "zTestNegativeIndex": {
        "description": "Slice using negative indices.",
        "input": {
          "input": ["x", "y", "z", "w", "v"],
          "start": -3,
          "end": -1
        },
        "expected": ["z", "w"]
      },
      "zTestSingleItem": {
        "description": "Slice to get a single item from the list.",
        "input": {
          "input": ["apple", "banana", "cherry", "date", "elderberry"],
          "start": 2,
          "end": 3
        },
        "expected": ["cherry"]
      },
      "zTestEmptySlice": {
        "description": "Slice an empty range.",
        "input": {
          "input": ["alpha", "beta", "gamma"],
          "start": 3,
          "end": 3
        },
        "expected": []
      }
    },
    "examples": [
      {
        "description": "Selecting middle items from a list.",
        "input": {
          "input": [1, 2, 3, 4, 5],
          "start": 1,
          "end": 4
        },
        "expected": [2, 3, 4]
      },
      {
        "description": "Using zero as start index.",
        "input": {
          "input": ["mon", "tue", "wed", "thu", "fri"],
          "start": 0,
          "end": 3
        },
        "expected": ["mon", "tue", "wed"]
      },
      {
        "description": "Using negative end index.",
        "input": {
          "input": [10, 20, 30, 40, 50],
          "start": 1,
          "end": -1
        },
        "expected": [20, 30, 40]
      }
    ]
  },
  {
    "define": "_functions.Object.HasKey",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Checks if a key exists in an object.",
    "parameters": {
      "value": {
        "type": "_types.Dictionary",
        "description": "The object to check."
      },
      "key": {
        "type": "_types.String",
        "description": "The key to check for."
      }
    },
    "implementation": {
      "javascript": {
        "code": "return Object.prototype.hasOwnProperty.call($$args.value, $$args.key);\n"
      }
    },
    "returns": {
      "type": "_types.Boolean",
      "description": "True if the key exists in the object, false otherwise."
    },
    "tests": {
      "hasKey": {
        "description": "Test with a key that exists in the object.",
        "input": {
          "value": {
            "a": 1,
            "b": 2
          },
          "key": "a"
        },
        "expected": true
      },
      "doesNotHaveKey": {
        "description": "Test with a key that does not exist in the object.",
        "input": {
          "value": {
            "a": 1,
            "b": 2
          },
          "key": "c"
        },
        "expected": false
      },
      "emptyObject": {
        "description": "Test with an empty object.",
        "input": {
          "value": {},
          "key": "a"
        },
        "expected": false
      }
    },
    "examples": [
      {
        "description": "Check for a numeric key in an object.",
        "input": {
          "value": {
            "1": "one",
            "2": "two"
          },
          "key": "1"
        },
        "expected": true
      },
      {
        "description": "Check for a key with special characters.",
        "input": {
          "value": {
            "@key#": 10,
            "b": 20
          },
          "key": "@key#"
        },
        "expected": true
      },
      {
        "description": "Check for a non-string key in an object.",
        "input": {
          "value": {
            "foo": "bar",
            "baz": 42
          },
          "key": "baz"
        },
        "expected": false
      }
    ]
  },
  {
    "define": "_functions.Object.HasKeyRecursive",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Checks if a key exists in an object recursively.",
    "parameters": {
      "value": {
        "type": "_types.Dictionary",
        "description": "The object to check."
      },
      "key": {
        "type": "_types.String",
        "description": "The key to check for."
      }
    },
    "implementation": {
      "javascript": {
        "code": "function hasKeyRecursive(obj, key) {\n  if (Object.prototype.hasOwnProperty.call(obj, key)) {\n    return true;\n  }\n  for (let i in obj) {\n    if (typeof obj[i] === 'object') {\n      if (hasKeyRecursive(obj[i], key)) {\n        return true;\n      }\n    }\n  }\n  return false;\n}\nreturn hasKeyRecursive($$args.value, $$args.key);\n"
      }
    },
    "returns": {
      "type": "_types.Boolean",
      "description": "True if the key exists in the object, false otherwise."
    },
    "tests": {
      "hasKey": {
        "description": "Test with a key that exists in the object.",
        "input": {
          "value": {
            "a": 1,
            "b": {
              "c": 2
            }
          },
          "key": "c"
        },
        "expected": true
      },
      "doesNotHaveKey": {
        "description": "Test with a key that does not exist in the object.",
        "input": {
          "value": {
            "a": 1,
            "b": {
              "c": 2
            }
          },
          "key": "d"
        },
        "expected": false
      },
      "emptyObject": {
        "description": "Test with an empty object.",
        "input": {
          "value": {},
          "key": "a"
        },
        "expected": false
      },
      "threeLevelObject": {
        "description": "Test with a three-level object.",
        "input": {
          "value": {
            "a": {
              "b": {
                "c": 1
              }
            }
          },
          "key": "c"
        },
        "expected": true
      }
    },
    "examples": [
      {
        "description": "Check with a key that exists at the root level.",
        "input": {
          "value": {
            "a": 1,
            "b": 2,
            "c": 3
          },
          "key": "b"
        },
        "expected": true
      },
      {
        "description": "Check with a key that exists at the second level.",
        "input": {
          "value": {
            "a": {
              "b": 2,
              "c": 3
            }
          },
          "key": "b"
        },
        "expected": true
      },
      {
        "description": "Check with a key that does not exist in a two-level object.",
        "input": {
          "value": {
            "a": {
              "b": 2,
              "c": 3
            }
          },
          "key": "d"
        },
        "expected": false
      }
    ]
  },
  {
    "define": "_functions.Logical.HasKeys",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Checks if keys exist in an object.",
    "parameters": {
      "value": {
        "type": "_types.Object",
        "description": "The object to check."
      },
      "keys": {
        "type": "_types.List",
        "description": "The keys to check for."
      }
    },
    "implementation": {
      "javascript": {
        "code": "return $$args.keys.every(key => $$args.value.hasOwnProperty(key));\n"
      }
    },
    "returns": {
      "type": "_types.Boolean",
      "description": "True if all keys exist in the object, false otherwise."
    },
    "tests": {
      "hasKeys": {
        "description": "Check if keys exist in an object.",
        "input": {
          "value": {
            "a": 1,
            "b": 2,
            "c": 3
          },
          "keys": ["a", "b"]
        },
        "expected": true
      },
      "missingKeys": {
        "description": "Check if keys exist in an object.",
        "input": {
          "value": {
            "a": 1,
            "b": 2,
            "c": 3
          },
          "keys": ["a", "d"]
        },
        "expected": false
      }
    },
    "examples": [
      {
        "description": "Check if all provided keys exist in an empty object.",
        "input": {
          "value": {},
          "keys": ["a", "b"]
        },
        "expected": false
      },
      {
        "description": "Check if an object with nested keys has a key.",
        "input": {
          "value": {
            "a": {
              "b": 1
            },
            "c": 3
          },
          "keys": ["c"]
        },
        "expected": true
      },
      {
        "description": "Check if an object has multiple keys.",
        "input": {
          "value": {
            "x": 10,
            "y": 20,
            "z": 30
          },
          "keys": ["x", "y", "z"]
        },
        "expected": true
      }
    ]
  },
  {
    "define": "_functions.Object.HasKeysRecursive",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Checks if keys exist in an object recursively.",
    "parameters": {
      "value": {
        "type": "_types.Object",
        "description": "The object to check."
      },
      "keys": {
        "type": "_types.List",
        "description": "The keys to check for."
      }
    },
    "implementation": {
      "javascript": {
        "code": "function hasKeyRecursive(obj, key) {\n  if (Object.prototype.hasOwnProperty.call(obj, key)) {\n    return true;\n  }\n  for (let i in obj) {\n    if (typeof obj[i] === 'object') {\n      if (hasKeyRecursive(obj[i], key)) {\n        return true;\n      }\n    }\n  }\n  return false;\n}\nreturn $$args.keys.every(key => hasKeyRecursive($$args.value, key));\n"
      }
    },
    "returns": {
      "type": "_types.Boolean",
      "description": "True if all keys exist in the object, false otherwise."
    },
    "tests": {
      "hasKeys": {
        "description": "Test with keys that exist in the object.",
        "input": {
          "value": {
            "a": 1,
            "b": {
              "c": 2,
              "d": 3
            }
          },
          "keys": ["a", "c"]
        },
        "expected": true
      },
      "missingKeys": {
        "description": "Test with keys that do not exist in the object.",
        "input": {
          "value": {
            "a": 1,
            "b": {
              "c": 2,
              "d": 3
            }
          },
          "keys": ["a", "e"]
        },
        "expected": false
      },
      "emptyObject": {
        "description": "Test with an empty object.",
        "input": {
          "value": {},
          "keys": ["a"]
        },
        "expected": false
      }
    },
    "examples": [
      {
        "description": "Check keys where all are present in nested objects.",
        "input": {
          "value": {
            "x": 1,
            "y": {
              "z": 2,
              "w": {
                "u": 3
              }
            }
          },
          "keys": ["x", "u"]
        },
        "expected": true
      },
      {
        "description": "Check keys including one non-existent key in nested objects.",
        "input": {
          "value": {
            "m": 1,
            "n": {
              "o": 2,
              "p": {
                "q": 3
              }
            }
          },
          "keys": ["m", "r"]
        },
        "expected": false
      },
      {
        "description": "Check keys in a flat object where all keys are present.",
        "input": {
          "value": {
            "a": 1,
            "b": 2,
            "c": 3
          },
          "keys": ["a", "b", "c"]
        },
        "expected": true
      }
    ]
  },
  {
    "define": "_functions.Math.HasValue",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Checks if the input object has a value.",
    "parameters": {
      "value": {
        "type": "_types.Dictionary",
        "description": "The object to check."
      },
      "valueKey": {
        "type": "_types.Any",
        "description": "The key of the value to check."
      }
    },
    "implementation": {
      "javascript": {
        "code": "return Object.values($$args.value).includes($$args.valueKey);\n"
      }
    },
    "returns": {
      "type": "_types.Boolean",
      "description": "Whether the object has the value."
    },
    "tests": {
      "HasStringValue": {
        "description": "Check if the object has a value.",
        "input": {
          "value": {
            "key": "value"
          },
          "valueKey": "value"
        },
        "expected": true
      },
      "HasNumberValue": {
        "description": "Check if the object has a value.",
        "input": {
          "value": {
            "key": 1
          },
          "valueKey": 1
        },
        "expected": true
      },
      "NotHasStringValue": {
        "description": "Check if the object has a value.",
        "input": {
          "value": {
            "key": "value"
          },
          "valueKey": "noValue"
        },
        "expected": false
      },
      "NotHasNumberValue": {
        "description": "Check if the object has a value.",
        "input": {
          "value": {
            "key": 1
          },
          "valueKey": 2
        },
        "expected": false
      }
    },
    "examples": [
      {
        "description": "Check if the object has a Boolean value.",
        "input": {
          "value": {
            "key": true
          },
          "valueKey": true
        },
        "expected": true
      },
      {
        "description": "Check if the object does not have an undefined value.",
        "input": {
          "value": {
            "key": "defined"
          },
          "valueKey": "undefined"
        },
        "expected": false
      },
      {
        "description": "Check if the object has a nested object value.",
        "input": {
          "value": {
            "key": {
              "nestedKey": "nestedValue"
            }
          },
          "valueKey": {
            "nestedKey": "nestedValue"
          }
        },
        "expected": true
      }
    ]
  },
  {
    "define": "_functions.Object.HasValueRecursive",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Checks if a value exists in an object recursively.",
    "parameters": {
      "value": {
        "type": "_types.Dictionary",
        "description": "The object to check."
      },
      "valueKey": {
        "type": "_types.Any",
        "description": "The value to check for."
      }
    },
    "implementation": {
      "javascript": {
        "code": "function hasValueRecursive(obj, valueKey) {\n  if (Object.values(obj).includes(valueKey)) {\n    return true;\n  }\n  for (let i in obj) {\n    if (typeof obj[i] === 'object') {\n      if (hasValueRecursive(obj[i], valueKey)) {\n        return true;\n      }\n    }\n  }\n  return false;\n}\nreturn hasValueRecursive($$args.value, $$args.valueKey);\n"
      }
    },
    "returns": {
      "type": "_types.Boolean",
      "description": "True if the value exists in the object, false otherwise."
    },
    "tests": {
      "hasValue": {
        "description": "Test with a value that exists in the object.",
        "input": {
          "value": {
            "a": 1,
            "b": {
              "c": "2",
              "d": 3
            }
          },
          "valueKey": "2"
        },
        "expected": true
      },
      "doesNotHaveValue": {
        "description": "Test with a value that does not exist in the object.",
        "input": {
          "value": {
            "a": 1,
            "b": {
              "c": "2",
              "d": 3
            }
          },
          "valueKey": "4"
        },
        "expected": false
      },
      "emptyObject": {
        "description": "Test with an empty object.",
        "input": {
          "value": {},
          "valueKey": "1"
        },
        "expected": false
      }
    },
    "examples": [
      {
        "description": "Check for a nested value that exists.",
        "input": {
          "value": {
            "x": 10,
            "y": {
              "z": "found",
              "w": 20
            }
          },
          "valueKey": "found"
        },
        "expected": true
      },
      {
        "description": "Check for a value in a simple object.",
        "input": {
          "value": {
            "alpha": "beta",
            "gamma": "delta"
          },
          "valueKey": "beta"
        },
        "expected": true
      },
      {
        "description": "Check for a value that does not exist in a deeply nested object.",
        "input": {
          "value": {
            "one": {
              "two": {
                "three": "4"
              }
            }
          },
          "valueKey": "5"
        },
        "expected": false
      }
    ]
  },
  {
    "define": "_functions.Math.HasValues",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Checks if the input object has certain values.",
    "parameters": {
      "value": {
        "type": "_types.Dictionary",
        "description": "The object to check."
      },
      "valueKeys": {
        "type": "_types.List",
        "description": "The keys of the values to check."
      }
    },
    "implementation": {
      "javascript": {
        "code": "return $$args.valueKeys.every(valueKey => Object.values($$args.value).includes(valueKey));\n"
      }
    },
    "returns": {
      "type": "_types.Boolean",
      "description": "True if all values exist in the object, false otherwise."
    },
    "tests": {
      "HasStringValues": {
        "description": "Check if the object has certain values.",
        "input": {
          "value": {
            "key1": "value1",
            "key2": "value2"
          },
          "valueKeys": ["value1", "value2"]
        },
        "expected": true
      },
      "HasNumberValues": {
        "description": "Check if the object has certain values.",
        "input": {
          "value": {
            "key1": 1,
            "key2": 2
          },
          "valueKeys": [1, 2]
        },
        "expected": true
      },
      "NotHasStringValues": {
        "description": "Check if the object has certain values.",
        "input": {
          "value": {
            "key1": "value1",
            "key2": "value2"
          },
          "valueKeys": ["value1", "noValue"]
        },
        "expected": false
      },
      "NotHasNumberValues": {
        "description": "Check if the object has certain values.",
        "input": {
          "value": {
            "key1": 1,
            "key2": 2
          },
          "valueKeys": [1, 3]
        },
        "expected": false
      }
    },
    "examples": [
      {
        "description": "Check if the object has mixed-type values.",
        "input": {
          "value": {
            "key1": "value1",
            "key2": 2,
            "key3": true
          },
          "valueKeys": ["value1", 2]
        },
        "expected": true
      },
      {
        "description": "Check if the object with nested objects has string values.",
        "input": {
          "value": {
            "key1": {
              "nestedKey": "nestedValue"
            },
            "key2": "value2"
          },
          "valueKeys": ["value2", "nestedValue"]
        },
        "expected": true
      },
      {
        "description": "Check if the object has boolean values.",
        "input": {
          "value": {
            "key1": true,
            "key2": false
          },
          "valueKeys": [true]
        },
        "expected": true
      }
    ]
  },
  {
    "define": "_functions.Object.HasValuesRecursive",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Checks if values exist in an object recursively.",
    "parameters": {
      "value": {
        "type": "_types.Object",
        "description": "The object to check."
      },
      "valueKeys": {
        "type": "_types.List",
        "description": "The values to check for."
      }
    },
    "implementation": {
      "javascript": {
        "code": "function hasValueRecursive(obj, valueKey) {\n  if (Object.values(obj).includes(valueKey)) {\n    return true;\n  }\n  for (let i in obj) {\n    if (typeof obj[i] === 'object') {\n      if (hasValueRecursive(obj[i], valueKey)) {\n        return true;\n      }\n    }\n  }\n  return false;\n}\nreturn $$args.valueKeys.every(valueKey => hasValueRecursive($$args.value, valueKey));\n"
      }
    },
    "returns": {
      "type": "_types.Boolean",
      "description": "True if all values exist in the object, false otherwise."
    },
    "tests": {
      "hasValues": {
        "description": "Test with values that exist in the object.",
        "input": {
          "value": {
            "a": 1,
            "b": {
              "c": "2",
              "d": 3
            }
          },
          "valueKeys": ["2", 1]
        },
        "expected": true
      },
      "missingValues": {
        "description": "Test with values that do not exist in the object.",
        "input": {
          "value": {
            "a": 1,
            "b": {
              "c": "2",
              "d": 3
            }
          },
          "valueKeys": ["4", 1]
        },
        "expected": false
      },
      "emptyObject": {
        "description": "Test with an empty object.",
        "input": {
          "value": {},
          "valueKeys": ["1"]
        },
        "expected": false
      }
    },
    "examples": [
      {
        "description": "Check nested values.",
        "input": {
          "value": {
            "a": 1,
            "b": {
              "c": 2,
              "d": {
                "e": 3
              }
            }
          },
          "valueKeys": [1, 2]
        },
        "expected": true
      },
      {
        "description": "Check non-string values recursively.",
        "input": {
          "value": {
            "a": [1, 2, 3],
            "b": {
              "c": true,
              "d": {
                "e": "hello"
              }
            }
          },
          "valueKeys": [true, "hello"]
        },
        "expected": true
      },
      {
        "description": "Check values for deep nested structure.",
        "input": {
          "value": {
            "x": {
              "y": {
                "z": {
                  "w": "found"
                }
              }
            }
          },
          "valueKeys": ["found"]
        },
        "expected": true
      }
    ]
  },
  {
    "define": "_functions.Object.IsObject",
    "blueprint": "_blueprint.Flowgraph",
    "description": "Checks if the provided input is an object.",
    "parameters": {
      "value": {
        "type": "_types.Any",
        "description": "The value to check."
      }
    },
    "implementation": {
      "javascript": {
        "code": "return typeof $$args.value === 'object' && $$args.value !== null;\n"
      }
    },
    "returns": {
      "type": "_types.Boolean",
      "description": "Whether the provided input is an object."
    },
    "tests": {
      "isObject": {
        "description": "Check if the provided input is an object.",
        "input": {
          "value": {
            "a": 1
          }
        },
        "expected": true
      },
      "isNotObject": {
        "description": "Check if the provided input is not an object.",
        "input": {
          "value": 1
        },
        "expected": false
      },
      "isNestedObject": {
        "description": "Check if the provided input is a nested object.",
        "input": {
          "value": {
            "a": {
              "b": 1
            }
          }
        },
        "expected": true
      }
    },
    "examples": [
      {
        "description": "Check if the provided input is a string.",
        "input": {
          "value": "Hello"
        },
        "expected": false
      },
      {
        "description": "Check if the provided input is null.",
        "input": {
          "value": null
        },
        "expected": false
      },
      {
        "description": "Check if the provided input is an array.",
        "input": {
          "value": [1, 2, 3]
        },
        "expected": true
      }
    ]
  }
]
